
14_InputCapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000026c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000400  08000408  00001408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000400  08000400  00001408  2**0
                  CONTENTS
  4 .ARM          00000000  08000400  08000400  00001408  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000400  08000408  00001408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000400  08000400  00001400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000404  08000404  00001404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000408  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000408  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000626  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001a4  00000000  00000000  00001a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00001c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004d  00000000  00000000  00001c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000e7b  00000000  00000000  00001ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ee6  00000000  00000000  00002b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00052be0  00000000  00000000  00003a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005660e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c8  00000000  00000000  00056654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0005671c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003e8 	.word	0x080003e8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003e8 	.word	0x080003e8

080001d4 <main>:


int timestamp = 0;

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	tim2_pa5_output_compare();
 80001d8:	f000 f814 	bl	8000204 <tim2_pa5_output_compare>
	tim3_pa6_input_capture();
 80001dc:	f000 f86c 	bl	80002b8 <tim3_pa6_input_capture>

	while(1)
	{
		/*Wait until edge is captured*/
		while(!(TIM3->SR & SR_CC1IF));
 80001e0:	bf00      	nop
 80001e2:	4b06      	ldr	r3, [pc, #24]	@ (80001fc <main+0x28>)
 80001e4:	691b      	ldr	r3, [r3, #16]
 80001e6:	f003 0302 	and.w	r3, r3, #2
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d0f9      	beq.n	80001e2 <main+0xe>
		/*Read captured value*/
		timestamp = TIM3->CCR1;
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <main+0x28>)
 80001f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80001f2:	461a      	mov	r2, r3
 80001f4:	4b02      	ldr	r3, [pc, #8]	@ (8000200 <main+0x2c>)
 80001f6:	601a      	str	r2, [r3, #0]
		while(!(TIM3->SR & SR_CC1IF));
 80001f8:	e7f2      	b.n	80001e0 <main+0xc>
 80001fa:	bf00      	nop
 80001fc:	40000400 	.word	0x40000400
 8000200:	2000001c 	.word	0x2000001c

08000204 <tim2_pa5_output_compare>:
}



void tim2_pa5_output_compare(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	/*Enable Clock Access*/
	RCC->AHB1ENR |= (1U<<0);
 8000208:	4b29      	ldr	r3, [pc, #164]	@ (80002b0 <tim2_pa5_output_compare+0xac>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a28      	ldr	r2, [pc, #160]	@ (80002b0 <tim2_pa5_output_compare+0xac>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set to alternate function mode*/
	GPIOA->MODER |= (1U<<11);
 8000214:	4b27      	ldr	r3, [pc, #156]	@ (80002b4 <tim2_pa5_output_compare+0xb0>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a26      	ldr	r2, [pc, #152]	@ (80002b4 <tim2_pa5_output_compare+0xb0>)
 800021a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<10);
 8000220:	4b24      	ldr	r3, [pc, #144]	@ (80002b4 <tim2_pa5_output_compare+0xb0>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a23      	ldr	r2, [pc, #140]	@ (80002b4 <tim2_pa5_output_compare+0xb0>)
 8000226:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800022a:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF01*/
	GPIOA->AFR[0] &=~(1U<<23);
 800022c:	4b21      	ldr	r3, [pc, #132]	@ (80002b4 <tim2_pa5_output_compare+0xb0>)
 800022e:	6a1b      	ldr	r3, [r3, #32]
 8000230:	4a20      	ldr	r2, [pc, #128]	@ (80002b4 <tim2_pa5_output_compare+0xb0>)
 8000232:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000236:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<22);
 8000238:	4b1e      	ldr	r3, [pc, #120]	@ (80002b4 <tim2_pa5_output_compare+0xb0>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	4a1d      	ldr	r2, [pc, #116]	@ (80002b4 <tim2_pa5_output_compare+0xb0>)
 800023e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000242:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<21);
 8000244:	4b1b      	ldr	r3, [pc, #108]	@ (80002b4 <tim2_pa5_output_compare+0xb0>)
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	4a1a      	ldr	r2, [pc, #104]	@ (80002b4 <tim2_pa5_output_compare+0xb0>)
 800024a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800024e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<20);
 8000250:	4b18      	ldr	r3, [pc, #96]	@ (80002b4 <tim2_pa5_output_compare+0xb0>)
 8000252:	6a1b      	ldr	r3, [r3, #32]
 8000254:	4a17      	ldr	r2, [pc, #92]	@ (80002b4 <tim2_pa5_output_compare+0xb0>)
 8000256:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800025a:	6213      	str	r3, [r2, #32]

	/*Enable clock access to tim2*/
	RCC->APB1ENR |= TIM2EN;
 800025c:	4b14      	ldr	r3, [pc, #80]	@ (80002b0 <tim2_pa5_output_compare+0xac>)
 800025e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000260:	4a13      	ldr	r2, [pc, #76]	@ (80002b0 <tim2_pa5_output_compare+0xac>)
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Set the prescaler value*/
	TIM2->PSC = 1600 - 1;
 8000268:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800026c:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000270:	629a      	str	r2, [r3, #40]	@ 0x28
	/*Set auto-reload value*/
	TIM2->ARR = 10000 - 1;
 8000272:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000276:	f242 720f 	movw	r2, #9999	@ 0x270f
 800027a:	62da      	str	r2, [r3, #44]	@ 0x2c

	/*Set output compare toggle mode*/
	TIM2->CCMR1 = OC_TOGGLE;
 800027c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000280:	2230      	movs	r2, #48	@ 0x30
 8000282:	619a      	str	r2, [r3, #24]
	/*Enable tim2 ch1 in compare mode*/
	TIM2->CCER |= CCER_CC1E;
 8000284:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000288:	6a1b      	ldr	r3, [r3, #32]
 800028a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	6213      	str	r3, [r2, #32]


	/*Clear counter*/
	TIM2->CNT = 0;
 8000294:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000298:	2200      	movs	r2, #0
 800029a:	625a      	str	r2, [r3, #36]	@ 0x24
	/*Enable timer*/
	TIM2->CR1 = CR1_CEN;
 800029c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a0:	2201      	movs	r2, #1
 80002a2:	601a      	str	r2, [r3, #0]
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40023800 	.word	0x40023800
 80002b4:	40020000 	.word	0x40020000

080002b8 <tim3_pa6_input_capture>:


void tim3_pa6_input_capture(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
	/*Enable Clock Access*/
	RCC->AHB1ENR |= (1U<<0);
 80002bc:	4b20      	ldr	r3, [pc, #128]	@ (8000340 <tim3_pa6_input_capture+0x88>)
 80002be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c0:	4a1f      	ldr	r2, [pc, #124]	@ (8000340 <tim3_pa6_input_capture+0x88>)
 80002c2:	f043 0301 	orr.w	r3, r3, #1
 80002c6:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set to alternate function mode*/
	GPIOA->MODER |= (1U<<13);
 80002c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000344 <tim3_pa6_input_capture+0x8c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000344 <tim3_pa6_input_capture+0x8c>)
 80002ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002d2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<12);
 80002d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000344 <tim3_pa6_input_capture+0x8c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a1a      	ldr	r2, [pc, #104]	@ (8000344 <tim3_pa6_input_capture+0x8c>)
 80002da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80002de:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF01*/
	GPIOA->AFR[0] &=~(1U<<27);
 80002e0:	4b18      	ldr	r3, [pc, #96]	@ (8000344 <tim3_pa6_input_capture+0x8c>)
 80002e2:	6a1b      	ldr	r3, [r3, #32]
 80002e4:	4a17      	ldr	r2, [pc, #92]	@ (8000344 <tim3_pa6_input_capture+0x8c>)
 80002e6:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80002ea:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<26);
 80002ec:	4b15      	ldr	r3, [pc, #84]	@ (8000344 <tim3_pa6_input_capture+0x8c>)
 80002ee:	6a1b      	ldr	r3, [r3, #32]
 80002f0:	4a14      	ldr	r2, [pc, #80]	@ (8000344 <tim3_pa6_input_capture+0x8c>)
 80002f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80002f6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<25);
 80002f8:	4b12      	ldr	r3, [pc, #72]	@ (8000344 <tim3_pa6_input_capture+0x8c>)
 80002fa:	6a1b      	ldr	r3, [r3, #32]
 80002fc:	4a11      	ldr	r2, [pc, #68]	@ (8000344 <tim3_pa6_input_capture+0x8c>)
 80002fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000302:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<24);
 8000304:	4b0f      	ldr	r3, [pc, #60]	@ (8000344 <tim3_pa6_input_capture+0x8c>)
 8000306:	6a1b      	ldr	r3, [r3, #32]
 8000308:	4a0e      	ldr	r2, [pc, #56]	@ (8000344 <tim3_pa6_input_capture+0x8c>)
 800030a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800030e:	6213      	str	r3, [r2, #32]

	/*Enable clock access to tim3*/
	RCC->APB1ENR |= TIM3EN;
 8000310:	4b0b      	ldr	r3, [pc, #44]	@ (8000340 <tim3_pa6_input_capture+0x88>)
 8000312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000314:	4a0a      	ldr	r2, [pc, #40]	@ (8000340 <tim3_pa6_input_capture+0x88>)
 8000316:	f043 0302 	orr.w	r3, r3, #2
 800031a:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Set the prescaler value*/
	TIM3->PSC = 16000 - 1;
 800031c:	4b0a      	ldr	r3, [pc, #40]	@ (8000348 <tim3_pa6_input_capture+0x90>)
 800031e:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000322:	629a      	str	r2, [r3, #40]	@ 0x28

	/*Set CH1 to input capture mode*/
	TIM3->CCMR1 = CC1S;
 8000324:	4b08      	ldr	r3, [pc, #32]	@ (8000348 <tim3_pa6_input_capture+0x90>)
 8000326:	2201      	movs	r2, #1
 8000328:	619a      	str	r2, [r3, #24]

	/*Set CH1 to capture at rising edge*/
	TIM3->CCER = CCER_CC1E;
 800032a:	4b07      	ldr	r3, [pc, #28]	@ (8000348 <tim3_pa6_input_capture+0x90>)
 800032c:	2201      	movs	r2, #1
 800032e:	621a      	str	r2, [r3, #32]

	/*Enable timer*/
	TIM3->CR1 = CR1_CEN;
 8000330:	4b05      	ldr	r3, [pc, #20]	@ (8000348 <tim3_pa6_input_capture+0x90>)
 8000332:	2201      	movs	r2, #1
 8000334:	601a      	str	r2, [r3, #0]
}
 8000336:	bf00      	nop
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr
 8000340:	40023800 	.word	0x40023800
 8000344:	40020000 	.word	0x40020000
 8000348:	40000400 	.word	0x40000400

0800034c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800034c:	480d      	ldr	r0, [pc, #52]	@ (8000384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000350:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000354:	480c      	ldr	r0, [pc, #48]	@ (8000388 <LoopForever+0x6>)
  ldr r1, =_edata
 8000356:	490d      	ldr	r1, [pc, #52]	@ (800038c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000358:	4a0d      	ldr	r2, [pc, #52]	@ (8000390 <LoopForever+0xe>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800035c:	e002      	b.n	8000364 <LoopCopyDataInit>

0800035e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000362:	3304      	adds	r3, #4

08000364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000368:	d3f9      	bcc.n	800035e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036a:	4a0a      	ldr	r2, [pc, #40]	@ (8000394 <LoopForever+0x12>)
  ldr r4, =_ebss
 800036c:	4c0a      	ldr	r4, [pc, #40]	@ (8000398 <LoopForever+0x16>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000370:	e001      	b.n	8000376 <LoopFillZerobss>

08000372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000374:	3204      	adds	r2, #4

08000376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000378:	d3fb      	bcc.n	8000372 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800037a:	f000 f811 	bl	80003a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037e:	f7ff ff29 	bl	80001d4 <main>

08000382 <LoopForever>:

LoopForever:
  b LoopForever
 8000382:	e7fe      	b.n	8000382 <LoopForever>
  ldr   r0, =_estack
 8000384:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800038c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000390:	08000408 	.word	0x08000408
  ldr r2, =_sbss
 8000394:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000398:	20000020 	.word	0x20000020

0800039c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800039c:	e7fe      	b.n	800039c <ADC_IRQHandler>
	...

080003a0 <__libc_init_array>:
 80003a0:	b570      	push	{r4, r5, r6, lr}
 80003a2:	4d0d      	ldr	r5, [pc, #52]	@ (80003d8 <__libc_init_array+0x38>)
 80003a4:	4c0d      	ldr	r4, [pc, #52]	@ (80003dc <__libc_init_array+0x3c>)
 80003a6:	1b64      	subs	r4, r4, r5
 80003a8:	10a4      	asrs	r4, r4, #2
 80003aa:	2600      	movs	r6, #0
 80003ac:	42a6      	cmp	r6, r4
 80003ae:	d109      	bne.n	80003c4 <__libc_init_array+0x24>
 80003b0:	4d0b      	ldr	r5, [pc, #44]	@ (80003e0 <__libc_init_array+0x40>)
 80003b2:	4c0c      	ldr	r4, [pc, #48]	@ (80003e4 <__libc_init_array+0x44>)
 80003b4:	f000 f818 	bl	80003e8 <_init>
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	10a4      	asrs	r4, r4, #2
 80003bc:	2600      	movs	r6, #0
 80003be:	42a6      	cmp	r6, r4
 80003c0:	d105      	bne.n	80003ce <__libc_init_array+0x2e>
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c8:	4798      	blx	r3
 80003ca:	3601      	adds	r6, #1
 80003cc:	e7ee      	b.n	80003ac <__libc_init_array+0xc>
 80003ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d2:	4798      	blx	r3
 80003d4:	3601      	adds	r6, #1
 80003d6:	e7f2      	b.n	80003be <__libc_init_array+0x1e>
 80003d8:	08000400 	.word	0x08000400
 80003dc:	08000400 	.word	0x08000400
 80003e0:	08000400 	.word	0x08000400
 80003e4:	08000404 	.word	0x08000404

080003e8 <_init>:
 80003e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ea:	bf00      	nop
 80003ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ee:	bc08      	pop	{r3}
 80003f0:	469e      	mov	lr, r3
 80003f2:	4770      	bx	lr

080003f4 <_fini>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	bf00      	nop
 80003f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	469e      	mov	lr, r3
 80003fe:	4770      	bx	lr
