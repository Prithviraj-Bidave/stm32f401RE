
14_InputCapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001544  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080016e4  080016e4  000026e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001738  08001738  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001738  08001738  00002738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001740  08001740  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001740  08001740  00002740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001744  08001744  00002744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001748  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000005c  080017a4  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080017a4  000031d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012df  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005b4  00000000  00000000  0000436b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a0  00000000  00000000  00004920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000120  00000000  00000000  00004ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002042  00000000  00000000  00004be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000261d  00000000  00000000  00006c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054f4b  00000000  00000000  0000923f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005e18a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c90  00000000  00000000  0005e1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0005ee60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080016cc 	.word	0x080016cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080016cc 	.word	0x080016cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
int timestamp1 = 0, timestamp2 = 0;



int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
//	tim2_pa5_output_compare();
//	tim3_pa6_input_capture();
	uart2_rxtx_init();
 8000284:	f000 fa1c 	bl	80006c0 <uart2_rxtx_init>
	tim2_pa5_pa1_output_compare();
 8000288:	f000 f966 	bl	8000558 <tim2_pa5_pa1_output_compare>
	tim3_pa6_pa7_input_capture();
 800028c:	f000 f8d4 	bl	8000438 <tim3_pa6_pa7_input_capture>

	while(1)
	{
		/*Wait until edge is captured*/
		while(!(TIM3->SR & SR_CC1IF));
 8000290:	bf00      	nop
 8000292:	4b12      	ldr	r3, [pc, #72]	@ (80002dc <main+0x5c>)
 8000294:	691b      	ldr	r3, [r3, #16]
 8000296:	f003 0302 	and.w	r3, r3, #2
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0f9      	beq.n	8000292 <main+0x12>
		/*Read captured value*/
		timestamp1 = TIM3->CCR1;
 800029e:	4b0f      	ldr	r3, [pc, #60]	@ (80002dc <main+0x5c>)
 80002a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80002a2:	461a      	mov	r2, r3
 80002a4:	4b0e      	ldr	r3, [pc, #56]	@ (80002e0 <main+0x60>)
 80002a6:	601a      	str	r2, [r3, #0]

		/*Wait until edge is captured*/
		while(!(TIM3->SR & SR_CC2IF));
 80002a8:	bf00      	nop
 80002aa:	4b0c      	ldr	r3, [pc, #48]	@ (80002dc <main+0x5c>)
 80002ac:	691b      	ldr	r3, [r3, #16]
 80002ae:	f003 0304 	and.w	r3, r3, #4
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d0f9      	beq.n	80002aa <main+0x2a>
		/*Read captured value*/
		timestamp2 = TIM3->CCR2;
 80002b6:	4b09      	ldr	r3, [pc, #36]	@ (80002dc <main+0x5c>)
 80002b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80002ba:	461a      	mov	r2, r3
 80002bc:	4b09      	ldr	r3, [pc, #36]	@ (80002e4 <main+0x64>)
 80002be:	601a      	str	r2, [r3, #0]

		if(timestamp1 > timestamp2)
 80002c0:	4b07      	ldr	r3, [pc, #28]	@ (80002e0 <main+0x60>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b07      	ldr	r3, [pc, #28]	@ (80002e4 <main+0x64>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	dd03      	ble.n	80002d4 <main+0x54>
		{
			printf("Timestamp 1\n\r");
 80002cc:	4806      	ldr	r0, [pc, #24]	@ (80002e8 <main+0x68>)
 80002ce:	f000 fb91 	bl	80009f4 <iprintf>
 80002d2:	e7dd      	b.n	8000290 <main+0x10>
		}
		else
		{
			printf("Timestamp 2\n\r");
 80002d4:	4805      	ldr	r0, [pc, #20]	@ (80002ec <main+0x6c>)
 80002d6:	f000 fb8d 	bl	80009f4 <iprintf>
		while(!(TIM3->SR & SR_CC1IF));
 80002da:	e7d9      	b.n	8000290 <main+0x10>
 80002dc:	40000400 	.word	0x40000400
 80002e0:	20000078 	.word	0x20000078
 80002e4:	2000007c 	.word	0x2000007c
 80002e8:	080016e4 	.word	0x080016e4
 80002ec:	080016f4 	.word	0x080016f4

080002f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	60f8      	str	r0, [r7, #12]
 80002f8:	60b9      	str	r1, [r7, #8]
 80002fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002fc:	2300      	movs	r3, #0
 80002fe:	617b      	str	r3, [r7, #20]
 8000300:	e00a      	b.n	8000318 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000302:	f3af 8000 	nop.w
 8000306:	4601      	mov	r1, r0
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	1c5a      	adds	r2, r3, #1
 800030c:	60ba      	str	r2, [r7, #8]
 800030e:	b2ca      	uxtb	r2, r1
 8000310:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000312:	697b      	ldr	r3, [r7, #20]
 8000314:	3301      	adds	r3, #1
 8000316:	617b      	str	r3, [r7, #20]
 8000318:	697a      	ldr	r2, [r7, #20]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	429a      	cmp	r2, r3
 800031e:	dbf0      	blt.n	8000302 <_read+0x12>
  }

  return len;
 8000320:	687b      	ldr	r3, [r7, #4]
}
 8000322:	4618      	mov	r0, r3
 8000324:	3718      	adds	r7, #24
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}

0800032a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800032a:	b580      	push	{r7, lr}
 800032c:	b086      	sub	sp, #24
 800032e:	af00      	add	r7, sp, #0
 8000330:	60f8      	str	r0, [r7, #12]
 8000332:	60b9      	str	r1, [r7, #8]
 8000334:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000336:	2300      	movs	r3, #0
 8000338:	617b      	str	r3, [r7, #20]
 800033a:	e009      	b.n	8000350 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	1c5a      	adds	r2, r3, #1
 8000340:	60ba      	str	r2, [r7, #8]
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	4618      	mov	r0, r3
 8000346:	f000 f9af 	bl	80006a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	3301      	adds	r3, #1
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	697a      	ldr	r2, [r7, #20]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	429a      	cmp	r2, r3
 8000356:	dbf1      	blt.n	800033c <_write+0x12>
  }
  return len;
 8000358:	687b      	ldr	r3, [r7, #4]
}
 800035a:	4618      	mov	r0, r3
 800035c:	3718      	adds	r7, #24
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <_close>:

int _close(int file)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800036a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800036e:	4618      	mov	r0, r3
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800037a:	b480      	push	{r7}
 800037c:	b083      	sub	sp, #12
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
 8000382:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800038a:	605a      	str	r2, [r3, #4]
  return 0;
 800038c:	2300      	movs	r3, #0
}
 800038e:	4618      	mov	r0, r3
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr

0800039a <_isatty>:

int _isatty(int file)
{
 800039a:	b480      	push	{r7}
 800039c:	b083      	sub	sp, #12
 800039e:	af00      	add	r7, sp, #0
 80003a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003a2:	2301      	movs	r3, #1
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	60f8      	str	r0, [r7, #12]
 80003b8:	60b9      	str	r1, [r7, #8]
 80003ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003bc:	2300      	movs	r3, #0
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3714      	adds	r7, #20
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
	...

080003cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003d4:	4a14      	ldr	r2, [pc, #80]	@ (8000428 <_sbrk+0x5c>)
 80003d6:	4b15      	ldr	r3, [pc, #84]	@ (800042c <_sbrk+0x60>)
 80003d8:	1ad3      	subs	r3, r2, r3
 80003da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003e0:	4b13      	ldr	r3, [pc, #76]	@ (8000430 <_sbrk+0x64>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d102      	bne.n	80003ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003e8:	4b11      	ldr	r3, [pc, #68]	@ (8000430 <_sbrk+0x64>)
 80003ea:	4a12      	ldr	r2, [pc, #72]	@ (8000434 <_sbrk+0x68>)
 80003ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003ee:	4b10      	ldr	r3, [pc, #64]	@ (8000430 <_sbrk+0x64>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4413      	add	r3, r2
 80003f6:	693a      	ldr	r2, [r7, #16]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d207      	bcs.n	800040c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003fc:	f000 fb9e 	bl	8000b3c <__errno>
 8000400:	4603      	mov	r3, r0
 8000402:	220c      	movs	r2, #12
 8000404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000406:	f04f 33ff 	mov.w	r3, #4294967295
 800040a:	e009      	b.n	8000420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800040c:	4b08      	ldr	r3, [pc, #32]	@ (8000430 <_sbrk+0x64>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000412:	4b07      	ldr	r3, [pc, #28]	@ (8000430 <_sbrk+0x64>)
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4413      	add	r3, r2
 800041a:	4a05      	ldr	r2, [pc, #20]	@ (8000430 <_sbrk+0x64>)
 800041c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800041e:	68fb      	ldr	r3, [r7, #12]
}
 8000420:	4618      	mov	r0, r3
 8000422:	3718      	adds	r7, #24
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20018000 	.word	0x20018000
 800042c:	00000400 	.word	0x00000400
 8000430:	20000080 	.word	0x20000080
 8000434:	200001d0 	.word	0x200001d0

08000438 <tim3_pa6_pa7_input_capture>:
	TIM3->CR1 = CR1_CEN;
}


void tim3_pa6_pa7_input_capture(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
    /* Enable GPIOA clock */
    RCC->AHB1ENR |= (1U << 0);
 800043c:	4b43      	ldr	r3, [pc, #268]	@ (800054c <tim3_pa6_pa7_input_capture+0x114>)
 800043e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000440:	4a42      	ldr	r2, [pc, #264]	@ (800054c <tim3_pa6_pa7_input_capture+0x114>)
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	6313      	str	r3, [r2, #48]	@ 0x30

    /* Configure PA6 (TIM3_CH1) to alternate function AF2 */
    GPIOA->MODER &= ~(3U << 12);    // Clear MODER bits for PA6 (bits 12-13)
 8000448:	4b41      	ldr	r3, [pc, #260]	@ (8000550 <tim3_pa6_pa7_input_capture+0x118>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a40      	ldr	r2, [pc, #256]	@ (8000550 <tim3_pa6_pa7_input_capture+0x118>)
 800044e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000452:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2U << 12);    // Set AF mode (10) for PA6
 8000454:	4b3e      	ldr	r3, [pc, #248]	@ (8000550 <tim3_pa6_pa7_input_capture+0x118>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a3d      	ldr	r2, [pc, #244]	@ (8000550 <tim3_pa6_pa7_input_capture+0x118>)
 800045a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800045e:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(0xF << 24);  // Clear AFR bits for PA6 (bits 24-27)
 8000460:	4b3b      	ldr	r3, [pc, #236]	@ (8000550 <tim3_pa6_pa7_input_capture+0x118>)
 8000462:	6a1b      	ldr	r3, [r3, #32]
 8000464:	4a3a      	ldr	r2, [pc, #232]	@ (8000550 <tim3_pa6_pa7_input_capture+0x118>)
 8000466:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800046a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (2U << 24);   // Set AF2 for PA6
 800046c:	4b38      	ldr	r3, [pc, #224]	@ (8000550 <tim3_pa6_pa7_input_capture+0x118>)
 800046e:	6a1b      	ldr	r3, [r3, #32]
 8000470:	4a37      	ldr	r2, [pc, #220]	@ (8000550 <tim3_pa6_pa7_input_capture+0x118>)
 8000472:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000476:	6213      	str	r3, [r2, #32]

    /* Configure PA7 (TIM3_CH2) to alternate function AF2 */
    GPIOA->MODER &= ~(3U << 14);    // Clear MODER bits for PA7 (bits 14-15)
 8000478:	4b35      	ldr	r3, [pc, #212]	@ (8000550 <tim3_pa6_pa7_input_capture+0x118>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a34      	ldr	r2, [pc, #208]	@ (8000550 <tim3_pa6_pa7_input_capture+0x118>)
 800047e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000482:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2U << 14);    // Set AF mode (10) for PA7
 8000484:	4b32      	ldr	r3, [pc, #200]	@ (8000550 <tim3_pa6_pa7_input_capture+0x118>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a31      	ldr	r2, [pc, #196]	@ (8000550 <tim3_pa6_pa7_input_capture+0x118>)
 800048a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800048e:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(0xF << 28);  // Clear AFR bits for PA7 (bits 28-31)
 8000490:	4b2f      	ldr	r3, [pc, #188]	@ (8000550 <tim3_pa6_pa7_input_capture+0x118>)
 8000492:	6a1b      	ldr	r3, [r3, #32]
 8000494:	4a2e      	ldr	r2, [pc, #184]	@ (8000550 <tim3_pa6_pa7_input_capture+0x118>)
 8000496:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800049a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (2U << 28);   // Set AF2 for PA7
 800049c:	4b2c      	ldr	r3, [pc, #176]	@ (8000550 <tim3_pa6_pa7_input_capture+0x118>)
 800049e:	6a1b      	ldr	r3, [r3, #32]
 80004a0:	4a2b      	ldr	r2, [pc, #172]	@ (8000550 <tim3_pa6_pa7_input_capture+0x118>)
 80004a2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80004a6:	6213      	str	r3, [r2, #32]

    /* Enable TIM3 clock */
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80004a8:	4b28      	ldr	r3, [pc, #160]	@ (800054c <tim3_pa6_pa7_input_capture+0x114>)
 80004aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004ac:	4a27      	ldr	r2, [pc, #156]	@ (800054c <tim3_pa6_pa7_input_capture+0x114>)
 80004ae:	f043 0302 	orr.w	r3, r3, #2
 80004b2:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Set prescaler */
    TIM3->PSC = 16000 - 1;
 80004b4:	4b27      	ldr	r3, [pc, #156]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 80004b6:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80004ba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Configure CH1 (PA6) for input capture on TI1 */
    TIM3->CCMR1 &= ~(0x3);          // Clear CC1S bits
 80004bc:	4b25      	ldr	r3, [pc, #148]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a24      	ldr	r2, [pc, #144]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 80004c2:	f023 0303 	bic.w	r3, r3, #3
 80004c6:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |=  (0x1 << 0);     // CC1S = 01 (TI1)
 80004c8:	4b22      	ldr	r3, [pc, #136]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a21      	ldr	r2, [pc, #132]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 80004ce:	f043 0301 	orr.w	r3, r3, #1
 80004d2:	6193      	str	r3, [r2, #24]

    /* Configure CH2 (PA7) for input capture on TI2 */
    TIM3->CCMR1 &= ~(0x3 << 8);     // Clear CC2S bits
 80004d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a1e      	ldr	r2, [pc, #120]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 80004da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80004de:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |=  (0x1 << 8);     // CC2S = 01 (TI2)
 80004e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 80004e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004ea:	6193      	str	r3, [r2, #24]

    /* Capture on rising edge for both channels */
    TIM3->CCER &= ~((1U << 1) | (1U << 5)); // CC1P = 0, CC2P = 0 (rising edge)
 80004ec:	4b19      	ldr	r3, [pc, #100]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 80004ee:	6a1b      	ldr	r3, [r3, #32]
 80004f0:	4a18      	ldr	r2, [pc, #96]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 80004f2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80004f6:	6213      	str	r3, [r2, #32]
    TIM3->CCER |=  ((1U << 0) | (1U << 4)); // CC1E = 1, CC2E = 1 (enable capture)
 80004f8:	4b16      	ldr	r3, [pc, #88]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 80004fa:	6a1b      	ldr	r3, [r3, #32]
 80004fc:	4a15      	ldr	r2, [pc, #84]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 80004fe:	f043 0311 	orr.w	r3, r3, #17
 8000502:	6213      	str	r3, [r2, #32]
    // Typically, the timer reset slave mode can only be triggered by one trigger source.
    // So this setup is not straightforward for simultaneous independent capture reset.
    // You may want to handle this in software or by configuring two timers.

    // But if you want reset on TI1FP1:
    TIM3->SMCR &= ~(0x7 << 4);
 8000504:	4b13      	ldr	r3, [pc, #76]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	4a12      	ldr	r2, [pc, #72]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 800050a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800050e:	6093      	str	r3, [r2, #8]
    TIM3->SMCR |=  (0x5 << 4);      // TS = 101: TI1FP1
 8000510:	4b10      	ldr	r3, [pc, #64]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	4a0f      	ldr	r2, [pc, #60]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 8000516:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800051a:	6093      	str	r3, [r2, #8]

    /* Set slave mode to reset mode */
    TIM3->SMCR &= ~(0x7);
 800051c:	4b0d      	ldr	r3, [pc, #52]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	4a0c      	ldr	r2, [pc, #48]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 8000522:	f023 0307 	bic.w	r3, r3, #7
 8000526:	6093      	str	r3, [r2, #8]
    TIM3->SMCR |=  (0x4);           // SMS = 100: Reset mode
 8000528:	4b0a      	ldr	r3, [pc, #40]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	4a09      	ldr	r2, [pc, #36]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 800052e:	f043 0304 	orr.w	r3, r3, #4
 8000532:	6093      	str	r3, [r2, #8]

    /* Enable timer */
    TIM3->CR1 |= (1U << 0);
 8000534:	4b07      	ldr	r3, [pc, #28]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a06      	ldr	r2, [pc, #24]	@ (8000554 <tim3_pa6_pa7_input_capture+0x11c>)
 800053a:	f043 0301 	orr.w	r3, r3, #1
 800053e:	6013      	str	r3, [r2, #0]
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40023800 	.word	0x40023800
 8000550:	40020000 	.word	0x40020000
 8000554:	40000400 	.word	0x40000400

08000558 <tim2_pa5_pa1_output_compare>:

void tim2_pa5_pa1_output_compare(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
    /* Enable GPIOA clock */
    RCC->AHB1ENR |= (1U << 0);
 800055c:	4b50      	ldr	r3, [pc, #320]	@ (80006a0 <tim2_pa5_pa1_output_compare+0x148>)
 800055e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000560:	4a4f      	ldr	r2, [pc, #316]	@ (80006a0 <tim2_pa5_pa1_output_compare+0x148>)
 8000562:	f043 0301 	orr.w	r3, r3, #1
 8000566:	6313      	str	r3, [r2, #48]	@ 0x30

    /* Configure PA5 (TIM2_CH1) to AF1 */
    GPIOA->MODER &= ~(3U << 10);
 8000568:	4b4e      	ldr	r3, [pc, #312]	@ (80006a4 <tim2_pa5_pa1_output_compare+0x14c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a4d      	ldr	r2, [pc, #308]	@ (80006a4 <tim2_pa5_pa1_output_compare+0x14c>)
 800056e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000572:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2U << 10);
 8000574:	4b4b      	ldr	r3, [pc, #300]	@ (80006a4 <tim2_pa5_pa1_output_compare+0x14c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a4a      	ldr	r2, [pc, #296]	@ (80006a4 <tim2_pa5_pa1_output_compare+0x14c>)
 800057a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800057e:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(0xF << 20);
 8000580:	4b48      	ldr	r3, [pc, #288]	@ (80006a4 <tim2_pa5_pa1_output_compare+0x14c>)
 8000582:	6a1b      	ldr	r3, [r3, #32]
 8000584:	4a47      	ldr	r2, [pc, #284]	@ (80006a4 <tim2_pa5_pa1_output_compare+0x14c>)
 8000586:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800058a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (1U << 20);
 800058c:	4b45      	ldr	r3, [pc, #276]	@ (80006a4 <tim2_pa5_pa1_output_compare+0x14c>)
 800058e:	6a1b      	ldr	r3, [r3, #32]
 8000590:	4a44      	ldr	r2, [pc, #272]	@ (80006a4 <tim2_pa5_pa1_output_compare+0x14c>)
 8000592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000596:	6213      	str	r3, [r2, #32]

    /* Configure PA1 (TIM2_CH2) to AF1 */
    GPIOA->MODER &= ~(3U << 2);
 8000598:	4b42      	ldr	r3, [pc, #264]	@ (80006a4 <tim2_pa5_pa1_output_compare+0x14c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a41      	ldr	r2, [pc, #260]	@ (80006a4 <tim2_pa5_pa1_output_compare+0x14c>)
 800059e:	f023 030c 	bic.w	r3, r3, #12
 80005a2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2U << 2);
 80005a4:	4b3f      	ldr	r3, [pc, #252]	@ (80006a4 <tim2_pa5_pa1_output_compare+0x14c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a3e      	ldr	r2, [pc, #248]	@ (80006a4 <tim2_pa5_pa1_output_compare+0x14c>)
 80005aa:	f043 0308 	orr.w	r3, r3, #8
 80005ae:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(0xF << 4);
 80005b0:	4b3c      	ldr	r3, [pc, #240]	@ (80006a4 <tim2_pa5_pa1_output_compare+0x14c>)
 80005b2:	6a1b      	ldr	r3, [r3, #32]
 80005b4:	4a3b      	ldr	r2, [pc, #236]	@ (80006a4 <tim2_pa5_pa1_output_compare+0x14c>)
 80005b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80005ba:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (1U << 4);
 80005bc:	4b39      	ldr	r3, [pc, #228]	@ (80006a4 <tim2_pa5_pa1_output_compare+0x14c>)
 80005be:	6a1b      	ldr	r3, [r3, #32]
 80005c0:	4a38      	ldr	r2, [pc, #224]	@ (80006a4 <tim2_pa5_pa1_output_compare+0x14c>)
 80005c2:	f043 0310 	orr.w	r3, r3, #16
 80005c6:	6213      	str	r3, [r2, #32]

    /* Enable TIM2 clock */
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80005c8:	4b35      	ldr	r3, [pc, #212]	@ (80006a0 <tim2_pa5_pa1_output_compare+0x148>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	4a34      	ldr	r2, [pc, #208]	@ (80006a0 <tim2_pa5_pa1_output_compare+0x148>)
 80005ce:	f043 0301 	orr.w	r3, r3, #1
 80005d2:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Set prescaler */
    TIM2->PSC = 1600 - 1;
 80005d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005d8:	f240 623f 	movw	r2, #1599	@ 0x63f
 80005dc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set auto-reload value */
    TIM2->ARR = 10000 - 1;
 80005de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005e2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80005e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set toggle mode for CH1 (OC1M = 011) */
    TIM2->CCMR1 &= ~(0xFF);
 80005e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80005f6:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= (0x3 << 4);  // OC1M = toggle
 80005f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000602:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000606:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 &= ~(1 << 3);   // OC1PE = 0 (no preload)
 8000608:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000612:	f023 0308 	bic.w	r3, r3, #8
 8000616:	6193      	str	r3, [r2, #24]

    /* Set toggle mode for CH2 (OC2M = 011) */
    TIM2->CCMR1 &= ~(0xFF00);
 8000618:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000622:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000626:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= (0x3 << 12); // OC2M = toggle
 8000628:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000632:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000636:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 &= ~(1 << 11);  // OC2PE = 0
 8000638:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000642:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000646:	6193      	str	r3, [r2, #24]

    /* Enable output for CH1 and CH2 */
    TIM2->CCER |= (1 << 0);  // CC1E
 8000648:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800064c:	6a1b      	ldr	r3, [r3, #32]
 800064e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000652:	f043 0301 	orr.w	r3, r3, #1
 8000656:	6213      	str	r3, [r2, #32]
    TIM2->CCER |= (1 << 4);  // CC2E
 8000658:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800065c:	6a1b      	ldr	r3, [r3, #32]
 800065e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000662:	f043 0310 	orr.w	r3, r3, #16
 8000666:	6213      	str	r3, [r2, #32]

    /* Set different compare values for toggle rates */
    TIM2->CCR1 = 7500;  // Toggle on count = 2500 (faster)
 8000668:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800066c:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8000670:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = 2500;  // Toggle on count = 7500 (slower)
 8000672:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000676:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800067a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Clear counter */
    TIM2->CNT = 0;
 800067c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000680:	2200      	movs	r2, #0
 8000682:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enable timer */
    TIM2->CR1 |= 1;
 8000684:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020000 	.word	0x40020000

080006a8 <__io_putchar>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);

int __io_putchar(int ch)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 f875 	bl	80007a0 <uart2_write>
	return ch;
 80006b6:	687b      	ldr	r3, [r7, #4]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <uart2_rxtx_init>:


void uart2_rxtx_init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	/******Configure UART gpio pins******/
	RCC->AHB1ENR |= GPIOAEN;
 80006c4:	4b32      	ldr	r3, [pc, #200]	@ (8000790 <uart2_rxtx_init+0xd0>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c8:	4a31      	ldr	r2, [pc, #196]	@ (8000790 <uart2_rxtx_init+0xd0>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER |= (1U<<5);
 80006d0:	4b30      	ldr	r3, [pc, #192]	@ (8000794 <uart2_rxtx_init+0xd4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000794 <uart2_rxtx_init+0xd4>)
 80006d6:	f043 0320 	orr.w	r3, r3, #32
 80006da:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<4);
 80006dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000794 <uart2_rxtx_init+0xd4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a2c      	ldr	r2, [pc, #176]	@ (8000794 <uart2_rxtx_init+0xd4>)
 80006e2:	f023 0310 	bic.w	r3, r3, #16
 80006e6:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &=~(1U<<11);
 80006e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000794 <uart2_rxtx_init+0xd4>)
 80006ea:	6a1b      	ldr	r3, [r3, #32]
 80006ec:	4a29      	ldr	r2, [pc, #164]	@ (8000794 <uart2_rxtx_init+0xd4>)
 80006ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80006f2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80006f4:	4b27      	ldr	r3, [pc, #156]	@ (8000794 <uart2_rxtx_init+0xd4>)
 80006f6:	6a1b      	ldr	r3, [r3, #32]
 80006f8:	4a26      	ldr	r2, [pc, #152]	@ (8000794 <uart2_rxtx_init+0xd4>)
 80006fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006fe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000700:	4b24      	ldr	r3, [pc, #144]	@ (8000794 <uart2_rxtx_init+0xd4>)
 8000702:	6a1b      	ldr	r3, [r3, #32]
 8000704:	4a23      	ldr	r2, [pc, #140]	@ (8000794 <uart2_rxtx_init+0xd4>)
 8000706:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800070a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<8);
 800070c:	4b21      	ldr	r3, [pc, #132]	@ (8000794 <uart2_rxtx_init+0xd4>)
 800070e:	6a1b      	ldr	r3, [r3, #32]
 8000710:	4a20      	ldr	r2, [pc, #128]	@ (8000794 <uart2_rxtx_init+0xd4>)
 8000712:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000716:	6213      	str	r3, [r2, #32]

	GPIOA->MODER |= (1U<<7);
 8000718:	4b1e      	ldr	r3, [pc, #120]	@ (8000794 <uart2_rxtx_init+0xd4>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a1d      	ldr	r2, [pc, #116]	@ (8000794 <uart2_rxtx_init+0xd4>)
 800071e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000722:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<6);
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <uart2_rxtx_init+0xd4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a1a      	ldr	r2, [pc, #104]	@ (8000794 <uart2_rxtx_init+0xd4>)
 800072a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800072e:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &=~(1U<<15);
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <uart2_rxtx_init+0xd4>)
 8000732:	6a1b      	ldr	r3, [r3, #32]
 8000734:	4a17      	ldr	r2, [pc, #92]	@ (8000794 <uart2_rxtx_init+0xd4>)
 8000736:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800073a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <uart2_rxtx_init+0xd4>)
 800073e:	6a1b      	ldr	r3, [r3, #32]
 8000740:	4a14      	ldr	r2, [pc, #80]	@ (8000794 <uart2_rxtx_init+0xd4>)
 8000742:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000746:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <uart2_rxtx_init+0xd4>)
 800074a:	6a1b      	ldr	r3, [r3, #32]
 800074c:	4a11      	ldr	r2, [pc, #68]	@ (8000794 <uart2_rxtx_init+0xd4>)
 800074e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000752:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<12);
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <uart2_rxtx_init+0xd4>)
 8000756:	6a1b      	ldr	r3, [r3, #32]
 8000758:	4a0e      	ldr	r2, [pc, #56]	@ (8000794 <uart2_rxtx_init+0xd4>)
 800075a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800075e:	6213      	str	r3, [r2, #32]

	/******Configure UART module******/
	/*Enable clock access to uart2*/
	RCC->APB1ENR |= UART2EN;
 8000760:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <uart2_rxtx_init+0xd0>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	4a0a      	ldr	r2, [pc, #40]	@ (8000790 <uart2_rxtx_init+0xd0>)
 8000766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800076a:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 800076c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000770:	4909      	ldr	r1, [pc, #36]	@ (8000798 <uart2_rxtx_init+0xd8>)
 8000772:	480a      	ldr	r0, [pc, #40]	@ (800079c <uart2_rxtx_init+0xdc>)
 8000774:	f000 f82c 	bl	80007d0 <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <uart2_rxtx_init+0xdc>)
 800077a:	220c      	movs	r2, #12
 800077c:	60da      	str	r2, [r3, #12]

	/*Enable UART module*/
	USART2->CR1 |= CR1_UE;
 800077e:	4b07      	ldr	r3, [pc, #28]	@ (800079c <uart2_rxtx_init+0xdc>)
 8000780:	68db      	ldr	r3, [r3, #12]
 8000782:	4a06      	ldr	r2, [pc, #24]	@ (800079c <uart2_rxtx_init+0xdc>)
 8000784:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000788:	60d3      	str	r3, [r2, #12]
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40020000 	.word	0x40020000
 8000798:	00f42400 	.word	0x00f42400
 800079c:	40004400 	.word	0x40004400

080007a0 <uart2_write>:
	/*Read the data register*/
	return USART2->DR;
}

void uart2_write(int ch)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE));
 80007a8:	bf00      	nop
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <uart2_write+0x2c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d0f9      	beq.n	80007aa <uart2_write+0xa>
	/*Write to the transmit data register*/
	USART2->DR = (ch & 0xFF);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a04      	ldr	r2, [pc, #16]	@ (80007cc <uart2_write+0x2c>)
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	6053      	str	r3, [r2, #4]
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40004400 	.word	0x40004400

080007d0 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 80007dc:	6879      	ldr	r1, [r7, #4]
 80007de:	68b8      	ldr	r0, [r7, #8]
 80007e0:	f000 f808 	bl	80007f4 <compute_uart_bd>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	609a      	str	r2, [r3, #8]
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	085a      	lsrs	r2, r3, #1
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	441a      	add	r2, r3
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	fbb2 f3f3 	udiv	r3, r2, r3
 800080c:	b29b      	uxth	r3, r3
}
 800080e:	4618      	mov	r0, r3
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800081c:	480d      	ldr	r0, [pc, #52]	@ (8000854 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800081e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000820:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000824:	480c      	ldr	r0, [pc, #48]	@ (8000858 <LoopForever+0x6>)
  ldr r1, =_edata
 8000826:	490d      	ldr	r1, [pc, #52]	@ (800085c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000828:	4a0d      	ldr	r2, [pc, #52]	@ (8000860 <LoopForever+0xe>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800082c:	e002      	b.n	8000834 <LoopCopyDataInit>

0800082e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000832:	3304      	adds	r3, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000838:	d3f9      	bcc.n	800082e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083a:	4a0a      	ldr	r2, [pc, #40]	@ (8000864 <LoopForever+0x12>)
  ldr r4, =_ebss
 800083c:	4c0a      	ldr	r4, [pc, #40]	@ (8000868 <LoopForever+0x16>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000840:	e001      	b.n	8000846 <LoopFillZerobss>

08000842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000844:	3204      	adds	r2, #4

08000846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000848:	d3fb      	bcc.n	8000842 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800084a:	f000 f97d 	bl	8000b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800084e:	f7ff fd17 	bl	8000280 <main>

08000852 <LoopForever>:

LoopForever:
  b LoopForever
 8000852:	e7fe      	b.n	8000852 <LoopForever>
  ldr   r0, =_estack
 8000854:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800085c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000860:	08001748 	.word	0x08001748
  ldr r2, =_sbss
 8000864:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000868:	200001d0 	.word	0x200001d0

0800086c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800086c:	e7fe      	b.n	800086c <ADC_IRQHandler>
	...

08000870 <std>:
 8000870:	2300      	movs	r3, #0
 8000872:	b510      	push	{r4, lr}
 8000874:	4604      	mov	r4, r0
 8000876:	e9c0 3300 	strd	r3, r3, [r0]
 800087a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800087e:	6083      	str	r3, [r0, #8]
 8000880:	8181      	strh	r1, [r0, #12]
 8000882:	6643      	str	r3, [r0, #100]	@ 0x64
 8000884:	81c2      	strh	r2, [r0, #14]
 8000886:	6183      	str	r3, [r0, #24]
 8000888:	4619      	mov	r1, r3
 800088a:	2208      	movs	r2, #8
 800088c:	305c      	adds	r0, #92	@ 0x5c
 800088e:	f000 f906 	bl	8000a9e <memset>
 8000892:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <std+0x58>)
 8000894:	6263      	str	r3, [r4, #36]	@ 0x24
 8000896:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <std+0x5c>)
 8000898:	62a3      	str	r3, [r4, #40]	@ 0x28
 800089a:	4b0d      	ldr	r3, [pc, #52]	@ (80008d0 <std+0x60>)
 800089c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800089e:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <std+0x64>)
 80008a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80008a2:	4b0d      	ldr	r3, [pc, #52]	@ (80008d8 <std+0x68>)
 80008a4:	6224      	str	r4, [r4, #32]
 80008a6:	429c      	cmp	r4, r3
 80008a8:	d006      	beq.n	80008b8 <std+0x48>
 80008aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80008ae:	4294      	cmp	r4, r2
 80008b0:	d002      	beq.n	80008b8 <std+0x48>
 80008b2:	33d0      	adds	r3, #208	@ 0xd0
 80008b4:	429c      	cmp	r4, r3
 80008b6:	d105      	bne.n	80008c4 <std+0x54>
 80008b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80008bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008c0:	f000 b966 	b.w	8000b90 <__retarget_lock_init_recursive>
 80008c4:	bd10      	pop	{r4, pc}
 80008c6:	bf00      	nop
 80008c8:	08000a19 	.word	0x08000a19
 80008cc:	08000a3b 	.word	0x08000a3b
 80008d0:	08000a73 	.word	0x08000a73
 80008d4:	08000a97 	.word	0x08000a97
 80008d8:	20000084 	.word	0x20000084

080008dc <stdio_exit_handler>:
 80008dc:	4a02      	ldr	r2, [pc, #8]	@ (80008e8 <stdio_exit_handler+0xc>)
 80008de:	4903      	ldr	r1, [pc, #12]	@ (80008ec <stdio_exit_handler+0x10>)
 80008e0:	4803      	ldr	r0, [pc, #12]	@ (80008f0 <stdio_exit_handler+0x14>)
 80008e2:	f000 b869 	b.w	80009b8 <_fwalk_sglue>
 80008e6:	bf00      	nop
 80008e8:	20000000 	.word	0x20000000
 80008ec:	0800142d 	.word	0x0800142d
 80008f0:	20000010 	.word	0x20000010

080008f4 <cleanup_stdio>:
 80008f4:	6841      	ldr	r1, [r0, #4]
 80008f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <cleanup_stdio+0x34>)
 80008f8:	4299      	cmp	r1, r3
 80008fa:	b510      	push	{r4, lr}
 80008fc:	4604      	mov	r4, r0
 80008fe:	d001      	beq.n	8000904 <cleanup_stdio+0x10>
 8000900:	f000 fd94 	bl	800142c <_fflush_r>
 8000904:	68a1      	ldr	r1, [r4, #8]
 8000906:	4b09      	ldr	r3, [pc, #36]	@ (800092c <cleanup_stdio+0x38>)
 8000908:	4299      	cmp	r1, r3
 800090a:	d002      	beq.n	8000912 <cleanup_stdio+0x1e>
 800090c:	4620      	mov	r0, r4
 800090e:	f000 fd8d 	bl	800142c <_fflush_r>
 8000912:	68e1      	ldr	r1, [r4, #12]
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <cleanup_stdio+0x3c>)
 8000916:	4299      	cmp	r1, r3
 8000918:	d004      	beq.n	8000924 <cleanup_stdio+0x30>
 800091a:	4620      	mov	r0, r4
 800091c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000920:	f000 bd84 	b.w	800142c <_fflush_r>
 8000924:	bd10      	pop	{r4, pc}
 8000926:	bf00      	nop
 8000928:	20000084 	.word	0x20000084
 800092c:	200000ec 	.word	0x200000ec
 8000930:	20000154 	.word	0x20000154

08000934 <global_stdio_init.part.0>:
 8000934:	b510      	push	{r4, lr}
 8000936:	4b0b      	ldr	r3, [pc, #44]	@ (8000964 <global_stdio_init.part.0+0x30>)
 8000938:	4c0b      	ldr	r4, [pc, #44]	@ (8000968 <global_stdio_init.part.0+0x34>)
 800093a:	4a0c      	ldr	r2, [pc, #48]	@ (800096c <global_stdio_init.part.0+0x38>)
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	4620      	mov	r0, r4
 8000940:	2200      	movs	r2, #0
 8000942:	2104      	movs	r1, #4
 8000944:	f7ff ff94 	bl	8000870 <std>
 8000948:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800094c:	2201      	movs	r2, #1
 800094e:	2109      	movs	r1, #9
 8000950:	f7ff ff8e 	bl	8000870 <std>
 8000954:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000958:	2202      	movs	r2, #2
 800095a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800095e:	2112      	movs	r1, #18
 8000960:	f7ff bf86 	b.w	8000870 <std>
 8000964:	200001bc 	.word	0x200001bc
 8000968:	20000084 	.word	0x20000084
 800096c:	080008dd 	.word	0x080008dd

08000970 <__sfp_lock_acquire>:
 8000970:	4801      	ldr	r0, [pc, #4]	@ (8000978 <__sfp_lock_acquire+0x8>)
 8000972:	f000 b90e 	b.w	8000b92 <__retarget_lock_acquire_recursive>
 8000976:	bf00      	nop
 8000978:	200001c5 	.word	0x200001c5

0800097c <__sfp_lock_release>:
 800097c:	4801      	ldr	r0, [pc, #4]	@ (8000984 <__sfp_lock_release+0x8>)
 800097e:	f000 b909 	b.w	8000b94 <__retarget_lock_release_recursive>
 8000982:	bf00      	nop
 8000984:	200001c5 	.word	0x200001c5

08000988 <__sinit>:
 8000988:	b510      	push	{r4, lr}
 800098a:	4604      	mov	r4, r0
 800098c:	f7ff fff0 	bl	8000970 <__sfp_lock_acquire>
 8000990:	6a23      	ldr	r3, [r4, #32]
 8000992:	b11b      	cbz	r3, 800099c <__sinit+0x14>
 8000994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000998:	f7ff bff0 	b.w	800097c <__sfp_lock_release>
 800099c:	4b04      	ldr	r3, [pc, #16]	@ (80009b0 <__sinit+0x28>)
 800099e:	6223      	str	r3, [r4, #32]
 80009a0:	4b04      	ldr	r3, [pc, #16]	@ (80009b4 <__sinit+0x2c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d1f5      	bne.n	8000994 <__sinit+0xc>
 80009a8:	f7ff ffc4 	bl	8000934 <global_stdio_init.part.0>
 80009ac:	e7f2      	b.n	8000994 <__sinit+0xc>
 80009ae:	bf00      	nop
 80009b0:	080008f5 	.word	0x080008f5
 80009b4:	200001bc 	.word	0x200001bc

080009b8 <_fwalk_sglue>:
 80009b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009bc:	4607      	mov	r7, r0
 80009be:	4688      	mov	r8, r1
 80009c0:	4614      	mov	r4, r2
 80009c2:	2600      	movs	r6, #0
 80009c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80009c8:	f1b9 0901 	subs.w	r9, r9, #1
 80009cc:	d505      	bpl.n	80009da <_fwalk_sglue+0x22>
 80009ce:	6824      	ldr	r4, [r4, #0]
 80009d0:	2c00      	cmp	r4, #0
 80009d2:	d1f7      	bne.n	80009c4 <_fwalk_sglue+0xc>
 80009d4:	4630      	mov	r0, r6
 80009d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009da:	89ab      	ldrh	r3, [r5, #12]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d907      	bls.n	80009f0 <_fwalk_sglue+0x38>
 80009e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80009e4:	3301      	adds	r3, #1
 80009e6:	d003      	beq.n	80009f0 <_fwalk_sglue+0x38>
 80009e8:	4629      	mov	r1, r5
 80009ea:	4638      	mov	r0, r7
 80009ec:	47c0      	blx	r8
 80009ee:	4306      	orrs	r6, r0
 80009f0:	3568      	adds	r5, #104	@ 0x68
 80009f2:	e7e9      	b.n	80009c8 <_fwalk_sglue+0x10>

080009f4 <iprintf>:
 80009f4:	b40f      	push	{r0, r1, r2, r3}
 80009f6:	b507      	push	{r0, r1, r2, lr}
 80009f8:	4906      	ldr	r1, [pc, #24]	@ (8000a14 <iprintf+0x20>)
 80009fa:	ab04      	add	r3, sp, #16
 80009fc:	6808      	ldr	r0, [r1, #0]
 80009fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a02:	6881      	ldr	r1, [r0, #8]
 8000a04:	9301      	str	r3, [sp, #4]
 8000a06:	f000 f9e9 	bl	8000ddc <_vfiprintf_r>
 8000a0a:	b003      	add	sp, #12
 8000a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a10:	b004      	add	sp, #16
 8000a12:	4770      	bx	lr
 8000a14:	2000000c 	.word	0x2000000c

08000a18 <__sread>:
 8000a18:	b510      	push	{r4, lr}
 8000a1a:	460c      	mov	r4, r1
 8000a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a20:	f000 f868 	bl	8000af4 <_read_r>
 8000a24:	2800      	cmp	r0, #0
 8000a26:	bfab      	itete	ge
 8000a28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000a2a:	89a3      	ldrhlt	r3, [r4, #12]
 8000a2c:	181b      	addge	r3, r3, r0
 8000a2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000a32:	bfac      	ite	ge
 8000a34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000a36:	81a3      	strhlt	r3, [r4, #12]
 8000a38:	bd10      	pop	{r4, pc}

08000a3a <__swrite>:
 8000a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a3e:	461f      	mov	r7, r3
 8000a40:	898b      	ldrh	r3, [r1, #12]
 8000a42:	05db      	lsls	r3, r3, #23
 8000a44:	4605      	mov	r5, r0
 8000a46:	460c      	mov	r4, r1
 8000a48:	4616      	mov	r6, r2
 8000a4a:	d505      	bpl.n	8000a58 <__swrite+0x1e>
 8000a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a50:	2302      	movs	r3, #2
 8000a52:	2200      	movs	r2, #0
 8000a54:	f000 f83c 	bl	8000ad0 <_lseek_r>
 8000a58:	89a3      	ldrh	r3, [r4, #12]
 8000a5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a62:	81a3      	strh	r3, [r4, #12]
 8000a64:	4632      	mov	r2, r6
 8000a66:	463b      	mov	r3, r7
 8000a68:	4628      	mov	r0, r5
 8000a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000a6e:	f000 b853 	b.w	8000b18 <_write_r>

08000a72 <__sseek>:
 8000a72:	b510      	push	{r4, lr}
 8000a74:	460c      	mov	r4, r1
 8000a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a7a:	f000 f829 	bl	8000ad0 <_lseek_r>
 8000a7e:	1c43      	adds	r3, r0, #1
 8000a80:	89a3      	ldrh	r3, [r4, #12]
 8000a82:	bf15      	itete	ne
 8000a84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000a86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000a8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000a8e:	81a3      	strheq	r3, [r4, #12]
 8000a90:	bf18      	it	ne
 8000a92:	81a3      	strhne	r3, [r4, #12]
 8000a94:	bd10      	pop	{r4, pc}

08000a96 <__sclose>:
 8000a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a9a:	f000 b809 	b.w	8000ab0 <_close_r>

08000a9e <memset>:
 8000a9e:	4402      	add	r2, r0
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d100      	bne.n	8000aa8 <memset+0xa>
 8000aa6:	4770      	bx	lr
 8000aa8:	f803 1b01 	strb.w	r1, [r3], #1
 8000aac:	e7f9      	b.n	8000aa2 <memset+0x4>
	...

08000ab0 <_close_r>:
 8000ab0:	b538      	push	{r3, r4, r5, lr}
 8000ab2:	4d06      	ldr	r5, [pc, #24]	@ (8000acc <_close_r+0x1c>)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	4608      	mov	r0, r1
 8000aba:	602b      	str	r3, [r5, #0]
 8000abc:	f7ff fc51 	bl	8000362 <_close>
 8000ac0:	1c43      	adds	r3, r0, #1
 8000ac2:	d102      	bne.n	8000aca <_close_r+0x1a>
 8000ac4:	682b      	ldr	r3, [r5, #0]
 8000ac6:	b103      	cbz	r3, 8000aca <_close_r+0x1a>
 8000ac8:	6023      	str	r3, [r4, #0]
 8000aca:	bd38      	pop	{r3, r4, r5, pc}
 8000acc:	200001c0 	.word	0x200001c0

08000ad0 <_lseek_r>:
 8000ad0:	b538      	push	{r3, r4, r5, lr}
 8000ad2:	4d07      	ldr	r5, [pc, #28]	@ (8000af0 <_lseek_r+0x20>)
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	4611      	mov	r1, r2
 8000ada:	2200      	movs	r2, #0
 8000adc:	602a      	str	r2, [r5, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	f7ff fc66 	bl	80003b0 <_lseek>
 8000ae4:	1c43      	adds	r3, r0, #1
 8000ae6:	d102      	bne.n	8000aee <_lseek_r+0x1e>
 8000ae8:	682b      	ldr	r3, [r5, #0]
 8000aea:	b103      	cbz	r3, 8000aee <_lseek_r+0x1e>
 8000aec:	6023      	str	r3, [r4, #0]
 8000aee:	bd38      	pop	{r3, r4, r5, pc}
 8000af0:	200001c0 	.word	0x200001c0

08000af4 <_read_r>:
 8000af4:	b538      	push	{r3, r4, r5, lr}
 8000af6:	4d07      	ldr	r5, [pc, #28]	@ (8000b14 <_read_r+0x20>)
 8000af8:	4604      	mov	r4, r0
 8000afa:	4608      	mov	r0, r1
 8000afc:	4611      	mov	r1, r2
 8000afe:	2200      	movs	r2, #0
 8000b00:	602a      	str	r2, [r5, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	f7ff fbf4 	bl	80002f0 <_read>
 8000b08:	1c43      	adds	r3, r0, #1
 8000b0a:	d102      	bne.n	8000b12 <_read_r+0x1e>
 8000b0c:	682b      	ldr	r3, [r5, #0]
 8000b0e:	b103      	cbz	r3, 8000b12 <_read_r+0x1e>
 8000b10:	6023      	str	r3, [r4, #0]
 8000b12:	bd38      	pop	{r3, r4, r5, pc}
 8000b14:	200001c0 	.word	0x200001c0

08000b18 <_write_r>:
 8000b18:	b538      	push	{r3, r4, r5, lr}
 8000b1a:	4d07      	ldr	r5, [pc, #28]	@ (8000b38 <_write_r+0x20>)
 8000b1c:	4604      	mov	r4, r0
 8000b1e:	4608      	mov	r0, r1
 8000b20:	4611      	mov	r1, r2
 8000b22:	2200      	movs	r2, #0
 8000b24:	602a      	str	r2, [r5, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	f7ff fbff 	bl	800032a <_write>
 8000b2c:	1c43      	adds	r3, r0, #1
 8000b2e:	d102      	bne.n	8000b36 <_write_r+0x1e>
 8000b30:	682b      	ldr	r3, [r5, #0]
 8000b32:	b103      	cbz	r3, 8000b36 <_write_r+0x1e>
 8000b34:	6023      	str	r3, [r4, #0]
 8000b36:	bd38      	pop	{r3, r4, r5, pc}
 8000b38:	200001c0 	.word	0x200001c0

08000b3c <__errno>:
 8000b3c:	4b01      	ldr	r3, [pc, #4]	@ (8000b44 <__errno+0x8>)
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	2000000c 	.word	0x2000000c

08000b48 <__libc_init_array>:
 8000b48:	b570      	push	{r4, r5, r6, lr}
 8000b4a:	4d0d      	ldr	r5, [pc, #52]	@ (8000b80 <__libc_init_array+0x38>)
 8000b4c:	4c0d      	ldr	r4, [pc, #52]	@ (8000b84 <__libc_init_array+0x3c>)
 8000b4e:	1b64      	subs	r4, r4, r5
 8000b50:	10a4      	asrs	r4, r4, #2
 8000b52:	2600      	movs	r6, #0
 8000b54:	42a6      	cmp	r6, r4
 8000b56:	d109      	bne.n	8000b6c <__libc_init_array+0x24>
 8000b58:	4d0b      	ldr	r5, [pc, #44]	@ (8000b88 <__libc_init_array+0x40>)
 8000b5a:	4c0c      	ldr	r4, [pc, #48]	@ (8000b8c <__libc_init_array+0x44>)
 8000b5c:	f000 fdb6 	bl	80016cc <_init>
 8000b60:	1b64      	subs	r4, r4, r5
 8000b62:	10a4      	asrs	r4, r4, #2
 8000b64:	2600      	movs	r6, #0
 8000b66:	42a6      	cmp	r6, r4
 8000b68:	d105      	bne.n	8000b76 <__libc_init_array+0x2e>
 8000b6a:	bd70      	pop	{r4, r5, r6, pc}
 8000b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b70:	4798      	blx	r3
 8000b72:	3601      	adds	r6, #1
 8000b74:	e7ee      	b.n	8000b54 <__libc_init_array+0xc>
 8000b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b7a:	4798      	blx	r3
 8000b7c:	3601      	adds	r6, #1
 8000b7e:	e7f2      	b.n	8000b66 <__libc_init_array+0x1e>
 8000b80:	08001740 	.word	0x08001740
 8000b84:	08001740 	.word	0x08001740
 8000b88:	08001740 	.word	0x08001740
 8000b8c:	08001744 	.word	0x08001744

08000b90 <__retarget_lock_init_recursive>:
 8000b90:	4770      	bx	lr

08000b92 <__retarget_lock_acquire_recursive>:
 8000b92:	4770      	bx	lr

08000b94 <__retarget_lock_release_recursive>:
 8000b94:	4770      	bx	lr
	...

08000b98 <_free_r>:
 8000b98:	b538      	push	{r3, r4, r5, lr}
 8000b9a:	4605      	mov	r5, r0
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d041      	beq.n	8000c24 <_free_r+0x8c>
 8000ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ba4:	1f0c      	subs	r4, r1, #4
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	bfb8      	it	lt
 8000baa:	18e4      	addlt	r4, r4, r3
 8000bac:	f000 f8e0 	bl	8000d70 <__malloc_lock>
 8000bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c28 <_free_r+0x90>)
 8000bb2:	6813      	ldr	r3, [r2, #0]
 8000bb4:	b933      	cbnz	r3, 8000bc4 <_free_r+0x2c>
 8000bb6:	6063      	str	r3, [r4, #4]
 8000bb8:	6014      	str	r4, [r2, #0]
 8000bba:	4628      	mov	r0, r5
 8000bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bc0:	f000 b8dc 	b.w	8000d7c <__malloc_unlock>
 8000bc4:	42a3      	cmp	r3, r4
 8000bc6:	d908      	bls.n	8000bda <_free_r+0x42>
 8000bc8:	6820      	ldr	r0, [r4, #0]
 8000bca:	1821      	adds	r1, r4, r0
 8000bcc:	428b      	cmp	r3, r1
 8000bce:	bf01      	itttt	eq
 8000bd0:	6819      	ldreq	r1, [r3, #0]
 8000bd2:	685b      	ldreq	r3, [r3, #4]
 8000bd4:	1809      	addeq	r1, r1, r0
 8000bd6:	6021      	streq	r1, [r4, #0]
 8000bd8:	e7ed      	b.n	8000bb6 <_free_r+0x1e>
 8000bda:	461a      	mov	r2, r3
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	b10b      	cbz	r3, 8000be4 <_free_r+0x4c>
 8000be0:	42a3      	cmp	r3, r4
 8000be2:	d9fa      	bls.n	8000bda <_free_r+0x42>
 8000be4:	6811      	ldr	r1, [r2, #0]
 8000be6:	1850      	adds	r0, r2, r1
 8000be8:	42a0      	cmp	r0, r4
 8000bea:	d10b      	bne.n	8000c04 <_free_r+0x6c>
 8000bec:	6820      	ldr	r0, [r4, #0]
 8000bee:	4401      	add	r1, r0
 8000bf0:	1850      	adds	r0, r2, r1
 8000bf2:	4283      	cmp	r3, r0
 8000bf4:	6011      	str	r1, [r2, #0]
 8000bf6:	d1e0      	bne.n	8000bba <_free_r+0x22>
 8000bf8:	6818      	ldr	r0, [r3, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	6053      	str	r3, [r2, #4]
 8000bfe:	4408      	add	r0, r1
 8000c00:	6010      	str	r0, [r2, #0]
 8000c02:	e7da      	b.n	8000bba <_free_r+0x22>
 8000c04:	d902      	bls.n	8000c0c <_free_r+0x74>
 8000c06:	230c      	movs	r3, #12
 8000c08:	602b      	str	r3, [r5, #0]
 8000c0a:	e7d6      	b.n	8000bba <_free_r+0x22>
 8000c0c:	6820      	ldr	r0, [r4, #0]
 8000c0e:	1821      	adds	r1, r4, r0
 8000c10:	428b      	cmp	r3, r1
 8000c12:	bf04      	itt	eq
 8000c14:	6819      	ldreq	r1, [r3, #0]
 8000c16:	685b      	ldreq	r3, [r3, #4]
 8000c18:	6063      	str	r3, [r4, #4]
 8000c1a:	bf04      	itt	eq
 8000c1c:	1809      	addeq	r1, r1, r0
 8000c1e:	6021      	streq	r1, [r4, #0]
 8000c20:	6054      	str	r4, [r2, #4]
 8000c22:	e7ca      	b.n	8000bba <_free_r+0x22>
 8000c24:	bd38      	pop	{r3, r4, r5, pc}
 8000c26:	bf00      	nop
 8000c28:	200001cc 	.word	0x200001cc

08000c2c <sbrk_aligned>:
 8000c2c:	b570      	push	{r4, r5, r6, lr}
 8000c2e:	4e0f      	ldr	r6, [pc, #60]	@ (8000c6c <sbrk_aligned+0x40>)
 8000c30:	460c      	mov	r4, r1
 8000c32:	6831      	ldr	r1, [r6, #0]
 8000c34:	4605      	mov	r5, r0
 8000c36:	b911      	cbnz	r1, 8000c3e <sbrk_aligned+0x12>
 8000c38:	f000 fcb4 	bl	80015a4 <_sbrk_r>
 8000c3c:	6030      	str	r0, [r6, #0]
 8000c3e:	4621      	mov	r1, r4
 8000c40:	4628      	mov	r0, r5
 8000c42:	f000 fcaf 	bl	80015a4 <_sbrk_r>
 8000c46:	1c43      	adds	r3, r0, #1
 8000c48:	d103      	bne.n	8000c52 <sbrk_aligned+0x26>
 8000c4a:	f04f 34ff 	mov.w	r4, #4294967295
 8000c4e:	4620      	mov	r0, r4
 8000c50:	bd70      	pop	{r4, r5, r6, pc}
 8000c52:	1cc4      	adds	r4, r0, #3
 8000c54:	f024 0403 	bic.w	r4, r4, #3
 8000c58:	42a0      	cmp	r0, r4
 8000c5a:	d0f8      	beq.n	8000c4e <sbrk_aligned+0x22>
 8000c5c:	1a21      	subs	r1, r4, r0
 8000c5e:	4628      	mov	r0, r5
 8000c60:	f000 fca0 	bl	80015a4 <_sbrk_r>
 8000c64:	3001      	adds	r0, #1
 8000c66:	d1f2      	bne.n	8000c4e <sbrk_aligned+0x22>
 8000c68:	e7ef      	b.n	8000c4a <sbrk_aligned+0x1e>
 8000c6a:	bf00      	nop
 8000c6c:	200001c8 	.word	0x200001c8

08000c70 <_malloc_r>:
 8000c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c74:	1ccd      	adds	r5, r1, #3
 8000c76:	f025 0503 	bic.w	r5, r5, #3
 8000c7a:	3508      	adds	r5, #8
 8000c7c:	2d0c      	cmp	r5, #12
 8000c7e:	bf38      	it	cc
 8000c80:	250c      	movcc	r5, #12
 8000c82:	2d00      	cmp	r5, #0
 8000c84:	4606      	mov	r6, r0
 8000c86:	db01      	blt.n	8000c8c <_malloc_r+0x1c>
 8000c88:	42a9      	cmp	r1, r5
 8000c8a:	d904      	bls.n	8000c96 <_malloc_r+0x26>
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	6033      	str	r3, [r6, #0]
 8000c90:	2000      	movs	r0, #0
 8000c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d6c <_malloc_r+0xfc>
 8000c9a:	f000 f869 	bl	8000d70 <__malloc_lock>
 8000c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8000ca2:	461c      	mov	r4, r3
 8000ca4:	bb44      	cbnz	r4, 8000cf8 <_malloc_r+0x88>
 8000ca6:	4629      	mov	r1, r5
 8000ca8:	4630      	mov	r0, r6
 8000caa:	f7ff ffbf 	bl	8000c2c <sbrk_aligned>
 8000cae:	1c43      	adds	r3, r0, #1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	d158      	bne.n	8000d66 <_malloc_r+0xf6>
 8000cb4:	f8d8 4000 	ldr.w	r4, [r8]
 8000cb8:	4627      	mov	r7, r4
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d143      	bne.n	8000d46 <_malloc_r+0xd6>
 8000cbe:	2c00      	cmp	r4, #0
 8000cc0:	d04b      	beq.n	8000d5a <_malloc_r+0xea>
 8000cc2:	6823      	ldr	r3, [r4, #0]
 8000cc4:	4639      	mov	r1, r7
 8000cc6:	4630      	mov	r0, r6
 8000cc8:	eb04 0903 	add.w	r9, r4, r3
 8000ccc:	f000 fc6a 	bl	80015a4 <_sbrk_r>
 8000cd0:	4581      	cmp	r9, r0
 8000cd2:	d142      	bne.n	8000d5a <_malloc_r+0xea>
 8000cd4:	6821      	ldr	r1, [r4, #0]
 8000cd6:	1a6d      	subs	r5, r5, r1
 8000cd8:	4629      	mov	r1, r5
 8000cda:	4630      	mov	r0, r6
 8000cdc:	f7ff ffa6 	bl	8000c2c <sbrk_aligned>
 8000ce0:	3001      	adds	r0, #1
 8000ce2:	d03a      	beq.n	8000d5a <_malloc_r+0xea>
 8000ce4:	6823      	ldr	r3, [r4, #0]
 8000ce6:	442b      	add	r3, r5
 8000ce8:	6023      	str	r3, [r4, #0]
 8000cea:	f8d8 3000 	ldr.w	r3, [r8]
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	bb62      	cbnz	r2, 8000d4c <_malloc_r+0xdc>
 8000cf2:	f8c8 7000 	str.w	r7, [r8]
 8000cf6:	e00f      	b.n	8000d18 <_malloc_r+0xa8>
 8000cf8:	6822      	ldr	r2, [r4, #0]
 8000cfa:	1b52      	subs	r2, r2, r5
 8000cfc:	d420      	bmi.n	8000d40 <_malloc_r+0xd0>
 8000cfe:	2a0b      	cmp	r2, #11
 8000d00:	d917      	bls.n	8000d32 <_malloc_r+0xc2>
 8000d02:	1961      	adds	r1, r4, r5
 8000d04:	42a3      	cmp	r3, r4
 8000d06:	6025      	str	r5, [r4, #0]
 8000d08:	bf18      	it	ne
 8000d0a:	6059      	strne	r1, [r3, #4]
 8000d0c:	6863      	ldr	r3, [r4, #4]
 8000d0e:	bf08      	it	eq
 8000d10:	f8c8 1000 	streq.w	r1, [r8]
 8000d14:	5162      	str	r2, [r4, r5]
 8000d16:	604b      	str	r3, [r1, #4]
 8000d18:	4630      	mov	r0, r6
 8000d1a:	f000 f82f 	bl	8000d7c <__malloc_unlock>
 8000d1e:	f104 000b 	add.w	r0, r4, #11
 8000d22:	1d23      	adds	r3, r4, #4
 8000d24:	f020 0007 	bic.w	r0, r0, #7
 8000d28:	1ac2      	subs	r2, r0, r3
 8000d2a:	bf1c      	itt	ne
 8000d2c:	1a1b      	subne	r3, r3, r0
 8000d2e:	50a3      	strne	r3, [r4, r2]
 8000d30:	e7af      	b.n	8000c92 <_malloc_r+0x22>
 8000d32:	6862      	ldr	r2, [r4, #4]
 8000d34:	42a3      	cmp	r3, r4
 8000d36:	bf0c      	ite	eq
 8000d38:	f8c8 2000 	streq.w	r2, [r8]
 8000d3c:	605a      	strne	r2, [r3, #4]
 8000d3e:	e7eb      	b.n	8000d18 <_malloc_r+0xa8>
 8000d40:	4623      	mov	r3, r4
 8000d42:	6864      	ldr	r4, [r4, #4]
 8000d44:	e7ae      	b.n	8000ca4 <_malloc_r+0x34>
 8000d46:	463c      	mov	r4, r7
 8000d48:	687f      	ldr	r7, [r7, #4]
 8000d4a:	e7b6      	b.n	8000cba <_malloc_r+0x4a>
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	42a3      	cmp	r3, r4
 8000d52:	d1fb      	bne.n	8000d4c <_malloc_r+0xdc>
 8000d54:	2300      	movs	r3, #0
 8000d56:	6053      	str	r3, [r2, #4]
 8000d58:	e7de      	b.n	8000d18 <_malloc_r+0xa8>
 8000d5a:	230c      	movs	r3, #12
 8000d5c:	6033      	str	r3, [r6, #0]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	f000 f80c 	bl	8000d7c <__malloc_unlock>
 8000d64:	e794      	b.n	8000c90 <_malloc_r+0x20>
 8000d66:	6005      	str	r5, [r0, #0]
 8000d68:	e7d6      	b.n	8000d18 <_malloc_r+0xa8>
 8000d6a:	bf00      	nop
 8000d6c:	200001cc 	.word	0x200001cc

08000d70 <__malloc_lock>:
 8000d70:	4801      	ldr	r0, [pc, #4]	@ (8000d78 <__malloc_lock+0x8>)
 8000d72:	f7ff bf0e 	b.w	8000b92 <__retarget_lock_acquire_recursive>
 8000d76:	bf00      	nop
 8000d78:	200001c4 	.word	0x200001c4

08000d7c <__malloc_unlock>:
 8000d7c:	4801      	ldr	r0, [pc, #4]	@ (8000d84 <__malloc_unlock+0x8>)
 8000d7e:	f7ff bf09 	b.w	8000b94 <__retarget_lock_release_recursive>
 8000d82:	bf00      	nop
 8000d84:	200001c4 	.word	0x200001c4

08000d88 <__sfputc_r>:
 8000d88:	6893      	ldr	r3, [r2, #8]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	b410      	push	{r4}
 8000d90:	6093      	str	r3, [r2, #8]
 8000d92:	da08      	bge.n	8000da6 <__sfputc_r+0x1e>
 8000d94:	6994      	ldr	r4, [r2, #24]
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	db01      	blt.n	8000d9e <__sfputc_r+0x16>
 8000d9a:	290a      	cmp	r1, #10
 8000d9c:	d103      	bne.n	8000da6 <__sfputc_r+0x1e>
 8000d9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000da2:	f000 bb6b 	b.w	800147c <__swbuf_r>
 8000da6:	6813      	ldr	r3, [r2, #0]
 8000da8:	1c58      	adds	r0, r3, #1
 8000daa:	6010      	str	r0, [r2, #0]
 8000dac:	7019      	strb	r1, [r3, #0]
 8000dae:	4608      	mov	r0, r1
 8000db0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <__sfputs_r>:
 8000db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db8:	4606      	mov	r6, r0
 8000dba:	460f      	mov	r7, r1
 8000dbc:	4614      	mov	r4, r2
 8000dbe:	18d5      	adds	r5, r2, r3
 8000dc0:	42ac      	cmp	r4, r5
 8000dc2:	d101      	bne.n	8000dc8 <__sfputs_r+0x12>
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	e007      	b.n	8000dd8 <__sfputs_r+0x22>
 8000dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dcc:	463a      	mov	r2, r7
 8000dce:	4630      	mov	r0, r6
 8000dd0:	f7ff ffda 	bl	8000d88 <__sfputc_r>
 8000dd4:	1c43      	adds	r3, r0, #1
 8000dd6:	d1f3      	bne.n	8000dc0 <__sfputs_r+0xa>
 8000dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000ddc <_vfiprintf_r>:
 8000ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000de0:	460d      	mov	r5, r1
 8000de2:	b09d      	sub	sp, #116	@ 0x74
 8000de4:	4614      	mov	r4, r2
 8000de6:	4698      	mov	r8, r3
 8000de8:	4606      	mov	r6, r0
 8000dea:	b118      	cbz	r0, 8000df4 <_vfiprintf_r+0x18>
 8000dec:	6a03      	ldr	r3, [r0, #32]
 8000dee:	b90b      	cbnz	r3, 8000df4 <_vfiprintf_r+0x18>
 8000df0:	f7ff fdca 	bl	8000988 <__sinit>
 8000df4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000df6:	07d9      	lsls	r1, r3, #31
 8000df8:	d405      	bmi.n	8000e06 <_vfiprintf_r+0x2a>
 8000dfa:	89ab      	ldrh	r3, [r5, #12]
 8000dfc:	059a      	lsls	r2, r3, #22
 8000dfe:	d402      	bmi.n	8000e06 <_vfiprintf_r+0x2a>
 8000e00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e02:	f7ff fec6 	bl	8000b92 <__retarget_lock_acquire_recursive>
 8000e06:	89ab      	ldrh	r3, [r5, #12]
 8000e08:	071b      	lsls	r3, r3, #28
 8000e0a:	d501      	bpl.n	8000e10 <_vfiprintf_r+0x34>
 8000e0c:	692b      	ldr	r3, [r5, #16]
 8000e0e:	b99b      	cbnz	r3, 8000e38 <_vfiprintf_r+0x5c>
 8000e10:	4629      	mov	r1, r5
 8000e12:	4630      	mov	r0, r6
 8000e14:	f000 fb70 	bl	80014f8 <__swsetup_r>
 8000e18:	b170      	cbz	r0, 8000e38 <_vfiprintf_r+0x5c>
 8000e1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e1c:	07dc      	lsls	r4, r3, #31
 8000e1e:	d504      	bpl.n	8000e2a <_vfiprintf_r+0x4e>
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	b01d      	add	sp, #116	@ 0x74
 8000e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e2a:	89ab      	ldrh	r3, [r5, #12]
 8000e2c:	0598      	lsls	r0, r3, #22
 8000e2e:	d4f7      	bmi.n	8000e20 <_vfiprintf_r+0x44>
 8000e30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e32:	f7ff feaf 	bl	8000b94 <__retarget_lock_release_recursive>
 8000e36:	e7f3      	b.n	8000e20 <_vfiprintf_r+0x44>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e3c:	2320      	movs	r3, #32
 8000e3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000e42:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e46:	2330      	movs	r3, #48	@ 0x30
 8000e48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000ff8 <_vfiprintf_r+0x21c>
 8000e4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000e50:	f04f 0901 	mov.w	r9, #1
 8000e54:	4623      	mov	r3, r4
 8000e56:	469a      	mov	sl, r3
 8000e58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e5c:	b10a      	cbz	r2, 8000e62 <_vfiprintf_r+0x86>
 8000e5e:	2a25      	cmp	r2, #37	@ 0x25
 8000e60:	d1f9      	bne.n	8000e56 <_vfiprintf_r+0x7a>
 8000e62:	ebba 0b04 	subs.w	fp, sl, r4
 8000e66:	d00b      	beq.n	8000e80 <_vfiprintf_r+0xa4>
 8000e68:	465b      	mov	r3, fp
 8000e6a:	4622      	mov	r2, r4
 8000e6c:	4629      	mov	r1, r5
 8000e6e:	4630      	mov	r0, r6
 8000e70:	f7ff ffa1 	bl	8000db6 <__sfputs_r>
 8000e74:	3001      	adds	r0, #1
 8000e76:	f000 80a7 	beq.w	8000fc8 <_vfiprintf_r+0x1ec>
 8000e7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000e7c:	445a      	add	r2, fp
 8000e7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8000e80:	f89a 3000 	ldrb.w	r3, [sl]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 809f 	beq.w	8000fc8 <_vfiprintf_r+0x1ec>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e94:	f10a 0a01 	add.w	sl, sl, #1
 8000e98:	9304      	str	r3, [sp, #16]
 8000e9a:	9307      	str	r3, [sp, #28]
 8000e9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000ea0:	931a      	str	r3, [sp, #104]	@ 0x68
 8000ea2:	4654      	mov	r4, sl
 8000ea4:	2205      	movs	r2, #5
 8000ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000eaa:	4853      	ldr	r0, [pc, #332]	@ (8000ff8 <_vfiprintf_r+0x21c>)
 8000eac:	f7ff f998 	bl	80001e0 <memchr>
 8000eb0:	9a04      	ldr	r2, [sp, #16]
 8000eb2:	b9d8      	cbnz	r0, 8000eec <_vfiprintf_r+0x110>
 8000eb4:	06d1      	lsls	r1, r2, #27
 8000eb6:	bf44      	itt	mi
 8000eb8:	2320      	movmi	r3, #32
 8000eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ebe:	0713      	lsls	r3, r2, #28
 8000ec0:	bf44      	itt	mi
 8000ec2:	232b      	movmi	r3, #43	@ 0x2b
 8000ec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8000ecc:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ece:	d015      	beq.n	8000efc <_vfiprintf_r+0x120>
 8000ed0:	9a07      	ldr	r2, [sp, #28]
 8000ed2:	4654      	mov	r4, sl
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f04f 0c0a 	mov.w	ip, #10
 8000eda:	4621      	mov	r1, r4
 8000edc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ee0:	3b30      	subs	r3, #48	@ 0x30
 8000ee2:	2b09      	cmp	r3, #9
 8000ee4:	d94b      	bls.n	8000f7e <_vfiprintf_r+0x1a2>
 8000ee6:	b1b0      	cbz	r0, 8000f16 <_vfiprintf_r+0x13a>
 8000ee8:	9207      	str	r2, [sp, #28]
 8000eea:	e014      	b.n	8000f16 <_vfiprintf_r+0x13a>
 8000eec:	eba0 0308 	sub.w	r3, r0, r8
 8000ef0:	fa09 f303 	lsl.w	r3, r9, r3
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	9304      	str	r3, [sp, #16]
 8000ef8:	46a2      	mov	sl, r4
 8000efa:	e7d2      	b.n	8000ea2 <_vfiprintf_r+0xc6>
 8000efc:	9b03      	ldr	r3, [sp, #12]
 8000efe:	1d19      	adds	r1, r3, #4
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	9103      	str	r1, [sp, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	bfbb      	ittet	lt
 8000f08:	425b      	neglt	r3, r3
 8000f0a:	f042 0202 	orrlt.w	r2, r2, #2
 8000f0e:	9307      	strge	r3, [sp, #28]
 8000f10:	9307      	strlt	r3, [sp, #28]
 8000f12:	bfb8      	it	lt
 8000f14:	9204      	strlt	r2, [sp, #16]
 8000f16:	7823      	ldrb	r3, [r4, #0]
 8000f18:	2b2e      	cmp	r3, #46	@ 0x2e
 8000f1a:	d10a      	bne.n	8000f32 <_vfiprintf_r+0x156>
 8000f1c:	7863      	ldrb	r3, [r4, #1]
 8000f1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f20:	d132      	bne.n	8000f88 <_vfiprintf_r+0x1ac>
 8000f22:	9b03      	ldr	r3, [sp, #12]
 8000f24:	1d1a      	adds	r2, r3, #4
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	9203      	str	r2, [sp, #12]
 8000f2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000f2e:	3402      	adds	r4, #2
 8000f30:	9305      	str	r3, [sp, #20]
 8000f32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001008 <_vfiprintf_r+0x22c>
 8000f36:	7821      	ldrb	r1, [r4, #0]
 8000f38:	2203      	movs	r2, #3
 8000f3a:	4650      	mov	r0, sl
 8000f3c:	f7ff f950 	bl	80001e0 <memchr>
 8000f40:	b138      	cbz	r0, 8000f52 <_vfiprintf_r+0x176>
 8000f42:	9b04      	ldr	r3, [sp, #16]
 8000f44:	eba0 000a 	sub.w	r0, r0, sl
 8000f48:	2240      	movs	r2, #64	@ 0x40
 8000f4a:	4082      	lsls	r2, r0
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	3401      	adds	r4, #1
 8000f50:	9304      	str	r3, [sp, #16]
 8000f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f56:	4829      	ldr	r0, [pc, #164]	@ (8000ffc <_vfiprintf_r+0x220>)
 8000f58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000f5c:	2206      	movs	r2, #6
 8000f5e:	f7ff f93f 	bl	80001e0 <memchr>
 8000f62:	2800      	cmp	r0, #0
 8000f64:	d03f      	beq.n	8000fe6 <_vfiprintf_r+0x20a>
 8000f66:	4b26      	ldr	r3, [pc, #152]	@ (8001000 <_vfiprintf_r+0x224>)
 8000f68:	bb1b      	cbnz	r3, 8000fb2 <_vfiprintf_r+0x1d6>
 8000f6a:	9b03      	ldr	r3, [sp, #12]
 8000f6c:	3307      	adds	r3, #7
 8000f6e:	f023 0307 	bic.w	r3, r3, #7
 8000f72:	3308      	adds	r3, #8
 8000f74:	9303      	str	r3, [sp, #12]
 8000f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000f78:	443b      	add	r3, r7
 8000f7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f7c:	e76a      	b.n	8000e54 <_vfiprintf_r+0x78>
 8000f7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f82:	460c      	mov	r4, r1
 8000f84:	2001      	movs	r0, #1
 8000f86:	e7a8      	b.n	8000eda <_vfiprintf_r+0xfe>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	3401      	adds	r4, #1
 8000f8c:	9305      	str	r3, [sp, #20]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f04f 0c0a 	mov.w	ip, #10
 8000f94:	4620      	mov	r0, r4
 8000f96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f9a:	3a30      	subs	r2, #48	@ 0x30
 8000f9c:	2a09      	cmp	r2, #9
 8000f9e:	d903      	bls.n	8000fa8 <_vfiprintf_r+0x1cc>
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0c6      	beq.n	8000f32 <_vfiprintf_r+0x156>
 8000fa4:	9105      	str	r1, [sp, #20]
 8000fa6:	e7c4      	b.n	8000f32 <_vfiprintf_r+0x156>
 8000fa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8000fac:	4604      	mov	r4, r0
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e7f0      	b.n	8000f94 <_vfiprintf_r+0x1b8>
 8000fb2:	ab03      	add	r3, sp, #12
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	462a      	mov	r2, r5
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <_vfiprintf_r+0x228>)
 8000fba:	a904      	add	r1, sp, #16
 8000fbc:	4630      	mov	r0, r6
 8000fbe:	f3af 8000 	nop.w
 8000fc2:	4607      	mov	r7, r0
 8000fc4:	1c78      	adds	r0, r7, #1
 8000fc6:	d1d6      	bne.n	8000f76 <_vfiprintf_r+0x19a>
 8000fc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000fca:	07d9      	lsls	r1, r3, #31
 8000fcc:	d405      	bmi.n	8000fda <_vfiprintf_r+0x1fe>
 8000fce:	89ab      	ldrh	r3, [r5, #12]
 8000fd0:	059a      	lsls	r2, r3, #22
 8000fd2:	d402      	bmi.n	8000fda <_vfiprintf_r+0x1fe>
 8000fd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000fd6:	f7ff fddd 	bl	8000b94 <__retarget_lock_release_recursive>
 8000fda:	89ab      	ldrh	r3, [r5, #12]
 8000fdc:	065b      	lsls	r3, r3, #25
 8000fde:	f53f af1f 	bmi.w	8000e20 <_vfiprintf_r+0x44>
 8000fe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000fe4:	e71e      	b.n	8000e24 <_vfiprintf_r+0x48>
 8000fe6:	ab03      	add	r3, sp, #12
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	462a      	mov	r2, r5
 8000fec:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <_vfiprintf_r+0x228>)
 8000fee:	a904      	add	r1, sp, #16
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	f000 f879 	bl	80010e8 <_printf_i>
 8000ff6:	e7e4      	b.n	8000fc2 <_vfiprintf_r+0x1e6>
 8000ff8:	08001702 	.word	0x08001702
 8000ffc:	0800170c 	.word	0x0800170c
 8001000:	00000000 	.word	0x00000000
 8001004:	08000db7 	.word	0x08000db7
 8001008:	08001708 	.word	0x08001708

0800100c <_printf_common>:
 800100c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001010:	4616      	mov	r6, r2
 8001012:	4698      	mov	r8, r3
 8001014:	688a      	ldr	r2, [r1, #8]
 8001016:	690b      	ldr	r3, [r1, #16]
 8001018:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800101c:	4293      	cmp	r3, r2
 800101e:	bfb8      	it	lt
 8001020:	4613      	movlt	r3, r2
 8001022:	6033      	str	r3, [r6, #0]
 8001024:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001028:	4607      	mov	r7, r0
 800102a:	460c      	mov	r4, r1
 800102c:	b10a      	cbz	r2, 8001032 <_printf_common+0x26>
 800102e:	3301      	adds	r3, #1
 8001030:	6033      	str	r3, [r6, #0]
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	0699      	lsls	r1, r3, #26
 8001036:	bf42      	ittt	mi
 8001038:	6833      	ldrmi	r3, [r6, #0]
 800103a:	3302      	addmi	r3, #2
 800103c:	6033      	strmi	r3, [r6, #0]
 800103e:	6825      	ldr	r5, [r4, #0]
 8001040:	f015 0506 	ands.w	r5, r5, #6
 8001044:	d106      	bne.n	8001054 <_printf_common+0x48>
 8001046:	f104 0a19 	add.w	sl, r4, #25
 800104a:	68e3      	ldr	r3, [r4, #12]
 800104c:	6832      	ldr	r2, [r6, #0]
 800104e:	1a9b      	subs	r3, r3, r2
 8001050:	42ab      	cmp	r3, r5
 8001052:	dc26      	bgt.n	80010a2 <_printf_common+0x96>
 8001054:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001058:	6822      	ldr	r2, [r4, #0]
 800105a:	3b00      	subs	r3, #0
 800105c:	bf18      	it	ne
 800105e:	2301      	movne	r3, #1
 8001060:	0692      	lsls	r2, r2, #26
 8001062:	d42b      	bmi.n	80010bc <_printf_common+0xb0>
 8001064:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001068:	4641      	mov	r1, r8
 800106a:	4638      	mov	r0, r7
 800106c:	47c8      	blx	r9
 800106e:	3001      	adds	r0, #1
 8001070:	d01e      	beq.n	80010b0 <_printf_common+0xa4>
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	6922      	ldr	r2, [r4, #16]
 8001076:	f003 0306 	and.w	r3, r3, #6
 800107a:	2b04      	cmp	r3, #4
 800107c:	bf02      	ittt	eq
 800107e:	68e5      	ldreq	r5, [r4, #12]
 8001080:	6833      	ldreq	r3, [r6, #0]
 8001082:	1aed      	subeq	r5, r5, r3
 8001084:	68a3      	ldr	r3, [r4, #8]
 8001086:	bf0c      	ite	eq
 8001088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800108c:	2500      	movne	r5, #0
 800108e:	4293      	cmp	r3, r2
 8001090:	bfc4      	itt	gt
 8001092:	1a9b      	subgt	r3, r3, r2
 8001094:	18ed      	addgt	r5, r5, r3
 8001096:	2600      	movs	r6, #0
 8001098:	341a      	adds	r4, #26
 800109a:	42b5      	cmp	r5, r6
 800109c:	d11a      	bne.n	80010d4 <_printf_common+0xc8>
 800109e:	2000      	movs	r0, #0
 80010a0:	e008      	b.n	80010b4 <_printf_common+0xa8>
 80010a2:	2301      	movs	r3, #1
 80010a4:	4652      	mov	r2, sl
 80010a6:	4641      	mov	r1, r8
 80010a8:	4638      	mov	r0, r7
 80010aa:	47c8      	blx	r9
 80010ac:	3001      	adds	r0, #1
 80010ae:	d103      	bne.n	80010b8 <_printf_common+0xac>
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010b8:	3501      	adds	r5, #1
 80010ba:	e7c6      	b.n	800104a <_printf_common+0x3e>
 80010bc:	18e1      	adds	r1, r4, r3
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	2030      	movs	r0, #48	@ 0x30
 80010c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80010c6:	4422      	add	r2, r4
 80010c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80010cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80010d0:	3302      	adds	r3, #2
 80010d2:	e7c7      	b.n	8001064 <_printf_common+0x58>
 80010d4:	2301      	movs	r3, #1
 80010d6:	4622      	mov	r2, r4
 80010d8:	4641      	mov	r1, r8
 80010da:	4638      	mov	r0, r7
 80010dc:	47c8      	blx	r9
 80010de:	3001      	adds	r0, #1
 80010e0:	d0e6      	beq.n	80010b0 <_printf_common+0xa4>
 80010e2:	3601      	adds	r6, #1
 80010e4:	e7d9      	b.n	800109a <_printf_common+0x8e>
	...

080010e8 <_printf_i>:
 80010e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80010ec:	7e0f      	ldrb	r7, [r1, #24]
 80010ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80010f0:	2f78      	cmp	r7, #120	@ 0x78
 80010f2:	4691      	mov	r9, r2
 80010f4:	4680      	mov	r8, r0
 80010f6:	460c      	mov	r4, r1
 80010f8:	469a      	mov	sl, r3
 80010fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80010fe:	d807      	bhi.n	8001110 <_printf_i+0x28>
 8001100:	2f62      	cmp	r7, #98	@ 0x62
 8001102:	d80a      	bhi.n	800111a <_printf_i+0x32>
 8001104:	2f00      	cmp	r7, #0
 8001106:	f000 80d1 	beq.w	80012ac <_printf_i+0x1c4>
 800110a:	2f58      	cmp	r7, #88	@ 0x58
 800110c:	f000 80b8 	beq.w	8001280 <_printf_i+0x198>
 8001110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001114:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001118:	e03a      	b.n	8001190 <_printf_i+0xa8>
 800111a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800111e:	2b15      	cmp	r3, #21
 8001120:	d8f6      	bhi.n	8001110 <_printf_i+0x28>
 8001122:	a101      	add	r1, pc, #4	@ (adr r1, 8001128 <_printf_i+0x40>)
 8001124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001128:	08001181 	.word	0x08001181
 800112c:	08001195 	.word	0x08001195
 8001130:	08001111 	.word	0x08001111
 8001134:	08001111 	.word	0x08001111
 8001138:	08001111 	.word	0x08001111
 800113c:	08001111 	.word	0x08001111
 8001140:	08001195 	.word	0x08001195
 8001144:	08001111 	.word	0x08001111
 8001148:	08001111 	.word	0x08001111
 800114c:	08001111 	.word	0x08001111
 8001150:	08001111 	.word	0x08001111
 8001154:	08001293 	.word	0x08001293
 8001158:	080011bf 	.word	0x080011bf
 800115c:	0800124d 	.word	0x0800124d
 8001160:	08001111 	.word	0x08001111
 8001164:	08001111 	.word	0x08001111
 8001168:	080012b5 	.word	0x080012b5
 800116c:	08001111 	.word	0x08001111
 8001170:	080011bf 	.word	0x080011bf
 8001174:	08001111 	.word	0x08001111
 8001178:	08001111 	.word	0x08001111
 800117c:	08001255 	.word	0x08001255
 8001180:	6833      	ldr	r3, [r6, #0]
 8001182:	1d1a      	adds	r2, r3, #4
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6032      	str	r2, [r6, #0]
 8001188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800118c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001190:	2301      	movs	r3, #1
 8001192:	e09c      	b.n	80012ce <_printf_i+0x1e6>
 8001194:	6833      	ldr	r3, [r6, #0]
 8001196:	6820      	ldr	r0, [r4, #0]
 8001198:	1d19      	adds	r1, r3, #4
 800119a:	6031      	str	r1, [r6, #0]
 800119c:	0606      	lsls	r6, r0, #24
 800119e:	d501      	bpl.n	80011a4 <_printf_i+0xbc>
 80011a0:	681d      	ldr	r5, [r3, #0]
 80011a2:	e003      	b.n	80011ac <_printf_i+0xc4>
 80011a4:	0645      	lsls	r5, r0, #25
 80011a6:	d5fb      	bpl.n	80011a0 <_printf_i+0xb8>
 80011a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80011ac:	2d00      	cmp	r5, #0
 80011ae:	da03      	bge.n	80011b8 <_printf_i+0xd0>
 80011b0:	232d      	movs	r3, #45	@ 0x2d
 80011b2:	426d      	negs	r5, r5
 80011b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80011b8:	4858      	ldr	r0, [pc, #352]	@ (800131c <_printf_i+0x234>)
 80011ba:	230a      	movs	r3, #10
 80011bc:	e011      	b.n	80011e2 <_printf_i+0xfa>
 80011be:	6821      	ldr	r1, [r4, #0]
 80011c0:	6833      	ldr	r3, [r6, #0]
 80011c2:	0608      	lsls	r0, r1, #24
 80011c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80011c8:	d402      	bmi.n	80011d0 <_printf_i+0xe8>
 80011ca:	0649      	lsls	r1, r1, #25
 80011cc:	bf48      	it	mi
 80011ce:	b2ad      	uxthmi	r5, r5
 80011d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80011d2:	4852      	ldr	r0, [pc, #328]	@ (800131c <_printf_i+0x234>)
 80011d4:	6033      	str	r3, [r6, #0]
 80011d6:	bf14      	ite	ne
 80011d8:	230a      	movne	r3, #10
 80011da:	2308      	moveq	r3, #8
 80011dc:	2100      	movs	r1, #0
 80011de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80011e2:	6866      	ldr	r6, [r4, #4]
 80011e4:	60a6      	str	r6, [r4, #8]
 80011e6:	2e00      	cmp	r6, #0
 80011e8:	db05      	blt.n	80011f6 <_printf_i+0x10e>
 80011ea:	6821      	ldr	r1, [r4, #0]
 80011ec:	432e      	orrs	r6, r5
 80011ee:	f021 0104 	bic.w	r1, r1, #4
 80011f2:	6021      	str	r1, [r4, #0]
 80011f4:	d04b      	beq.n	800128e <_printf_i+0x1a6>
 80011f6:	4616      	mov	r6, r2
 80011f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80011fc:	fb03 5711 	mls	r7, r3, r1, r5
 8001200:	5dc7      	ldrb	r7, [r0, r7]
 8001202:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001206:	462f      	mov	r7, r5
 8001208:	42bb      	cmp	r3, r7
 800120a:	460d      	mov	r5, r1
 800120c:	d9f4      	bls.n	80011f8 <_printf_i+0x110>
 800120e:	2b08      	cmp	r3, #8
 8001210:	d10b      	bne.n	800122a <_printf_i+0x142>
 8001212:	6823      	ldr	r3, [r4, #0]
 8001214:	07df      	lsls	r7, r3, #31
 8001216:	d508      	bpl.n	800122a <_printf_i+0x142>
 8001218:	6923      	ldr	r3, [r4, #16]
 800121a:	6861      	ldr	r1, [r4, #4]
 800121c:	4299      	cmp	r1, r3
 800121e:	bfde      	ittt	le
 8001220:	2330      	movle	r3, #48	@ 0x30
 8001222:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001226:	f106 36ff 	addle.w	r6, r6, #4294967295
 800122a:	1b92      	subs	r2, r2, r6
 800122c:	6122      	str	r2, [r4, #16]
 800122e:	f8cd a000 	str.w	sl, [sp]
 8001232:	464b      	mov	r3, r9
 8001234:	aa03      	add	r2, sp, #12
 8001236:	4621      	mov	r1, r4
 8001238:	4640      	mov	r0, r8
 800123a:	f7ff fee7 	bl	800100c <_printf_common>
 800123e:	3001      	adds	r0, #1
 8001240:	d14a      	bne.n	80012d8 <_printf_i+0x1f0>
 8001242:	f04f 30ff 	mov.w	r0, #4294967295
 8001246:	b004      	add	sp, #16
 8001248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	f043 0320 	orr.w	r3, r3, #32
 8001252:	6023      	str	r3, [r4, #0]
 8001254:	4832      	ldr	r0, [pc, #200]	@ (8001320 <_printf_i+0x238>)
 8001256:	2778      	movs	r7, #120	@ 0x78
 8001258:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	6831      	ldr	r1, [r6, #0]
 8001260:	061f      	lsls	r7, r3, #24
 8001262:	f851 5b04 	ldr.w	r5, [r1], #4
 8001266:	d402      	bmi.n	800126e <_printf_i+0x186>
 8001268:	065f      	lsls	r7, r3, #25
 800126a:	bf48      	it	mi
 800126c:	b2ad      	uxthmi	r5, r5
 800126e:	6031      	str	r1, [r6, #0]
 8001270:	07d9      	lsls	r1, r3, #31
 8001272:	bf44      	itt	mi
 8001274:	f043 0320 	orrmi.w	r3, r3, #32
 8001278:	6023      	strmi	r3, [r4, #0]
 800127a:	b11d      	cbz	r5, 8001284 <_printf_i+0x19c>
 800127c:	2310      	movs	r3, #16
 800127e:	e7ad      	b.n	80011dc <_printf_i+0xf4>
 8001280:	4826      	ldr	r0, [pc, #152]	@ (800131c <_printf_i+0x234>)
 8001282:	e7e9      	b.n	8001258 <_printf_i+0x170>
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	f023 0320 	bic.w	r3, r3, #32
 800128a:	6023      	str	r3, [r4, #0]
 800128c:	e7f6      	b.n	800127c <_printf_i+0x194>
 800128e:	4616      	mov	r6, r2
 8001290:	e7bd      	b.n	800120e <_printf_i+0x126>
 8001292:	6833      	ldr	r3, [r6, #0]
 8001294:	6825      	ldr	r5, [r4, #0]
 8001296:	6961      	ldr	r1, [r4, #20]
 8001298:	1d18      	adds	r0, r3, #4
 800129a:	6030      	str	r0, [r6, #0]
 800129c:	062e      	lsls	r6, r5, #24
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	d501      	bpl.n	80012a6 <_printf_i+0x1be>
 80012a2:	6019      	str	r1, [r3, #0]
 80012a4:	e002      	b.n	80012ac <_printf_i+0x1c4>
 80012a6:	0668      	lsls	r0, r5, #25
 80012a8:	d5fb      	bpl.n	80012a2 <_printf_i+0x1ba>
 80012aa:	8019      	strh	r1, [r3, #0]
 80012ac:	2300      	movs	r3, #0
 80012ae:	6123      	str	r3, [r4, #16]
 80012b0:	4616      	mov	r6, r2
 80012b2:	e7bc      	b.n	800122e <_printf_i+0x146>
 80012b4:	6833      	ldr	r3, [r6, #0]
 80012b6:	1d1a      	adds	r2, r3, #4
 80012b8:	6032      	str	r2, [r6, #0]
 80012ba:	681e      	ldr	r6, [r3, #0]
 80012bc:	6862      	ldr	r2, [r4, #4]
 80012be:	2100      	movs	r1, #0
 80012c0:	4630      	mov	r0, r6
 80012c2:	f7fe ff8d 	bl	80001e0 <memchr>
 80012c6:	b108      	cbz	r0, 80012cc <_printf_i+0x1e4>
 80012c8:	1b80      	subs	r0, r0, r6
 80012ca:	6060      	str	r0, [r4, #4]
 80012cc:	6863      	ldr	r3, [r4, #4]
 80012ce:	6123      	str	r3, [r4, #16]
 80012d0:	2300      	movs	r3, #0
 80012d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80012d6:	e7aa      	b.n	800122e <_printf_i+0x146>
 80012d8:	6923      	ldr	r3, [r4, #16]
 80012da:	4632      	mov	r2, r6
 80012dc:	4649      	mov	r1, r9
 80012de:	4640      	mov	r0, r8
 80012e0:	47d0      	blx	sl
 80012e2:	3001      	adds	r0, #1
 80012e4:	d0ad      	beq.n	8001242 <_printf_i+0x15a>
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	079b      	lsls	r3, r3, #30
 80012ea:	d413      	bmi.n	8001314 <_printf_i+0x22c>
 80012ec:	68e0      	ldr	r0, [r4, #12]
 80012ee:	9b03      	ldr	r3, [sp, #12]
 80012f0:	4298      	cmp	r0, r3
 80012f2:	bfb8      	it	lt
 80012f4:	4618      	movlt	r0, r3
 80012f6:	e7a6      	b.n	8001246 <_printf_i+0x15e>
 80012f8:	2301      	movs	r3, #1
 80012fa:	4632      	mov	r2, r6
 80012fc:	4649      	mov	r1, r9
 80012fe:	4640      	mov	r0, r8
 8001300:	47d0      	blx	sl
 8001302:	3001      	adds	r0, #1
 8001304:	d09d      	beq.n	8001242 <_printf_i+0x15a>
 8001306:	3501      	adds	r5, #1
 8001308:	68e3      	ldr	r3, [r4, #12]
 800130a:	9903      	ldr	r1, [sp, #12]
 800130c:	1a5b      	subs	r3, r3, r1
 800130e:	42ab      	cmp	r3, r5
 8001310:	dcf2      	bgt.n	80012f8 <_printf_i+0x210>
 8001312:	e7eb      	b.n	80012ec <_printf_i+0x204>
 8001314:	2500      	movs	r5, #0
 8001316:	f104 0619 	add.w	r6, r4, #25
 800131a:	e7f5      	b.n	8001308 <_printf_i+0x220>
 800131c:	08001713 	.word	0x08001713
 8001320:	08001724 	.word	0x08001724

08001324 <__sflush_r>:
 8001324:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800132c:	0716      	lsls	r6, r2, #28
 800132e:	4605      	mov	r5, r0
 8001330:	460c      	mov	r4, r1
 8001332:	d454      	bmi.n	80013de <__sflush_r+0xba>
 8001334:	684b      	ldr	r3, [r1, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	dc02      	bgt.n	8001340 <__sflush_r+0x1c>
 800133a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800133c:	2b00      	cmp	r3, #0
 800133e:	dd48      	ble.n	80013d2 <__sflush_r+0xae>
 8001340:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001342:	2e00      	cmp	r6, #0
 8001344:	d045      	beq.n	80013d2 <__sflush_r+0xae>
 8001346:	2300      	movs	r3, #0
 8001348:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800134c:	682f      	ldr	r7, [r5, #0]
 800134e:	6a21      	ldr	r1, [r4, #32]
 8001350:	602b      	str	r3, [r5, #0]
 8001352:	d030      	beq.n	80013b6 <__sflush_r+0x92>
 8001354:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001356:	89a3      	ldrh	r3, [r4, #12]
 8001358:	0759      	lsls	r1, r3, #29
 800135a:	d505      	bpl.n	8001368 <__sflush_r+0x44>
 800135c:	6863      	ldr	r3, [r4, #4]
 800135e:	1ad2      	subs	r2, r2, r3
 8001360:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001362:	b10b      	cbz	r3, 8001368 <__sflush_r+0x44>
 8001364:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001366:	1ad2      	subs	r2, r2, r3
 8001368:	2300      	movs	r3, #0
 800136a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800136c:	6a21      	ldr	r1, [r4, #32]
 800136e:	4628      	mov	r0, r5
 8001370:	47b0      	blx	r6
 8001372:	1c43      	adds	r3, r0, #1
 8001374:	89a3      	ldrh	r3, [r4, #12]
 8001376:	d106      	bne.n	8001386 <__sflush_r+0x62>
 8001378:	6829      	ldr	r1, [r5, #0]
 800137a:	291d      	cmp	r1, #29
 800137c:	d82b      	bhi.n	80013d6 <__sflush_r+0xb2>
 800137e:	4a2a      	ldr	r2, [pc, #168]	@ (8001428 <__sflush_r+0x104>)
 8001380:	40ca      	lsrs	r2, r1
 8001382:	07d6      	lsls	r6, r2, #31
 8001384:	d527      	bpl.n	80013d6 <__sflush_r+0xb2>
 8001386:	2200      	movs	r2, #0
 8001388:	6062      	str	r2, [r4, #4]
 800138a:	04d9      	lsls	r1, r3, #19
 800138c:	6922      	ldr	r2, [r4, #16]
 800138e:	6022      	str	r2, [r4, #0]
 8001390:	d504      	bpl.n	800139c <__sflush_r+0x78>
 8001392:	1c42      	adds	r2, r0, #1
 8001394:	d101      	bne.n	800139a <__sflush_r+0x76>
 8001396:	682b      	ldr	r3, [r5, #0]
 8001398:	b903      	cbnz	r3, 800139c <__sflush_r+0x78>
 800139a:	6560      	str	r0, [r4, #84]	@ 0x54
 800139c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800139e:	602f      	str	r7, [r5, #0]
 80013a0:	b1b9      	cbz	r1, 80013d2 <__sflush_r+0xae>
 80013a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80013a6:	4299      	cmp	r1, r3
 80013a8:	d002      	beq.n	80013b0 <__sflush_r+0x8c>
 80013aa:	4628      	mov	r0, r5
 80013ac:	f7ff fbf4 	bl	8000b98 <_free_r>
 80013b0:	2300      	movs	r3, #0
 80013b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80013b4:	e00d      	b.n	80013d2 <__sflush_r+0xae>
 80013b6:	2301      	movs	r3, #1
 80013b8:	4628      	mov	r0, r5
 80013ba:	47b0      	blx	r6
 80013bc:	4602      	mov	r2, r0
 80013be:	1c50      	adds	r0, r2, #1
 80013c0:	d1c9      	bne.n	8001356 <__sflush_r+0x32>
 80013c2:	682b      	ldr	r3, [r5, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0c6      	beq.n	8001356 <__sflush_r+0x32>
 80013c8:	2b1d      	cmp	r3, #29
 80013ca:	d001      	beq.n	80013d0 <__sflush_r+0xac>
 80013cc:	2b16      	cmp	r3, #22
 80013ce:	d11e      	bne.n	800140e <__sflush_r+0xea>
 80013d0:	602f      	str	r7, [r5, #0]
 80013d2:	2000      	movs	r0, #0
 80013d4:	e022      	b.n	800141c <__sflush_r+0xf8>
 80013d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013da:	b21b      	sxth	r3, r3
 80013dc:	e01b      	b.n	8001416 <__sflush_r+0xf2>
 80013de:	690f      	ldr	r7, [r1, #16]
 80013e0:	2f00      	cmp	r7, #0
 80013e2:	d0f6      	beq.n	80013d2 <__sflush_r+0xae>
 80013e4:	0793      	lsls	r3, r2, #30
 80013e6:	680e      	ldr	r6, [r1, #0]
 80013e8:	bf08      	it	eq
 80013ea:	694b      	ldreq	r3, [r1, #20]
 80013ec:	600f      	str	r7, [r1, #0]
 80013ee:	bf18      	it	ne
 80013f0:	2300      	movne	r3, #0
 80013f2:	eba6 0807 	sub.w	r8, r6, r7
 80013f6:	608b      	str	r3, [r1, #8]
 80013f8:	f1b8 0f00 	cmp.w	r8, #0
 80013fc:	dde9      	ble.n	80013d2 <__sflush_r+0xae>
 80013fe:	6a21      	ldr	r1, [r4, #32]
 8001400:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001402:	4643      	mov	r3, r8
 8001404:	463a      	mov	r2, r7
 8001406:	4628      	mov	r0, r5
 8001408:	47b0      	blx	r6
 800140a:	2800      	cmp	r0, #0
 800140c:	dc08      	bgt.n	8001420 <__sflush_r+0xfc>
 800140e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001412:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001416:	81a3      	strh	r3, [r4, #12]
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001420:	4407      	add	r7, r0
 8001422:	eba8 0800 	sub.w	r8, r8, r0
 8001426:	e7e7      	b.n	80013f8 <__sflush_r+0xd4>
 8001428:	20400001 	.word	0x20400001

0800142c <_fflush_r>:
 800142c:	b538      	push	{r3, r4, r5, lr}
 800142e:	690b      	ldr	r3, [r1, #16]
 8001430:	4605      	mov	r5, r0
 8001432:	460c      	mov	r4, r1
 8001434:	b913      	cbnz	r3, 800143c <_fflush_r+0x10>
 8001436:	2500      	movs	r5, #0
 8001438:	4628      	mov	r0, r5
 800143a:	bd38      	pop	{r3, r4, r5, pc}
 800143c:	b118      	cbz	r0, 8001446 <_fflush_r+0x1a>
 800143e:	6a03      	ldr	r3, [r0, #32]
 8001440:	b90b      	cbnz	r3, 8001446 <_fflush_r+0x1a>
 8001442:	f7ff faa1 	bl	8000988 <__sinit>
 8001446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f3      	beq.n	8001436 <_fflush_r+0xa>
 800144e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001450:	07d0      	lsls	r0, r2, #31
 8001452:	d404      	bmi.n	800145e <_fflush_r+0x32>
 8001454:	0599      	lsls	r1, r3, #22
 8001456:	d402      	bmi.n	800145e <_fflush_r+0x32>
 8001458:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800145a:	f7ff fb9a 	bl	8000b92 <__retarget_lock_acquire_recursive>
 800145e:	4628      	mov	r0, r5
 8001460:	4621      	mov	r1, r4
 8001462:	f7ff ff5f 	bl	8001324 <__sflush_r>
 8001466:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001468:	07da      	lsls	r2, r3, #31
 800146a:	4605      	mov	r5, r0
 800146c:	d4e4      	bmi.n	8001438 <_fflush_r+0xc>
 800146e:	89a3      	ldrh	r3, [r4, #12]
 8001470:	059b      	lsls	r3, r3, #22
 8001472:	d4e1      	bmi.n	8001438 <_fflush_r+0xc>
 8001474:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001476:	f7ff fb8d 	bl	8000b94 <__retarget_lock_release_recursive>
 800147a:	e7dd      	b.n	8001438 <_fflush_r+0xc>

0800147c <__swbuf_r>:
 800147c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800147e:	460e      	mov	r6, r1
 8001480:	4614      	mov	r4, r2
 8001482:	4605      	mov	r5, r0
 8001484:	b118      	cbz	r0, 800148e <__swbuf_r+0x12>
 8001486:	6a03      	ldr	r3, [r0, #32]
 8001488:	b90b      	cbnz	r3, 800148e <__swbuf_r+0x12>
 800148a:	f7ff fa7d 	bl	8000988 <__sinit>
 800148e:	69a3      	ldr	r3, [r4, #24]
 8001490:	60a3      	str	r3, [r4, #8]
 8001492:	89a3      	ldrh	r3, [r4, #12]
 8001494:	071a      	lsls	r2, r3, #28
 8001496:	d501      	bpl.n	800149c <__swbuf_r+0x20>
 8001498:	6923      	ldr	r3, [r4, #16]
 800149a:	b943      	cbnz	r3, 80014ae <__swbuf_r+0x32>
 800149c:	4621      	mov	r1, r4
 800149e:	4628      	mov	r0, r5
 80014a0:	f000 f82a 	bl	80014f8 <__swsetup_r>
 80014a4:	b118      	cbz	r0, 80014ae <__swbuf_r+0x32>
 80014a6:	f04f 37ff 	mov.w	r7, #4294967295
 80014aa:	4638      	mov	r0, r7
 80014ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014ae:	6823      	ldr	r3, [r4, #0]
 80014b0:	6922      	ldr	r2, [r4, #16]
 80014b2:	1a98      	subs	r0, r3, r2
 80014b4:	6963      	ldr	r3, [r4, #20]
 80014b6:	b2f6      	uxtb	r6, r6
 80014b8:	4283      	cmp	r3, r0
 80014ba:	4637      	mov	r7, r6
 80014bc:	dc05      	bgt.n	80014ca <__swbuf_r+0x4e>
 80014be:	4621      	mov	r1, r4
 80014c0:	4628      	mov	r0, r5
 80014c2:	f7ff ffb3 	bl	800142c <_fflush_r>
 80014c6:	2800      	cmp	r0, #0
 80014c8:	d1ed      	bne.n	80014a6 <__swbuf_r+0x2a>
 80014ca:	68a3      	ldr	r3, [r4, #8]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	60a3      	str	r3, [r4, #8]
 80014d0:	6823      	ldr	r3, [r4, #0]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	6022      	str	r2, [r4, #0]
 80014d6:	701e      	strb	r6, [r3, #0]
 80014d8:	6962      	ldr	r2, [r4, #20]
 80014da:	1c43      	adds	r3, r0, #1
 80014dc:	429a      	cmp	r2, r3
 80014de:	d004      	beq.n	80014ea <__swbuf_r+0x6e>
 80014e0:	89a3      	ldrh	r3, [r4, #12]
 80014e2:	07db      	lsls	r3, r3, #31
 80014e4:	d5e1      	bpl.n	80014aa <__swbuf_r+0x2e>
 80014e6:	2e0a      	cmp	r6, #10
 80014e8:	d1df      	bne.n	80014aa <__swbuf_r+0x2e>
 80014ea:	4621      	mov	r1, r4
 80014ec:	4628      	mov	r0, r5
 80014ee:	f7ff ff9d 	bl	800142c <_fflush_r>
 80014f2:	2800      	cmp	r0, #0
 80014f4:	d0d9      	beq.n	80014aa <__swbuf_r+0x2e>
 80014f6:	e7d6      	b.n	80014a6 <__swbuf_r+0x2a>

080014f8 <__swsetup_r>:
 80014f8:	b538      	push	{r3, r4, r5, lr}
 80014fa:	4b29      	ldr	r3, [pc, #164]	@ (80015a0 <__swsetup_r+0xa8>)
 80014fc:	4605      	mov	r5, r0
 80014fe:	6818      	ldr	r0, [r3, #0]
 8001500:	460c      	mov	r4, r1
 8001502:	b118      	cbz	r0, 800150c <__swsetup_r+0x14>
 8001504:	6a03      	ldr	r3, [r0, #32]
 8001506:	b90b      	cbnz	r3, 800150c <__swsetup_r+0x14>
 8001508:	f7ff fa3e 	bl	8000988 <__sinit>
 800150c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001510:	0719      	lsls	r1, r3, #28
 8001512:	d422      	bmi.n	800155a <__swsetup_r+0x62>
 8001514:	06da      	lsls	r2, r3, #27
 8001516:	d407      	bmi.n	8001528 <__swsetup_r+0x30>
 8001518:	2209      	movs	r2, #9
 800151a:	602a      	str	r2, [r5, #0]
 800151c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001520:	81a3      	strh	r3, [r4, #12]
 8001522:	f04f 30ff 	mov.w	r0, #4294967295
 8001526:	e033      	b.n	8001590 <__swsetup_r+0x98>
 8001528:	0758      	lsls	r0, r3, #29
 800152a:	d512      	bpl.n	8001552 <__swsetup_r+0x5a>
 800152c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800152e:	b141      	cbz	r1, 8001542 <__swsetup_r+0x4a>
 8001530:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001534:	4299      	cmp	r1, r3
 8001536:	d002      	beq.n	800153e <__swsetup_r+0x46>
 8001538:	4628      	mov	r0, r5
 800153a:	f7ff fb2d 	bl	8000b98 <_free_r>
 800153e:	2300      	movs	r3, #0
 8001540:	6363      	str	r3, [r4, #52]	@ 0x34
 8001542:	89a3      	ldrh	r3, [r4, #12]
 8001544:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001548:	81a3      	strh	r3, [r4, #12]
 800154a:	2300      	movs	r3, #0
 800154c:	6063      	str	r3, [r4, #4]
 800154e:	6923      	ldr	r3, [r4, #16]
 8001550:	6023      	str	r3, [r4, #0]
 8001552:	89a3      	ldrh	r3, [r4, #12]
 8001554:	f043 0308 	orr.w	r3, r3, #8
 8001558:	81a3      	strh	r3, [r4, #12]
 800155a:	6923      	ldr	r3, [r4, #16]
 800155c:	b94b      	cbnz	r3, 8001572 <__swsetup_r+0x7a>
 800155e:	89a3      	ldrh	r3, [r4, #12]
 8001560:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001568:	d003      	beq.n	8001572 <__swsetup_r+0x7a>
 800156a:	4621      	mov	r1, r4
 800156c:	4628      	mov	r0, r5
 800156e:	f000 f84f 	bl	8001610 <__smakebuf_r>
 8001572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001576:	f013 0201 	ands.w	r2, r3, #1
 800157a:	d00a      	beq.n	8001592 <__swsetup_r+0x9a>
 800157c:	2200      	movs	r2, #0
 800157e:	60a2      	str	r2, [r4, #8]
 8001580:	6962      	ldr	r2, [r4, #20]
 8001582:	4252      	negs	r2, r2
 8001584:	61a2      	str	r2, [r4, #24]
 8001586:	6922      	ldr	r2, [r4, #16]
 8001588:	b942      	cbnz	r2, 800159c <__swsetup_r+0xa4>
 800158a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800158e:	d1c5      	bne.n	800151c <__swsetup_r+0x24>
 8001590:	bd38      	pop	{r3, r4, r5, pc}
 8001592:	0799      	lsls	r1, r3, #30
 8001594:	bf58      	it	pl
 8001596:	6962      	ldrpl	r2, [r4, #20]
 8001598:	60a2      	str	r2, [r4, #8]
 800159a:	e7f4      	b.n	8001586 <__swsetup_r+0x8e>
 800159c:	2000      	movs	r0, #0
 800159e:	e7f7      	b.n	8001590 <__swsetup_r+0x98>
 80015a0:	2000000c 	.word	0x2000000c

080015a4 <_sbrk_r>:
 80015a4:	b538      	push	{r3, r4, r5, lr}
 80015a6:	4d06      	ldr	r5, [pc, #24]	@ (80015c0 <_sbrk_r+0x1c>)
 80015a8:	2300      	movs	r3, #0
 80015aa:	4604      	mov	r4, r0
 80015ac:	4608      	mov	r0, r1
 80015ae:	602b      	str	r3, [r5, #0]
 80015b0:	f7fe ff0c 	bl	80003cc <_sbrk>
 80015b4:	1c43      	adds	r3, r0, #1
 80015b6:	d102      	bne.n	80015be <_sbrk_r+0x1a>
 80015b8:	682b      	ldr	r3, [r5, #0]
 80015ba:	b103      	cbz	r3, 80015be <_sbrk_r+0x1a>
 80015bc:	6023      	str	r3, [r4, #0]
 80015be:	bd38      	pop	{r3, r4, r5, pc}
 80015c0:	200001c0 	.word	0x200001c0

080015c4 <__swhatbuf_r>:
 80015c4:	b570      	push	{r4, r5, r6, lr}
 80015c6:	460c      	mov	r4, r1
 80015c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015cc:	2900      	cmp	r1, #0
 80015ce:	b096      	sub	sp, #88	@ 0x58
 80015d0:	4615      	mov	r5, r2
 80015d2:	461e      	mov	r6, r3
 80015d4:	da0d      	bge.n	80015f2 <__swhatbuf_r+0x2e>
 80015d6:	89a3      	ldrh	r3, [r4, #12]
 80015d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80015dc:	f04f 0100 	mov.w	r1, #0
 80015e0:	bf14      	ite	ne
 80015e2:	2340      	movne	r3, #64	@ 0x40
 80015e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80015e8:	2000      	movs	r0, #0
 80015ea:	6031      	str	r1, [r6, #0]
 80015ec:	602b      	str	r3, [r5, #0]
 80015ee:	b016      	add	sp, #88	@ 0x58
 80015f0:	bd70      	pop	{r4, r5, r6, pc}
 80015f2:	466a      	mov	r2, sp
 80015f4:	f000 f848 	bl	8001688 <_fstat_r>
 80015f8:	2800      	cmp	r0, #0
 80015fa:	dbec      	blt.n	80015d6 <__swhatbuf_r+0x12>
 80015fc:	9901      	ldr	r1, [sp, #4]
 80015fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001602:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001606:	4259      	negs	r1, r3
 8001608:	4159      	adcs	r1, r3
 800160a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800160e:	e7eb      	b.n	80015e8 <__swhatbuf_r+0x24>

08001610 <__smakebuf_r>:
 8001610:	898b      	ldrh	r3, [r1, #12]
 8001612:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001614:	079d      	lsls	r5, r3, #30
 8001616:	4606      	mov	r6, r0
 8001618:	460c      	mov	r4, r1
 800161a:	d507      	bpl.n	800162c <__smakebuf_r+0x1c>
 800161c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001620:	6023      	str	r3, [r4, #0]
 8001622:	6123      	str	r3, [r4, #16]
 8001624:	2301      	movs	r3, #1
 8001626:	6163      	str	r3, [r4, #20]
 8001628:	b003      	add	sp, #12
 800162a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800162c:	ab01      	add	r3, sp, #4
 800162e:	466a      	mov	r2, sp
 8001630:	f7ff ffc8 	bl	80015c4 <__swhatbuf_r>
 8001634:	9f00      	ldr	r7, [sp, #0]
 8001636:	4605      	mov	r5, r0
 8001638:	4639      	mov	r1, r7
 800163a:	4630      	mov	r0, r6
 800163c:	f7ff fb18 	bl	8000c70 <_malloc_r>
 8001640:	b948      	cbnz	r0, 8001656 <__smakebuf_r+0x46>
 8001642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001646:	059a      	lsls	r2, r3, #22
 8001648:	d4ee      	bmi.n	8001628 <__smakebuf_r+0x18>
 800164a:	f023 0303 	bic.w	r3, r3, #3
 800164e:	f043 0302 	orr.w	r3, r3, #2
 8001652:	81a3      	strh	r3, [r4, #12]
 8001654:	e7e2      	b.n	800161c <__smakebuf_r+0xc>
 8001656:	89a3      	ldrh	r3, [r4, #12]
 8001658:	6020      	str	r0, [r4, #0]
 800165a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800165e:	81a3      	strh	r3, [r4, #12]
 8001660:	9b01      	ldr	r3, [sp, #4]
 8001662:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001666:	b15b      	cbz	r3, 8001680 <__smakebuf_r+0x70>
 8001668:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800166c:	4630      	mov	r0, r6
 800166e:	f000 f81d 	bl	80016ac <_isatty_r>
 8001672:	b128      	cbz	r0, 8001680 <__smakebuf_r+0x70>
 8001674:	89a3      	ldrh	r3, [r4, #12]
 8001676:	f023 0303 	bic.w	r3, r3, #3
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	81a3      	strh	r3, [r4, #12]
 8001680:	89a3      	ldrh	r3, [r4, #12]
 8001682:	431d      	orrs	r5, r3
 8001684:	81a5      	strh	r5, [r4, #12]
 8001686:	e7cf      	b.n	8001628 <__smakebuf_r+0x18>

08001688 <_fstat_r>:
 8001688:	b538      	push	{r3, r4, r5, lr}
 800168a:	4d07      	ldr	r5, [pc, #28]	@ (80016a8 <_fstat_r+0x20>)
 800168c:	2300      	movs	r3, #0
 800168e:	4604      	mov	r4, r0
 8001690:	4608      	mov	r0, r1
 8001692:	4611      	mov	r1, r2
 8001694:	602b      	str	r3, [r5, #0]
 8001696:	f7fe fe70 	bl	800037a <_fstat>
 800169a:	1c43      	adds	r3, r0, #1
 800169c:	d102      	bne.n	80016a4 <_fstat_r+0x1c>
 800169e:	682b      	ldr	r3, [r5, #0]
 80016a0:	b103      	cbz	r3, 80016a4 <_fstat_r+0x1c>
 80016a2:	6023      	str	r3, [r4, #0]
 80016a4:	bd38      	pop	{r3, r4, r5, pc}
 80016a6:	bf00      	nop
 80016a8:	200001c0 	.word	0x200001c0

080016ac <_isatty_r>:
 80016ac:	b538      	push	{r3, r4, r5, lr}
 80016ae:	4d06      	ldr	r5, [pc, #24]	@ (80016c8 <_isatty_r+0x1c>)
 80016b0:	2300      	movs	r3, #0
 80016b2:	4604      	mov	r4, r0
 80016b4:	4608      	mov	r0, r1
 80016b6:	602b      	str	r3, [r5, #0]
 80016b8:	f7fe fe6f 	bl	800039a <_isatty>
 80016bc:	1c43      	adds	r3, r0, #1
 80016be:	d102      	bne.n	80016c6 <_isatty_r+0x1a>
 80016c0:	682b      	ldr	r3, [r5, #0]
 80016c2:	b103      	cbz	r3, 80016c6 <_isatty_r+0x1a>
 80016c4:	6023      	str	r3, [r4, #0]
 80016c6:	bd38      	pop	{r3, r4, r5, pc}
 80016c8:	200001c0 	.word	0x200001c0

080016cc <_init>:
 80016cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ce:	bf00      	nop
 80016d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016d2:	bc08      	pop	{r3}
 80016d4:	469e      	mov	lr, r3
 80016d6:	4770      	bx	lr

080016d8 <_fini>:
 80016d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016da:	bf00      	nop
 80016dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016de:	bc08      	pop	{r3}
 80016e0:	469e      	mov	lr, r3
 80016e2:	4770      	bx	lr
