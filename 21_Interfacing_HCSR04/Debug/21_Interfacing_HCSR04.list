
21_Interfacing_HCSR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08001780  08001780  00002780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001850  08001850  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001850  08001850  00002850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001858  08001858  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001858  08001858  00002858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800185c  0800185c  0000285c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001860  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000005c  080018bc  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  080018bc  000031d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c17  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000080b  00000000  00000000  00004ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  000054b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000156  00000000  00000000  000056a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002133  00000000  00000000  000057f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002c6d  00000000  00000000  00007929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005544c  00000000  00000000  0000a596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005f9e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d88  00000000  00000000  0005fa28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000607b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001768 	.word	0x08001768

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001768 	.word	0x08001768

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	@ (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <main>:

uint16_t count = 0;
uint16_t dist_cm;

int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
    // Initialize peripherals
    tim3_pa6_input_capture();
 80002c0:	f000 f9ba 	bl	8000638 <tim3_pa6_input_capture>
    tim3_pa7_input_capture();
 80002c4:	f000 fa0a 	bl	80006dc <tim3_pa7_input_capture>
    uart2_tx_init();
 80002c8:	f000 fa6a 	bl	80007a0 <uart2_tx_init>

    // Configure PA5 as output
    GPIOA->MODER |= (1U << 10);
 80002cc:	4b13      	ldr	r3, [pc, #76]	@ (800031c <main+0x60>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a12      	ldr	r2, [pc, #72]	@ (800031c <main+0x60>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002d6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U << 11);
 80002d8:	4b10      	ldr	r3, [pc, #64]	@ (800031c <main+0x60>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a0f      	ldr	r2, [pc, #60]	@ (800031c <main+0x60>)
 80002de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002e2:	6013      	str	r3, [r2, #0]

    // Enable TIM3 interrupt in NVIC
    NVIC_EnableIRQ(TIM3_IRQn);
 80002e4:	201d      	movs	r0, #29
 80002e6:	f7ff ffcb 	bl	8000280 <__NVIC_EnableIRQ>

    printf("System Initializing...\n\r");
 80002ea:	480d      	ldr	r0, [pc, #52]	@ (8000320 <main+0x64>)
 80002ec:	f000 fbce 	bl	8000a8c <iprintf>

    // Main loop
    while (1)
    {
        GPIOA->ODR |= (1U << 5);      // Send trigger pulse
 80002f0:	4b0a      	ldr	r3, [pc, #40]	@ (800031c <main+0x60>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a09      	ldr	r2, [pc, #36]	@ (800031c <main+0x60>)
 80002f6:	f043 0320 	orr.w	r3, r3, #32
 80002fa:	6153      	str	r3, [r2, #20]
        systickDelayMicroSec(10);    // 10us delay
 80002fc:	200a      	movs	r0, #10
 80002fe:	f000 f929 	bl	8000554 <systickDelayMicroSec>
        GPIOA->ODR &= ~(1U << 5);    // End trigger pulse
 8000302:	4b06      	ldr	r3, [pc, #24]	@ (800031c <main+0x60>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	4a05      	ldr	r2, [pc, #20]	@ (800031c <main+0x60>)
 8000308:	f023 0320 	bic.w	r3, r3, #32
 800030c:	6153      	str	r3, [r2, #20]
        systickDelayMs(5000);        // 5s delay
 800030e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000312:	f000 f949 	bl	80005a8 <systickDelayMs>
        GPIOA->ODR |= (1U << 5);      // Send trigger pulse
 8000316:	bf00      	nop
 8000318:	e7ea      	b.n	80002f0 <main+0x34>
 800031a:	bf00      	nop
 800031c:	40020000 	.word	0x40020000
 8000320:	08001780 	.word	0x08001780

08000324 <TIM3_IRQHandler>:
    }
}

void TIM3_IRQHandler(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
    // Handle CC1 interrupt (rising edge)
    if (TIM3->SR & SR_CC1IF)
 8000328:	4b23      	ldr	r3, [pc, #140]	@ (80003b8 <TIM3_IRQHandler+0x94>)
 800032a:	691b      	ldr	r3, [r3, #16]
 800032c:	f003 0302 	and.w	r3, r3, #2
 8000330:	2b00      	cmp	r3, #0
 8000332:	d014      	beq.n	800035e <TIM3_IRQHandler+0x3a>
    {
        value_1 = count * (TIM3->CCR1); /* Read captured value */
 8000334:	4b21      	ldr	r3, [pc, #132]	@ (80003bc <TIM3_IRQHandler+0x98>)
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	461a      	mov	r2, r3
 800033a:	4b1f      	ldr	r3, [pc, #124]	@ (80003b8 <TIM3_IRQHandler+0x94>)
 800033c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800033e:	fb02 f303 	mul.w	r3, r2, r3
 8000342:	4a1f      	ldr	r2, [pc, #124]	@ (80003c0 <TIM3_IRQHandler+0x9c>)
 8000344:	6013      	str	r3, [r2, #0]
        TIM3->SR &= ~SR_CC1IF;         /* Clear CC1IF flag */
 8000346:	4b1c      	ldr	r3, [pc, #112]	@ (80003b8 <TIM3_IRQHandler+0x94>)
 8000348:	691b      	ldr	r3, [r3, #16]
 800034a:	4a1b      	ldr	r2, [pc, #108]	@ (80003b8 <TIM3_IRQHandler+0x94>)
 800034c:	f023 0302 	bic.w	r3, r3, #2
 8000350:	6113      	str	r3, [r2, #16]
        printf("CC1 Triggered: %ld\n\r", value_1);
 8000352:	4b1b      	ldr	r3, [pc, #108]	@ (80003c0 <TIM3_IRQHandler+0x9c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4619      	mov	r1, r3
 8000358:	481a      	ldr	r0, [pc, #104]	@ (80003c4 <TIM3_IRQHandler+0xa0>)
 800035a:	f000 fb97 	bl	8000a8c <iprintf>
    }

    // Handle CC2 interrupt (falling edge)
    if (TIM3->SR & SR_CC2IF)
 800035e:	4b16      	ldr	r3, [pc, #88]	@ (80003b8 <TIM3_IRQHandler+0x94>)
 8000360:	691b      	ldr	r3, [r3, #16]
 8000362:	f003 0304 	and.w	r3, r3, #4
 8000366:	2b00      	cmp	r3, #0
 8000368:	d011      	beq.n	800038e <TIM3_IRQHandler+0x6a>
    {
        value_2 = count * (TIM3->CCR2); /* Read captured value */
 800036a:	4b14      	ldr	r3, [pc, #80]	@ (80003bc <TIM3_IRQHandler+0x98>)
 800036c:	881b      	ldrh	r3, [r3, #0]
 800036e:	461a      	mov	r2, r3
 8000370:	4b11      	ldr	r3, [pc, #68]	@ (80003b8 <TIM3_IRQHandler+0x94>)
 8000372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000374:	fb02 f303 	mul.w	r3, r2, r3
 8000378:	4a13      	ldr	r2, [pc, #76]	@ (80003c8 <TIM3_IRQHandler+0xa4>)
 800037a:	6013      	str	r3, [r2, #0]
        TIM3->SR &= ~SR_CC2IF;         /* Clear CC2IF flag */
 800037c:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <TIM3_IRQHandler+0x94>)
 800037e:	691b      	ldr	r3, [r3, #16]
 8000380:	4a0d      	ldr	r2, [pc, #52]	@ (80003b8 <TIM3_IRQHandler+0x94>)
 8000382:	f023 0304 	bic.w	r3, r3, #4
 8000386:	6113      	str	r3, [r2, #16]
//        dist_cm = (uint16_t)(((float)(value_2 - value_1) * 1.715f) / 2.0f);
//        printf("Distance: %u cm\n\r", dist_cm);
        count = 0; // Reset overflow count
 8000388:	4b0c      	ldr	r3, [pc, #48]	@ (80003bc <TIM3_IRQHandler+0x98>)
 800038a:	2200      	movs	r2, #0
 800038c:	801a      	strh	r2, [r3, #0]
    }

    // Handle timer overflow interrupt
    if (TIM3->SR & SR_UIF)
 800038e:	4b0a      	ldr	r3, [pc, #40]	@ (80003b8 <TIM3_IRQHandler+0x94>)
 8000390:	691b      	ldr	r3, [r3, #16]
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	2b00      	cmp	r3, #0
 8000398:	d00b      	beq.n	80003b2 <TIM3_IRQHandler+0x8e>
    {
        count++;
 800039a:	4b08      	ldr	r3, [pc, #32]	@ (80003bc <TIM3_IRQHandler+0x98>)
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	3301      	adds	r3, #1
 80003a0:	b29a      	uxth	r2, r3
 80003a2:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <TIM3_IRQHandler+0x98>)
 80003a4:	801a      	strh	r2, [r3, #0]
        TIM3->SR &= ~SR_UIF; // Clear update interrupt flag
 80003a6:	4b04      	ldr	r3, [pc, #16]	@ (80003b8 <TIM3_IRQHandler+0x94>)
 80003a8:	691b      	ldr	r3, [r3, #16]
 80003aa:	4a03      	ldr	r2, [pc, #12]	@ (80003b8 <TIM3_IRQHandler+0x94>)
 80003ac:	f023 0301 	bic.w	r3, r3, #1
 80003b0:	6113      	str	r3, [r2, #16]
    }
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40000400 	.word	0x40000400
 80003bc:	20000080 	.word	0x20000080
 80003c0:	20000078 	.word	0x20000078
 80003c4:	0800179c 	.word	0x0800179c
 80003c8:	2000007c 	.word	0x2000007c

080003cc <HardFault_Handler>:



void HardFault_Handler(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	while (1)
	    {
	        printf("HardFault occurred\n\r");
 80003d0:	4801      	ldr	r0, [pc, #4]	@ (80003d8 <HardFault_Handler+0xc>)
 80003d2:	f000 fb5b 	bl	8000a8c <iprintf>
 80003d6:	e7fb      	b.n	80003d0 <HardFault_Handler+0x4>
 80003d8:	080017b4 	.word	0x080017b4

080003dc <UsageFault_Handler>:
	    }
}


void UsageFault_Handler(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
    while (1)
    {
        printf("UsageFault occurred\n\r");
 80003e0:	4801      	ldr	r0, [pc, #4]	@ (80003e8 <UsageFault_Handler+0xc>)
 80003e2:	f000 fb53 	bl	8000a8c <iprintf>
 80003e6:	e7fb      	b.n	80003e0 <UsageFault_Handler+0x4>
 80003e8:	080017cc 	.word	0x080017cc

080003ec <BusFault_Handler>:
    }
}

void BusFault_Handler(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
    while (1)
    {
        printf("BusFault occurred\n\r");
 80003f0:	4801      	ldr	r0, [pc, #4]	@ (80003f8 <BusFault_Handler+0xc>)
 80003f2:	f000 fb4b 	bl	8000a8c <iprintf>
 80003f6:	e7fb      	b.n	80003f0 <BusFault_Handler+0x4>
 80003f8:	080017e4 	.word	0x080017e4

080003fc <MemManage_Handler>:
    }
}

void MemManage_Handler(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
    while (1)
    {
        printf("Memory Management Fault occurred\n\r");
 8000400:	4801      	ldr	r0, [pc, #4]	@ (8000408 <MemManage_Handler+0xc>)
 8000402:	f000 fb43 	bl	8000a8c <iprintf>
 8000406:	e7fb      	b.n	8000400 <MemManage_Handler+0x4>
 8000408:	080017f8 	.word	0x080017f8

0800040c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
 8000412:	60f8      	str	r0, [r7, #12]
 8000414:	60b9      	str	r1, [r7, #8]
 8000416:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000418:	2300      	movs	r3, #0
 800041a:	617b      	str	r3, [r7, #20]
 800041c:	e00a      	b.n	8000434 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800041e:	f3af 8000 	nop.w
 8000422:	4601      	mov	r1, r0
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	1c5a      	adds	r2, r3, #1
 8000428:	60ba      	str	r2, [r7, #8]
 800042a:	b2ca      	uxtb	r2, r1
 800042c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	3301      	adds	r3, #1
 8000432:	617b      	str	r3, [r7, #20]
 8000434:	697a      	ldr	r2, [r7, #20]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	429a      	cmp	r2, r3
 800043a:	dbf0      	blt.n	800041e <_read+0x12>
  }

  return len;
 800043c:	687b      	ldr	r3, [r7, #4]
}
 800043e:	4618      	mov	r0, r3
 8000440:	3718      	adds	r7, #24
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}

08000446 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000446:	b580      	push	{r7, lr}
 8000448:	b086      	sub	sp, #24
 800044a:	af00      	add	r7, sp, #0
 800044c:	60f8      	str	r0, [r7, #12]
 800044e:	60b9      	str	r1, [r7, #8]
 8000450:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]
 8000456:	e009      	b.n	800046c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	1c5a      	adds	r2, r3, #1
 800045c:	60ba      	str	r2, [r7, #8]
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	4618      	mov	r0, r3
 8000462:	f000 f991 	bl	8000788 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	3301      	adds	r3, #1
 800046a:	617b      	str	r3, [r7, #20]
 800046c:	697a      	ldr	r2, [r7, #20]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	429a      	cmp	r2, r3
 8000472:	dbf1      	blt.n	8000458 <_write+0x12>
  }
  return len;
 8000474:	687b      	ldr	r3, [r7, #4]
}
 8000476:	4618      	mov	r0, r3
 8000478:	3718      	adds	r7, #24
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}

0800047e <_close>:

int _close(int file)
{
 800047e:	b480      	push	{r7}
 8000480:	b083      	sub	sp, #12
 8000482:	af00      	add	r7, sp, #0
 8000484:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000486:	f04f 33ff 	mov.w	r3, #4294967295
}
 800048a:	4618      	mov	r0, r3
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr

08000496 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000496:	b480      	push	{r7}
 8000498:	b083      	sub	sp, #12
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
 800049e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004a6:	605a      	str	r2, [r3, #4]
  return 0;
 80004a8:	2300      	movs	r3, #0
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr

080004b6 <_isatty>:

int _isatty(int file)
{
 80004b6:	b480      	push	{r7}
 80004b8:	b083      	sub	sp, #12
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004be:	2301      	movs	r3, #1
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004d8:	2300      	movs	r3, #0
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3714      	adds	r7, #20
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
	...

080004e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004f0:	4a14      	ldr	r2, [pc, #80]	@ (8000544 <_sbrk+0x5c>)
 80004f2:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <_sbrk+0x60>)
 80004f4:	1ad3      	subs	r3, r2, r3
 80004f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004fc:	4b13      	ldr	r3, [pc, #76]	@ (800054c <_sbrk+0x64>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d102      	bne.n	800050a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000504:	4b11      	ldr	r3, [pc, #68]	@ (800054c <_sbrk+0x64>)
 8000506:	4a12      	ldr	r2, [pc, #72]	@ (8000550 <_sbrk+0x68>)
 8000508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800050a:	4b10      	ldr	r3, [pc, #64]	@ (800054c <_sbrk+0x64>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4413      	add	r3, r2
 8000512:	693a      	ldr	r2, [r7, #16]
 8000514:	429a      	cmp	r2, r3
 8000516:	d207      	bcs.n	8000528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000518:	f000 fb5c 	bl	8000bd4 <__errno>
 800051c:	4603      	mov	r3, r0
 800051e:	220c      	movs	r2, #12
 8000520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000522:	f04f 33ff 	mov.w	r3, #4294967295
 8000526:	e009      	b.n	800053c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000528:	4b08      	ldr	r3, [pc, #32]	@ (800054c <_sbrk+0x64>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800052e:	4b07      	ldr	r3, [pc, #28]	@ (800054c <_sbrk+0x64>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4413      	add	r3, r2
 8000536:	4a05      	ldr	r2, [pc, #20]	@ (800054c <_sbrk+0x64>)
 8000538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800053a:	68fb      	ldr	r3, [r7, #12]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3718      	adds	r7, #24
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20018000 	.word	0x20018000
 8000548:	00000400 	.word	0x00000400
 800054c:	20000084 	.word	0x20000084
 8000550:	200001d8 	.word	0x200001d8

08000554 <systickDelayMicroSec>:
#define CTRL_ENABLE					(1U<<0)
#define CTRL_CLKSRC					(1U<<2)
#define CTRL_COUNTFLAG				(1U<<16)

void systickDelayMicroSec(int delay)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	/*Reload with number of clocks per millisecond*/
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 800055c:	4b11      	ldr	r3, [pc, #68]	@ (80005a4 <systickDelayMicroSec+0x50>)
 800055e:	2210      	movs	r2, #16
 8000560:	605a      	str	r2, [r3, #4]

	/*Clear systick current value register*/
	SysTick->VAL = 0;
 8000562:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <systickDelayMicroSec+0x50>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
	/*Enable systick and select internal clk src*/
	SysTick->CTRL = (CTRL_ENABLE | CTRL_CLKSRC);
 8000568:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <systickDelayMicroSec+0x50>)
 800056a:	2205      	movs	r2, #5
 800056c:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < delay; i++)
 800056e:	2300      	movs	r3, #0
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	e009      	b.n	8000588 <systickDelayMicroSec+0x34>
	{
		/*Wait until the COUNTFLAG is set*/
		while(!(SysTick->CTRL & CTRL_COUNTFLAG));
 8000574:	bf00      	nop
 8000576:	4b0b      	ldr	r3, [pc, #44]	@ (80005a4 <systickDelayMicroSec+0x50>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0f9      	beq.n	8000576 <systickDelayMicroSec+0x22>
	for(int i = 0; i < delay; i++)
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	3301      	adds	r3, #1
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fa      	ldr	r2, [r7, #12]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	429a      	cmp	r2, r3
 800058e:	dbf1      	blt.n	8000574 <systickDelayMicroSec+0x20>
	}
	SysTick->CTRL = 0;
 8000590:	4b04      	ldr	r3, [pc, #16]	@ (80005a4 <systickDelayMicroSec+0x50>)
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	e000e010 	.word	0xe000e010

080005a8 <systickDelayMs>:


void systickDelayMs(int delay)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	/*Reload with number of clocks per millisecond*/
	SysTick->LOAD = 16000;
 80005b0:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <systickDelayMs+0x50>)
 80005b2:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80005b6:	605a      	str	r2, [r3, #4]

	/*Clear systick current value register*/
	SysTick->VAL = 0;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <systickDelayMs+0x50>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
	/*Enable systick and select internal clk src*/
	SysTick->CTRL = (CTRL_ENABLE | CTRL_CLKSRC);
 80005be:	4b0e      	ldr	r3, [pc, #56]	@ (80005f8 <systickDelayMs+0x50>)
 80005c0:	2205      	movs	r2, #5
 80005c2:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < delay; i++)
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	e009      	b.n	80005de <systickDelayMs+0x36>
	{
		/*Wait until the COUNTFLAG is set*/
		while(!(SysTick->CTRL & CTRL_COUNTFLAG));
 80005ca:	bf00      	nop
 80005cc:	4b0a      	ldr	r3, [pc, #40]	@ (80005f8 <systickDelayMs+0x50>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d0f9      	beq.n	80005cc <systickDelayMs+0x24>
	for(int i = 0; i < delay; i++)
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	3301      	adds	r3, #1
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	dbf1      	blt.n	80005ca <systickDelayMs+0x22>
	}
	SysTick->CTRL = 0;
 80005e6:	4b04      	ldr	r3, [pc, #16]	@ (80005f8 <systickDelayMs+0x50>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
}
 80005ec:	bf00      	nop
 80005ee:	3714      	adds	r7, #20
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e010 	.word	0xe000e010

080005fc <__NVIC_EnableIRQ>:
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	2b00      	cmp	r3, #0
 800060c:	db0b      	blt.n	8000626 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	f003 021f 	and.w	r2, r3, #31
 8000614:	4907      	ldr	r1, [pc, #28]	@ (8000634 <__NVIC_EnableIRQ+0x38>)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	095b      	lsrs	r3, r3, #5
 800061c:	2001      	movs	r0, #1
 800061e:	fa00 f202 	lsl.w	r2, r0, r2
 8000622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000e100 	.word	0xe000e100

08000638 <tim3_pa6_input_capture>:
//	TIM2->CR1 = CR1_CEN;
//}


void tim3_pa6_input_capture(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
	/*Enable Clock Access*/
	RCC->AHB1ENR |= (1U<<0);
 800063c:	4b24      	ldr	r3, [pc, #144]	@ (80006d0 <tim3_pa6_input_capture+0x98>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000640:	4a23      	ldr	r2, [pc, #140]	@ (80006d0 <tim3_pa6_input_capture+0x98>)
 8000642:	f043 0301 	orr.w	r3, r3, #1
 8000646:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set to alternate function mode*/
	GPIOA->MODER |= (1U<<13);
 8000648:	4b22      	ldr	r3, [pc, #136]	@ (80006d4 <tim3_pa6_input_capture+0x9c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a21      	ldr	r2, [pc, #132]	@ (80006d4 <tim3_pa6_input_capture+0x9c>)
 800064e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000652:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<12);
 8000654:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <tim3_pa6_input_capture+0x9c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a1e      	ldr	r2, [pc, #120]	@ (80006d4 <tim3_pa6_input_capture+0x9c>)
 800065a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800065e:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF01*/
	GPIOA->AFR[0] &=~(1U<<27);
 8000660:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <tim3_pa6_input_capture+0x9c>)
 8000662:	6a1b      	ldr	r3, [r3, #32]
 8000664:	4a1b      	ldr	r2, [pc, #108]	@ (80006d4 <tim3_pa6_input_capture+0x9c>)
 8000666:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800066a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<26);
 800066c:	4b19      	ldr	r3, [pc, #100]	@ (80006d4 <tim3_pa6_input_capture+0x9c>)
 800066e:	6a1b      	ldr	r3, [r3, #32]
 8000670:	4a18      	ldr	r2, [pc, #96]	@ (80006d4 <tim3_pa6_input_capture+0x9c>)
 8000672:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000676:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<25);
 8000678:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <tim3_pa6_input_capture+0x9c>)
 800067a:	6a1b      	ldr	r3, [r3, #32]
 800067c:	4a15      	ldr	r2, [pc, #84]	@ (80006d4 <tim3_pa6_input_capture+0x9c>)
 800067e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000682:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<24);
 8000684:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <tim3_pa6_input_capture+0x9c>)
 8000686:	6a1b      	ldr	r3, [r3, #32]
 8000688:	4a12      	ldr	r2, [pc, #72]	@ (80006d4 <tim3_pa6_input_capture+0x9c>)
 800068a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800068e:	6213      	str	r3, [r2, #32]

	/*Enable clock access to tim3*/
	RCC->APB1ENR |= TIM3EN;
 8000690:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <tim3_pa6_input_capture+0x98>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	4a0e      	ldr	r2, [pc, #56]	@ (80006d0 <tim3_pa6_input_capture+0x98>)
 8000696:	f043 0302 	orr.w	r3, r3, #2
 800069a:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Set the prescaler value*/
	TIM3->PSC = 800 - 1;
 800069c:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <tim3_pa6_input_capture+0xa0>)
 800069e:	f240 321f 	movw	r2, #799	@ 0x31f
 80006a2:	629a      	str	r2, [r3, #40]	@ 0x28

	/*Setting the auto reload value*/
	TIM3->ARR = 0xFFFF;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <tim3_pa6_input_capture+0xa0>)
 80006a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006aa:	62da      	str	r2, [r3, #44]	@ 0x2c

	/*Set CH1 to input capture mode*/
	TIM3->CCMR1 = CC1S;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <tim3_pa6_input_capture+0xa0>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	619a      	str	r2, [r3, #24]

	/*Set CH1 to capture at rising edge*/
	TIM3->CCER = 0x0000;
 80006b2:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <tim3_pa6_input_capture+0xa0>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]

	/*Enable Capture*/
	TIM3->CCER |= CCER_CC1E;
 80006b8:	4b07      	ldr	r3, [pc, #28]	@ (80006d8 <tim3_pa6_input_capture+0xa0>)
 80006ba:	6a1b      	ldr	r3, [r3, #32]
 80006bc:	4a06      	ldr	r2, [pc, #24]	@ (80006d8 <tim3_pa6_input_capture+0xa0>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6213      	str	r3, [r2, #32]

}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40020000 	.word	0x40020000
 80006d8:	40000400 	.word	0x40000400

080006dc <tim3_pa7_input_capture>:

void tim3_pa7_input_capture(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	/*Enable Clock Access*/
	RCC->AHB1ENR |= (1U<<0);
 80006e0:	4b26      	ldr	r3, [pc, #152]	@ (800077c <tim3_pa7_input_capture+0xa0>)
 80006e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e4:	4a25      	ldr	r2, [pc, #148]	@ (800077c <tim3_pa7_input_capture+0xa0>)
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set to alternate function mode*/
	GPIOA->MODER |= (1U<<15);
 80006ec:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <tim3_pa7_input_capture+0xa4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a23      	ldr	r2, [pc, #140]	@ (8000780 <tim3_pa7_input_capture+0xa4>)
 80006f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006f6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<14);
 80006f8:	4b21      	ldr	r3, [pc, #132]	@ (8000780 <tim3_pa7_input_capture+0xa4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a20      	ldr	r2, [pc, #128]	@ (8000780 <tim3_pa7_input_capture+0xa4>)
 80006fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000702:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF01*/
	GPIOA->AFR[0] &=~(1U<<31);
 8000704:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <tim3_pa7_input_capture+0xa4>)
 8000706:	6a1b      	ldr	r3, [r3, #32]
 8000708:	4a1d      	ldr	r2, [pc, #116]	@ (8000780 <tim3_pa7_input_capture+0xa4>)
 800070a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800070e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<30);
 8000710:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <tim3_pa7_input_capture+0xa4>)
 8000712:	6a1b      	ldr	r3, [r3, #32]
 8000714:	4a1a      	ldr	r2, [pc, #104]	@ (8000780 <tim3_pa7_input_capture+0xa4>)
 8000716:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800071a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<29);
 800071c:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <tim3_pa7_input_capture+0xa4>)
 800071e:	6a1b      	ldr	r3, [r3, #32]
 8000720:	4a17      	ldr	r2, [pc, #92]	@ (8000780 <tim3_pa7_input_capture+0xa4>)
 8000722:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000726:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<28);
 8000728:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <tim3_pa7_input_capture+0xa4>)
 800072a:	6a1b      	ldr	r3, [r3, #32]
 800072c:	4a14      	ldr	r2, [pc, #80]	@ (8000780 <tim3_pa7_input_capture+0xa4>)
 800072e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000732:	6213      	str	r3, [r2, #32]
	/*TIM3->PSC = 16000 - 1;*/

	/*Setting the auto reload value*/
	/*TIM3->ARR = 0xFFFF;*/
	/*Set CH1 to input capture mode*/
	TIM3->CCMR1 |= CC2S;
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <tim3_pa7_input_capture+0xa8>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a12      	ldr	r2, [pc, #72]	@ (8000784 <tim3_pa7_input_capture+0xa8>)
 800073a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800073e:	6193      	str	r3, [r2, #24]

	/*Set CH1 to capture at falling edge*/
	TIM3->CCER |= CC2P;
 8000740:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <tim3_pa7_input_capture+0xa8>)
 8000742:	6a1b      	ldr	r3, [r3, #32]
 8000744:	4a0f      	ldr	r2, [pc, #60]	@ (8000784 <tim3_pa7_input_capture+0xa8>)
 8000746:	f043 0320 	orr.w	r3, r3, #32
 800074a:	6213      	str	r3, [r2, #32]

	/*Enable Capture*/
	TIM3->CCER |= CCER_CC2E;
 800074c:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <tim3_pa7_input_capture+0xa8>)
 800074e:	6a1b      	ldr	r3, [r3, #32]
 8000750:	4a0c      	ldr	r2, [pc, #48]	@ (8000784 <tim3_pa7_input_capture+0xa8>)
 8000752:	f043 0310 	orr.w	r3, r3, #16
 8000756:	6213      	str	r3, [r2, #32]

	/*Enable timer*/
	TIM3->CR1 |= CR1_CEN;
 8000758:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <tim3_pa7_input_capture+0xa8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a09      	ldr	r2, [pc, #36]	@ (8000784 <tim3_pa7_input_capture+0xa8>)
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	6013      	str	r3, [r2, #0]

	/*Enable TIM Interrupt*/
	TIM3->DIER |= (DIER_UIE | DIER_CC1IE | DIER_CC2IE);
 8000764:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <tim3_pa7_input_capture+0xa8>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	4a06      	ldr	r2, [pc, #24]	@ (8000784 <tim3_pa7_input_capture+0xa8>)
 800076a:	f043 0307 	orr.w	r3, r3, #7
 800076e:	60d3      	str	r3, [r2, #12]
	/*Enable TIM Interrupt in NVIC*/
	NVIC_EnableIRQ(TIM3_IRQn);
 8000770:	201d      	movs	r0, #29
 8000772:	f7ff ff43 	bl	80005fc <__NVIC_EnableIRQ>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40020000 	.word	0x40020000
 8000784:	40000400 	.word	0x40000400

08000788 <__io_putchar>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);

int __io_putchar(int ch)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f851 	bl	8000838 <uart2_write>
	return ch;
 8000796:	687b      	ldr	r3, [r7, #4]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <uart2_tx_init>:
	USART2->CR1 |= CR1_UE;
}


void uart2_tx_init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	/******Configure UART gpio pins******/
	RCC->AHB1ENR |= GPIOAEN;
 80007a4:	4b20      	ldr	r3, [pc, #128]	@ (8000828 <uart2_tx_init+0x88>)
 80007a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a8:	4a1f      	ldr	r2, [pc, #124]	@ (8000828 <uart2_tx_init+0x88>)
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER |= (1U<<5);
 80007b0:	4b1e      	ldr	r3, [pc, #120]	@ (800082c <uart2_tx_init+0x8c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a1d      	ldr	r2, [pc, #116]	@ (800082c <uart2_tx_init+0x8c>)
 80007b6:	f043 0320 	orr.w	r3, r3, #32
 80007ba:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<4);
 80007bc:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <uart2_tx_init+0x8c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a1a      	ldr	r2, [pc, #104]	@ (800082c <uart2_tx_init+0x8c>)
 80007c2:	f023 0310 	bic.w	r3, r3, #16
 80007c6:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &=~(1U<<11);
 80007c8:	4b18      	ldr	r3, [pc, #96]	@ (800082c <uart2_tx_init+0x8c>)
 80007ca:	6a1b      	ldr	r3, [r3, #32]
 80007cc:	4a17      	ldr	r2, [pc, #92]	@ (800082c <uart2_tx_init+0x8c>)
 80007ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80007d2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80007d4:	4b15      	ldr	r3, [pc, #84]	@ (800082c <uart2_tx_init+0x8c>)
 80007d6:	6a1b      	ldr	r3, [r3, #32]
 80007d8:	4a14      	ldr	r2, [pc, #80]	@ (800082c <uart2_tx_init+0x8c>)
 80007da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007de:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80007e0:	4b12      	ldr	r3, [pc, #72]	@ (800082c <uart2_tx_init+0x8c>)
 80007e2:	6a1b      	ldr	r3, [r3, #32]
 80007e4:	4a11      	ldr	r2, [pc, #68]	@ (800082c <uart2_tx_init+0x8c>)
 80007e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007ea:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<8);
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <uart2_tx_init+0x8c>)
 80007ee:	6a1b      	ldr	r3, [r3, #32]
 80007f0:	4a0e      	ldr	r2, [pc, #56]	@ (800082c <uart2_tx_init+0x8c>)
 80007f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007f6:	6213      	str	r3, [r2, #32]


	/******Configure UART module******/
	/*Enable clock access to uart2*/
	RCC->APB1ENR |= UART2EN;
 80007f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <uart2_tx_init+0x88>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000828 <uart2_tx_init+0x88>)
 80007fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000802:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000804:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000808:	4909      	ldr	r1, [pc, #36]	@ (8000830 <uart2_tx_init+0x90>)
 800080a:	480a      	ldr	r0, [pc, #40]	@ (8000834 <uart2_tx_init+0x94>)
 800080c:	f000 f82c 	bl	8000868 <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = CR1_TE;
 8000810:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <uart2_tx_init+0x94>)
 8000812:	2208      	movs	r2, #8
 8000814:	60da      	str	r2, [r3, #12]

	/*Enable UART module*/
	USART2->CR1 |= CR1_UE;
 8000816:	4b07      	ldr	r3, [pc, #28]	@ (8000834 <uart2_tx_init+0x94>)
 8000818:	68db      	ldr	r3, [r3, #12]
 800081a:	4a06      	ldr	r2, [pc, #24]	@ (8000834 <uart2_tx_init+0x94>)
 800081c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000820:	60d3      	str	r3, [r2, #12]
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	40020000 	.word	0x40020000
 8000830:	00f42400 	.word	0x00f42400
 8000834:	40004400 	.word	0x40004400

08000838 <uart2_write>:
	/*Read the data register*/
	return USART2->DR;
}

void uart2_write(int ch)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE));
 8000840:	bf00      	nop
 8000842:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <uart2_write+0x2c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084a:	2b00      	cmp	r3, #0
 800084c:	d0f9      	beq.n	8000842 <uart2_write+0xa>
	/*Write to the transmit data register*/
	USART2->DR = (ch & 0xFF);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a04      	ldr	r2, [pc, #16]	@ (8000864 <uart2_write+0x2c>)
 8000852:	b2db      	uxtb	r3, r3
 8000854:	6053      	str	r3, [r2, #4]
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40004400 	.word	0x40004400

08000868 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000874:	6879      	ldr	r1, [r7, #4]
 8000876:	68b8      	ldr	r0, [r7, #8]
 8000878:	f000 f808 	bl	800088c <compute_uart_bd>
 800087c:	4603      	mov	r3, r0
 800087e:	461a      	mov	r2, r3
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	609a      	str	r2, [r3, #8]
}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	085a      	lsrs	r2, r3, #1
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	441a      	add	r2, r3
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a4:	b29b      	uxth	r3, r3
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008b4:	480d      	ldr	r0, [pc, #52]	@ (80008ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008bc:	480c      	ldr	r0, [pc, #48]	@ (80008f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80008be:	490d      	ldr	r1, [pc, #52]	@ (80008f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008c0:	4a0d      	ldr	r2, [pc, #52]	@ (80008f8 <LoopForever+0xe>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c4:	e002      	b.n	80008cc <LoopCopyDataInit>

080008c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ca:	3304      	adds	r3, #4

080008cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d0:	d3f9      	bcc.n	80008c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d2:	4a0a      	ldr	r2, [pc, #40]	@ (80008fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000900 <LoopForever+0x16>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d8:	e001      	b.n	80008de <LoopFillZerobss>

080008da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008dc:	3204      	adds	r2, #4

080008de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e0:	d3fb      	bcc.n	80008da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008e2:	f000 f97d 	bl	8000be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008e6:	f7ff fce9 	bl	80002bc <main>

080008ea <LoopForever>:

LoopForever:
  b LoopForever
 80008ea:	e7fe      	b.n	80008ea <LoopForever>
  ldr   r0, =_estack
 80008ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008f8:	08001860 	.word	0x08001860
  ldr r2, =_sbss
 80008fc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000900:	200001d4 	.word	0x200001d4

08000904 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000904:	e7fe      	b.n	8000904 <ADC_IRQHandler>
	...

08000908 <std>:
 8000908:	2300      	movs	r3, #0
 800090a:	b510      	push	{r4, lr}
 800090c:	4604      	mov	r4, r0
 800090e:	e9c0 3300 	strd	r3, r3, [r0]
 8000912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000916:	6083      	str	r3, [r0, #8]
 8000918:	8181      	strh	r1, [r0, #12]
 800091a:	6643      	str	r3, [r0, #100]	@ 0x64
 800091c:	81c2      	strh	r2, [r0, #14]
 800091e:	6183      	str	r3, [r0, #24]
 8000920:	4619      	mov	r1, r3
 8000922:	2208      	movs	r2, #8
 8000924:	305c      	adds	r0, #92	@ 0x5c
 8000926:	f000 f906 	bl	8000b36 <memset>
 800092a:	4b0d      	ldr	r3, [pc, #52]	@ (8000960 <std+0x58>)
 800092c:	6263      	str	r3, [r4, #36]	@ 0x24
 800092e:	4b0d      	ldr	r3, [pc, #52]	@ (8000964 <std+0x5c>)
 8000930:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000932:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <std+0x60>)
 8000934:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000936:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <std+0x64>)
 8000938:	6323      	str	r3, [r4, #48]	@ 0x30
 800093a:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <std+0x68>)
 800093c:	6224      	str	r4, [r4, #32]
 800093e:	429c      	cmp	r4, r3
 8000940:	d006      	beq.n	8000950 <std+0x48>
 8000942:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000946:	4294      	cmp	r4, r2
 8000948:	d002      	beq.n	8000950 <std+0x48>
 800094a:	33d0      	adds	r3, #208	@ 0xd0
 800094c:	429c      	cmp	r4, r3
 800094e:	d105      	bne.n	800095c <std+0x54>
 8000950:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000958:	f000 b966 	b.w	8000c28 <__retarget_lock_init_recursive>
 800095c:	bd10      	pop	{r4, pc}
 800095e:	bf00      	nop
 8000960:	08000ab1 	.word	0x08000ab1
 8000964:	08000ad3 	.word	0x08000ad3
 8000968:	08000b0b 	.word	0x08000b0b
 800096c:	08000b2f 	.word	0x08000b2f
 8000970:	20000088 	.word	0x20000088

08000974 <stdio_exit_handler>:
 8000974:	4a02      	ldr	r2, [pc, #8]	@ (8000980 <stdio_exit_handler+0xc>)
 8000976:	4903      	ldr	r1, [pc, #12]	@ (8000984 <stdio_exit_handler+0x10>)
 8000978:	4803      	ldr	r0, [pc, #12]	@ (8000988 <stdio_exit_handler+0x14>)
 800097a:	f000 b869 	b.w	8000a50 <_fwalk_sglue>
 800097e:	bf00      	nop
 8000980:	20000000 	.word	0x20000000
 8000984:	080014c9 	.word	0x080014c9
 8000988:	20000010 	.word	0x20000010

0800098c <cleanup_stdio>:
 800098c:	6841      	ldr	r1, [r0, #4]
 800098e:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <cleanup_stdio+0x34>)
 8000990:	4299      	cmp	r1, r3
 8000992:	b510      	push	{r4, lr}
 8000994:	4604      	mov	r4, r0
 8000996:	d001      	beq.n	800099c <cleanup_stdio+0x10>
 8000998:	f000 fd96 	bl	80014c8 <_fflush_r>
 800099c:	68a1      	ldr	r1, [r4, #8]
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <cleanup_stdio+0x38>)
 80009a0:	4299      	cmp	r1, r3
 80009a2:	d002      	beq.n	80009aa <cleanup_stdio+0x1e>
 80009a4:	4620      	mov	r0, r4
 80009a6:	f000 fd8f 	bl	80014c8 <_fflush_r>
 80009aa:	68e1      	ldr	r1, [r4, #12]
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <cleanup_stdio+0x3c>)
 80009ae:	4299      	cmp	r1, r3
 80009b0:	d004      	beq.n	80009bc <cleanup_stdio+0x30>
 80009b2:	4620      	mov	r0, r4
 80009b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009b8:	f000 bd86 	b.w	80014c8 <_fflush_r>
 80009bc:	bd10      	pop	{r4, pc}
 80009be:	bf00      	nop
 80009c0:	20000088 	.word	0x20000088
 80009c4:	200000f0 	.word	0x200000f0
 80009c8:	20000158 	.word	0x20000158

080009cc <global_stdio_init.part.0>:
 80009cc:	b510      	push	{r4, lr}
 80009ce:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <global_stdio_init.part.0+0x30>)
 80009d0:	4c0b      	ldr	r4, [pc, #44]	@ (8000a00 <global_stdio_init.part.0+0x34>)
 80009d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000a04 <global_stdio_init.part.0+0x38>)
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	4620      	mov	r0, r4
 80009d8:	2200      	movs	r2, #0
 80009da:	2104      	movs	r1, #4
 80009dc:	f7ff ff94 	bl	8000908 <std>
 80009e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80009e4:	2201      	movs	r2, #1
 80009e6:	2109      	movs	r1, #9
 80009e8:	f7ff ff8e 	bl	8000908 <std>
 80009ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80009f0:	2202      	movs	r2, #2
 80009f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009f6:	2112      	movs	r1, #18
 80009f8:	f7ff bf86 	b.w	8000908 <std>
 80009fc:	200001c0 	.word	0x200001c0
 8000a00:	20000088 	.word	0x20000088
 8000a04:	08000975 	.word	0x08000975

08000a08 <__sfp_lock_acquire>:
 8000a08:	4801      	ldr	r0, [pc, #4]	@ (8000a10 <__sfp_lock_acquire+0x8>)
 8000a0a:	f000 b90e 	b.w	8000c2a <__retarget_lock_acquire_recursive>
 8000a0e:	bf00      	nop
 8000a10:	200001c9 	.word	0x200001c9

08000a14 <__sfp_lock_release>:
 8000a14:	4801      	ldr	r0, [pc, #4]	@ (8000a1c <__sfp_lock_release+0x8>)
 8000a16:	f000 b909 	b.w	8000c2c <__retarget_lock_release_recursive>
 8000a1a:	bf00      	nop
 8000a1c:	200001c9 	.word	0x200001c9

08000a20 <__sinit>:
 8000a20:	b510      	push	{r4, lr}
 8000a22:	4604      	mov	r4, r0
 8000a24:	f7ff fff0 	bl	8000a08 <__sfp_lock_acquire>
 8000a28:	6a23      	ldr	r3, [r4, #32]
 8000a2a:	b11b      	cbz	r3, 8000a34 <__sinit+0x14>
 8000a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a30:	f7ff bff0 	b.w	8000a14 <__sfp_lock_release>
 8000a34:	4b04      	ldr	r3, [pc, #16]	@ (8000a48 <__sinit+0x28>)
 8000a36:	6223      	str	r3, [r4, #32]
 8000a38:	4b04      	ldr	r3, [pc, #16]	@ (8000a4c <__sinit+0x2c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d1f5      	bne.n	8000a2c <__sinit+0xc>
 8000a40:	f7ff ffc4 	bl	80009cc <global_stdio_init.part.0>
 8000a44:	e7f2      	b.n	8000a2c <__sinit+0xc>
 8000a46:	bf00      	nop
 8000a48:	0800098d 	.word	0x0800098d
 8000a4c:	200001c0 	.word	0x200001c0

08000a50 <_fwalk_sglue>:
 8000a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a54:	4607      	mov	r7, r0
 8000a56:	4688      	mov	r8, r1
 8000a58:	4614      	mov	r4, r2
 8000a5a:	2600      	movs	r6, #0
 8000a5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a60:	f1b9 0901 	subs.w	r9, r9, #1
 8000a64:	d505      	bpl.n	8000a72 <_fwalk_sglue+0x22>
 8000a66:	6824      	ldr	r4, [r4, #0]
 8000a68:	2c00      	cmp	r4, #0
 8000a6a:	d1f7      	bne.n	8000a5c <_fwalk_sglue+0xc>
 8000a6c:	4630      	mov	r0, r6
 8000a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a72:	89ab      	ldrh	r3, [r5, #12]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d907      	bls.n	8000a88 <_fwalk_sglue+0x38>
 8000a78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	d003      	beq.n	8000a88 <_fwalk_sglue+0x38>
 8000a80:	4629      	mov	r1, r5
 8000a82:	4638      	mov	r0, r7
 8000a84:	47c0      	blx	r8
 8000a86:	4306      	orrs	r6, r0
 8000a88:	3568      	adds	r5, #104	@ 0x68
 8000a8a:	e7e9      	b.n	8000a60 <_fwalk_sglue+0x10>

08000a8c <iprintf>:
 8000a8c:	b40f      	push	{r0, r1, r2, r3}
 8000a8e:	b507      	push	{r0, r1, r2, lr}
 8000a90:	4906      	ldr	r1, [pc, #24]	@ (8000aac <iprintf+0x20>)
 8000a92:	ab04      	add	r3, sp, #16
 8000a94:	6808      	ldr	r0, [r1, #0]
 8000a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a9a:	6881      	ldr	r1, [r0, #8]
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	f000 f9e9 	bl	8000e74 <_vfiprintf_r>
 8000aa2:	b003      	add	sp, #12
 8000aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr
 8000aac:	2000000c 	.word	0x2000000c

08000ab0 <__sread>:
 8000ab0:	b510      	push	{r4, lr}
 8000ab2:	460c      	mov	r4, r1
 8000ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ab8:	f000 f868 	bl	8000b8c <_read_r>
 8000abc:	2800      	cmp	r0, #0
 8000abe:	bfab      	itete	ge
 8000ac0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000ac2:	89a3      	ldrhlt	r3, [r4, #12]
 8000ac4:	181b      	addge	r3, r3, r0
 8000ac6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000aca:	bfac      	ite	ge
 8000acc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000ace:	81a3      	strhlt	r3, [r4, #12]
 8000ad0:	bd10      	pop	{r4, pc}

08000ad2 <__swrite>:
 8000ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ad6:	461f      	mov	r7, r3
 8000ad8:	898b      	ldrh	r3, [r1, #12]
 8000ada:	05db      	lsls	r3, r3, #23
 8000adc:	4605      	mov	r5, r0
 8000ade:	460c      	mov	r4, r1
 8000ae0:	4616      	mov	r6, r2
 8000ae2:	d505      	bpl.n	8000af0 <__swrite+0x1e>
 8000ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ae8:	2302      	movs	r3, #2
 8000aea:	2200      	movs	r2, #0
 8000aec:	f000 f83c 	bl	8000b68 <_lseek_r>
 8000af0:	89a3      	ldrh	r3, [r4, #12]
 8000af2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000af6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000afa:	81a3      	strh	r3, [r4, #12]
 8000afc:	4632      	mov	r2, r6
 8000afe:	463b      	mov	r3, r7
 8000b00:	4628      	mov	r0, r5
 8000b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000b06:	f000 b853 	b.w	8000bb0 <_write_r>

08000b0a <__sseek>:
 8000b0a:	b510      	push	{r4, lr}
 8000b0c:	460c      	mov	r4, r1
 8000b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b12:	f000 f829 	bl	8000b68 <_lseek_r>
 8000b16:	1c43      	adds	r3, r0, #1
 8000b18:	89a3      	ldrh	r3, [r4, #12]
 8000b1a:	bf15      	itete	ne
 8000b1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000b1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000b22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000b26:	81a3      	strheq	r3, [r4, #12]
 8000b28:	bf18      	it	ne
 8000b2a:	81a3      	strhne	r3, [r4, #12]
 8000b2c:	bd10      	pop	{r4, pc}

08000b2e <__sclose>:
 8000b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b32:	f000 b809 	b.w	8000b48 <_close_r>

08000b36 <memset>:
 8000b36:	4402      	add	r2, r0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d100      	bne.n	8000b40 <memset+0xa>
 8000b3e:	4770      	bx	lr
 8000b40:	f803 1b01 	strb.w	r1, [r3], #1
 8000b44:	e7f9      	b.n	8000b3a <memset+0x4>
	...

08000b48 <_close_r>:
 8000b48:	b538      	push	{r3, r4, r5, lr}
 8000b4a:	4d06      	ldr	r5, [pc, #24]	@ (8000b64 <_close_r+0x1c>)
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	4604      	mov	r4, r0
 8000b50:	4608      	mov	r0, r1
 8000b52:	602b      	str	r3, [r5, #0]
 8000b54:	f7ff fc93 	bl	800047e <_close>
 8000b58:	1c43      	adds	r3, r0, #1
 8000b5a:	d102      	bne.n	8000b62 <_close_r+0x1a>
 8000b5c:	682b      	ldr	r3, [r5, #0]
 8000b5e:	b103      	cbz	r3, 8000b62 <_close_r+0x1a>
 8000b60:	6023      	str	r3, [r4, #0]
 8000b62:	bd38      	pop	{r3, r4, r5, pc}
 8000b64:	200001c4 	.word	0x200001c4

08000b68 <_lseek_r>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4d07      	ldr	r5, [pc, #28]	@ (8000b88 <_lseek_r+0x20>)
 8000b6c:	4604      	mov	r4, r0
 8000b6e:	4608      	mov	r0, r1
 8000b70:	4611      	mov	r1, r2
 8000b72:	2200      	movs	r2, #0
 8000b74:	602a      	str	r2, [r5, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	f7ff fca8 	bl	80004cc <_lseek>
 8000b7c:	1c43      	adds	r3, r0, #1
 8000b7e:	d102      	bne.n	8000b86 <_lseek_r+0x1e>
 8000b80:	682b      	ldr	r3, [r5, #0]
 8000b82:	b103      	cbz	r3, 8000b86 <_lseek_r+0x1e>
 8000b84:	6023      	str	r3, [r4, #0]
 8000b86:	bd38      	pop	{r3, r4, r5, pc}
 8000b88:	200001c4 	.word	0x200001c4

08000b8c <_read_r>:
 8000b8c:	b538      	push	{r3, r4, r5, lr}
 8000b8e:	4d07      	ldr	r5, [pc, #28]	@ (8000bac <_read_r+0x20>)
 8000b90:	4604      	mov	r4, r0
 8000b92:	4608      	mov	r0, r1
 8000b94:	4611      	mov	r1, r2
 8000b96:	2200      	movs	r2, #0
 8000b98:	602a      	str	r2, [r5, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	f7ff fc36 	bl	800040c <_read>
 8000ba0:	1c43      	adds	r3, r0, #1
 8000ba2:	d102      	bne.n	8000baa <_read_r+0x1e>
 8000ba4:	682b      	ldr	r3, [r5, #0]
 8000ba6:	b103      	cbz	r3, 8000baa <_read_r+0x1e>
 8000ba8:	6023      	str	r3, [r4, #0]
 8000baa:	bd38      	pop	{r3, r4, r5, pc}
 8000bac:	200001c4 	.word	0x200001c4

08000bb0 <_write_r>:
 8000bb0:	b538      	push	{r3, r4, r5, lr}
 8000bb2:	4d07      	ldr	r5, [pc, #28]	@ (8000bd0 <_write_r+0x20>)
 8000bb4:	4604      	mov	r4, r0
 8000bb6:	4608      	mov	r0, r1
 8000bb8:	4611      	mov	r1, r2
 8000bba:	2200      	movs	r2, #0
 8000bbc:	602a      	str	r2, [r5, #0]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	f7ff fc41 	bl	8000446 <_write>
 8000bc4:	1c43      	adds	r3, r0, #1
 8000bc6:	d102      	bne.n	8000bce <_write_r+0x1e>
 8000bc8:	682b      	ldr	r3, [r5, #0]
 8000bca:	b103      	cbz	r3, 8000bce <_write_r+0x1e>
 8000bcc:	6023      	str	r3, [r4, #0]
 8000bce:	bd38      	pop	{r3, r4, r5, pc}
 8000bd0:	200001c4 	.word	0x200001c4

08000bd4 <__errno>:
 8000bd4:	4b01      	ldr	r3, [pc, #4]	@ (8000bdc <__errno+0x8>)
 8000bd6:	6818      	ldr	r0, [r3, #0]
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	2000000c 	.word	0x2000000c

08000be0 <__libc_init_array>:
 8000be0:	b570      	push	{r4, r5, r6, lr}
 8000be2:	4d0d      	ldr	r5, [pc, #52]	@ (8000c18 <__libc_init_array+0x38>)
 8000be4:	4c0d      	ldr	r4, [pc, #52]	@ (8000c1c <__libc_init_array+0x3c>)
 8000be6:	1b64      	subs	r4, r4, r5
 8000be8:	10a4      	asrs	r4, r4, #2
 8000bea:	2600      	movs	r6, #0
 8000bec:	42a6      	cmp	r6, r4
 8000bee:	d109      	bne.n	8000c04 <__libc_init_array+0x24>
 8000bf0:	4d0b      	ldr	r5, [pc, #44]	@ (8000c20 <__libc_init_array+0x40>)
 8000bf2:	4c0c      	ldr	r4, [pc, #48]	@ (8000c24 <__libc_init_array+0x44>)
 8000bf4:	f000 fdb8 	bl	8001768 <_init>
 8000bf8:	1b64      	subs	r4, r4, r5
 8000bfa:	10a4      	asrs	r4, r4, #2
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	42a6      	cmp	r6, r4
 8000c00:	d105      	bne.n	8000c0e <__libc_init_array+0x2e>
 8000c02:	bd70      	pop	{r4, r5, r6, pc}
 8000c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c08:	4798      	blx	r3
 8000c0a:	3601      	adds	r6, #1
 8000c0c:	e7ee      	b.n	8000bec <__libc_init_array+0xc>
 8000c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c12:	4798      	blx	r3
 8000c14:	3601      	adds	r6, #1
 8000c16:	e7f2      	b.n	8000bfe <__libc_init_array+0x1e>
 8000c18:	08001858 	.word	0x08001858
 8000c1c:	08001858 	.word	0x08001858
 8000c20:	08001858 	.word	0x08001858
 8000c24:	0800185c 	.word	0x0800185c

08000c28 <__retarget_lock_init_recursive>:
 8000c28:	4770      	bx	lr

08000c2a <__retarget_lock_acquire_recursive>:
 8000c2a:	4770      	bx	lr

08000c2c <__retarget_lock_release_recursive>:
 8000c2c:	4770      	bx	lr
	...

08000c30 <_free_r>:
 8000c30:	b538      	push	{r3, r4, r5, lr}
 8000c32:	4605      	mov	r5, r0
 8000c34:	2900      	cmp	r1, #0
 8000c36:	d041      	beq.n	8000cbc <_free_r+0x8c>
 8000c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c3c:	1f0c      	subs	r4, r1, #4
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	bfb8      	it	lt
 8000c42:	18e4      	addlt	r4, r4, r3
 8000c44:	f000 f8e0 	bl	8000e08 <__malloc_lock>
 8000c48:	4a1d      	ldr	r2, [pc, #116]	@ (8000cc0 <_free_r+0x90>)
 8000c4a:	6813      	ldr	r3, [r2, #0]
 8000c4c:	b933      	cbnz	r3, 8000c5c <_free_r+0x2c>
 8000c4e:	6063      	str	r3, [r4, #4]
 8000c50:	6014      	str	r4, [r2, #0]
 8000c52:	4628      	mov	r0, r5
 8000c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c58:	f000 b8dc 	b.w	8000e14 <__malloc_unlock>
 8000c5c:	42a3      	cmp	r3, r4
 8000c5e:	d908      	bls.n	8000c72 <_free_r+0x42>
 8000c60:	6820      	ldr	r0, [r4, #0]
 8000c62:	1821      	adds	r1, r4, r0
 8000c64:	428b      	cmp	r3, r1
 8000c66:	bf01      	itttt	eq
 8000c68:	6819      	ldreq	r1, [r3, #0]
 8000c6a:	685b      	ldreq	r3, [r3, #4]
 8000c6c:	1809      	addeq	r1, r1, r0
 8000c6e:	6021      	streq	r1, [r4, #0]
 8000c70:	e7ed      	b.n	8000c4e <_free_r+0x1e>
 8000c72:	461a      	mov	r2, r3
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	b10b      	cbz	r3, 8000c7c <_free_r+0x4c>
 8000c78:	42a3      	cmp	r3, r4
 8000c7a:	d9fa      	bls.n	8000c72 <_free_r+0x42>
 8000c7c:	6811      	ldr	r1, [r2, #0]
 8000c7e:	1850      	adds	r0, r2, r1
 8000c80:	42a0      	cmp	r0, r4
 8000c82:	d10b      	bne.n	8000c9c <_free_r+0x6c>
 8000c84:	6820      	ldr	r0, [r4, #0]
 8000c86:	4401      	add	r1, r0
 8000c88:	1850      	adds	r0, r2, r1
 8000c8a:	4283      	cmp	r3, r0
 8000c8c:	6011      	str	r1, [r2, #0]
 8000c8e:	d1e0      	bne.n	8000c52 <_free_r+0x22>
 8000c90:	6818      	ldr	r0, [r3, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	6053      	str	r3, [r2, #4]
 8000c96:	4408      	add	r0, r1
 8000c98:	6010      	str	r0, [r2, #0]
 8000c9a:	e7da      	b.n	8000c52 <_free_r+0x22>
 8000c9c:	d902      	bls.n	8000ca4 <_free_r+0x74>
 8000c9e:	230c      	movs	r3, #12
 8000ca0:	602b      	str	r3, [r5, #0]
 8000ca2:	e7d6      	b.n	8000c52 <_free_r+0x22>
 8000ca4:	6820      	ldr	r0, [r4, #0]
 8000ca6:	1821      	adds	r1, r4, r0
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	bf04      	itt	eq
 8000cac:	6819      	ldreq	r1, [r3, #0]
 8000cae:	685b      	ldreq	r3, [r3, #4]
 8000cb0:	6063      	str	r3, [r4, #4]
 8000cb2:	bf04      	itt	eq
 8000cb4:	1809      	addeq	r1, r1, r0
 8000cb6:	6021      	streq	r1, [r4, #0]
 8000cb8:	6054      	str	r4, [r2, #4]
 8000cba:	e7ca      	b.n	8000c52 <_free_r+0x22>
 8000cbc:	bd38      	pop	{r3, r4, r5, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200001d0 	.word	0x200001d0

08000cc4 <sbrk_aligned>:
 8000cc4:	b570      	push	{r4, r5, r6, lr}
 8000cc6:	4e0f      	ldr	r6, [pc, #60]	@ (8000d04 <sbrk_aligned+0x40>)
 8000cc8:	460c      	mov	r4, r1
 8000cca:	6831      	ldr	r1, [r6, #0]
 8000ccc:	4605      	mov	r5, r0
 8000cce:	b911      	cbnz	r1, 8000cd6 <sbrk_aligned+0x12>
 8000cd0:	f000 fcb6 	bl	8001640 <_sbrk_r>
 8000cd4:	6030      	str	r0, [r6, #0]
 8000cd6:	4621      	mov	r1, r4
 8000cd8:	4628      	mov	r0, r5
 8000cda:	f000 fcb1 	bl	8001640 <_sbrk_r>
 8000cde:	1c43      	adds	r3, r0, #1
 8000ce0:	d103      	bne.n	8000cea <sbrk_aligned+0x26>
 8000ce2:	f04f 34ff 	mov.w	r4, #4294967295
 8000ce6:	4620      	mov	r0, r4
 8000ce8:	bd70      	pop	{r4, r5, r6, pc}
 8000cea:	1cc4      	adds	r4, r0, #3
 8000cec:	f024 0403 	bic.w	r4, r4, #3
 8000cf0:	42a0      	cmp	r0, r4
 8000cf2:	d0f8      	beq.n	8000ce6 <sbrk_aligned+0x22>
 8000cf4:	1a21      	subs	r1, r4, r0
 8000cf6:	4628      	mov	r0, r5
 8000cf8:	f000 fca2 	bl	8001640 <_sbrk_r>
 8000cfc:	3001      	adds	r0, #1
 8000cfe:	d1f2      	bne.n	8000ce6 <sbrk_aligned+0x22>
 8000d00:	e7ef      	b.n	8000ce2 <sbrk_aligned+0x1e>
 8000d02:	bf00      	nop
 8000d04:	200001cc 	.word	0x200001cc

08000d08 <_malloc_r>:
 8000d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d0c:	1ccd      	adds	r5, r1, #3
 8000d0e:	f025 0503 	bic.w	r5, r5, #3
 8000d12:	3508      	adds	r5, #8
 8000d14:	2d0c      	cmp	r5, #12
 8000d16:	bf38      	it	cc
 8000d18:	250c      	movcc	r5, #12
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	db01      	blt.n	8000d24 <_malloc_r+0x1c>
 8000d20:	42a9      	cmp	r1, r5
 8000d22:	d904      	bls.n	8000d2e <_malloc_r+0x26>
 8000d24:	230c      	movs	r3, #12
 8000d26:	6033      	str	r3, [r6, #0]
 8000d28:	2000      	movs	r0, #0
 8000d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000e04 <_malloc_r+0xfc>
 8000d32:	f000 f869 	bl	8000e08 <__malloc_lock>
 8000d36:	f8d8 3000 	ldr.w	r3, [r8]
 8000d3a:	461c      	mov	r4, r3
 8000d3c:	bb44      	cbnz	r4, 8000d90 <_malloc_r+0x88>
 8000d3e:	4629      	mov	r1, r5
 8000d40:	4630      	mov	r0, r6
 8000d42:	f7ff ffbf 	bl	8000cc4 <sbrk_aligned>
 8000d46:	1c43      	adds	r3, r0, #1
 8000d48:	4604      	mov	r4, r0
 8000d4a:	d158      	bne.n	8000dfe <_malloc_r+0xf6>
 8000d4c:	f8d8 4000 	ldr.w	r4, [r8]
 8000d50:	4627      	mov	r7, r4
 8000d52:	2f00      	cmp	r7, #0
 8000d54:	d143      	bne.n	8000dde <_malloc_r+0xd6>
 8000d56:	2c00      	cmp	r4, #0
 8000d58:	d04b      	beq.n	8000df2 <_malloc_r+0xea>
 8000d5a:	6823      	ldr	r3, [r4, #0]
 8000d5c:	4639      	mov	r1, r7
 8000d5e:	4630      	mov	r0, r6
 8000d60:	eb04 0903 	add.w	r9, r4, r3
 8000d64:	f000 fc6c 	bl	8001640 <_sbrk_r>
 8000d68:	4581      	cmp	r9, r0
 8000d6a:	d142      	bne.n	8000df2 <_malloc_r+0xea>
 8000d6c:	6821      	ldr	r1, [r4, #0]
 8000d6e:	1a6d      	subs	r5, r5, r1
 8000d70:	4629      	mov	r1, r5
 8000d72:	4630      	mov	r0, r6
 8000d74:	f7ff ffa6 	bl	8000cc4 <sbrk_aligned>
 8000d78:	3001      	adds	r0, #1
 8000d7a:	d03a      	beq.n	8000df2 <_malloc_r+0xea>
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	442b      	add	r3, r5
 8000d80:	6023      	str	r3, [r4, #0]
 8000d82:	f8d8 3000 	ldr.w	r3, [r8]
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	bb62      	cbnz	r2, 8000de4 <_malloc_r+0xdc>
 8000d8a:	f8c8 7000 	str.w	r7, [r8]
 8000d8e:	e00f      	b.n	8000db0 <_malloc_r+0xa8>
 8000d90:	6822      	ldr	r2, [r4, #0]
 8000d92:	1b52      	subs	r2, r2, r5
 8000d94:	d420      	bmi.n	8000dd8 <_malloc_r+0xd0>
 8000d96:	2a0b      	cmp	r2, #11
 8000d98:	d917      	bls.n	8000dca <_malloc_r+0xc2>
 8000d9a:	1961      	adds	r1, r4, r5
 8000d9c:	42a3      	cmp	r3, r4
 8000d9e:	6025      	str	r5, [r4, #0]
 8000da0:	bf18      	it	ne
 8000da2:	6059      	strne	r1, [r3, #4]
 8000da4:	6863      	ldr	r3, [r4, #4]
 8000da6:	bf08      	it	eq
 8000da8:	f8c8 1000 	streq.w	r1, [r8]
 8000dac:	5162      	str	r2, [r4, r5]
 8000dae:	604b      	str	r3, [r1, #4]
 8000db0:	4630      	mov	r0, r6
 8000db2:	f000 f82f 	bl	8000e14 <__malloc_unlock>
 8000db6:	f104 000b 	add.w	r0, r4, #11
 8000dba:	1d23      	adds	r3, r4, #4
 8000dbc:	f020 0007 	bic.w	r0, r0, #7
 8000dc0:	1ac2      	subs	r2, r0, r3
 8000dc2:	bf1c      	itt	ne
 8000dc4:	1a1b      	subne	r3, r3, r0
 8000dc6:	50a3      	strne	r3, [r4, r2]
 8000dc8:	e7af      	b.n	8000d2a <_malloc_r+0x22>
 8000dca:	6862      	ldr	r2, [r4, #4]
 8000dcc:	42a3      	cmp	r3, r4
 8000dce:	bf0c      	ite	eq
 8000dd0:	f8c8 2000 	streq.w	r2, [r8]
 8000dd4:	605a      	strne	r2, [r3, #4]
 8000dd6:	e7eb      	b.n	8000db0 <_malloc_r+0xa8>
 8000dd8:	4623      	mov	r3, r4
 8000dda:	6864      	ldr	r4, [r4, #4]
 8000ddc:	e7ae      	b.n	8000d3c <_malloc_r+0x34>
 8000dde:	463c      	mov	r4, r7
 8000de0:	687f      	ldr	r7, [r7, #4]
 8000de2:	e7b6      	b.n	8000d52 <_malloc_r+0x4a>
 8000de4:	461a      	mov	r2, r3
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	42a3      	cmp	r3, r4
 8000dea:	d1fb      	bne.n	8000de4 <_malloc_r+0xdc>
 8000dec:	2300      	movs	r3, #0
 8000dee:	6053      	str	r3, [r2, #4]
 8000df0:	e7de      	b.n	8000db0 <_malloc_r+0xa8>
 8000df2:	230c      	movs	r3, #12
 8000df4:	6033      	str	r3, [r6, #0]
 8000df6:	4630      	mov	r0, r6
 8000df8:	f000 f80c 	bl	8000e14 <__malloc_unlock>
 8000dfc:	e794      	b.n	8000d28 <_malloc_r+0x20>
 8000dfe:	6005      	str	r5, [r0, #0]
 8000e00:	e7d6      	b.n	8000db0 <_malloc_r+0xa8>
 8000e02:	bf00      	nop
 8000e04:	200001d0 	.word	0x200001d0

08000e08 <__malloc_lock>:
 8000e08:	4801      	ldr	r0, [pc, #4]	@ (8000e10 <__malloc_lock+0x8>)
 8000e0a:	f7ff bf0e 	b.w	8000c2a <__retarget_lock_acquire_recursive>
 8000e0e:	bf00      	nop
 8000e10:	200001c8 	.word	0x200001c8

08000e14 <__malloc_unlock>:
 8000e14:	4801      	ldr	r0, [pc, #4]	@ (8000e1c <__malloc_unlock+0x8>)
 8000e16:	f7ff bf09 	b.w	8000c2c <__retarget_lock_release_recursive>
 8000e1a:	bf00      	nop
 8000e1c:	200001c8 	.word	0x200001c8

08000e20 <__sfputc_r>:
 8000e20:	6893      	ldr	r3, [r2, #8]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	b410      	push	{r4}
 8000e28:	6093      	str	r3, [r2, #8]
 8000e2a:	da08      	bge.n	8000e3e <__sfputc_r+0x1e>
 8000e2c:	6994      	ldr	r4, [r2, #24]
 8000e2e:	42a3      	cmp	r3, r4
 8000e30:	db01      	blt.n	8000e36 <__sfputc_r+0x16>
 8000e32:	290a      	cmp	r1, #10
 8000e34:	d103      	bne.n	8000e3e <__sfputc_r+0x1e>
 8000e36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e3a:	f000 bb6d 	b.w	8001518 <__swbuf_r>
 8000e3e:	6813      	ldr	r3, [r2, #0]
 8000e40:	1c58      	adds	r0, r3, #1
 8000e42:	6010      	str	r0, [r2, #0]
 8000e44:	7019      	strb	r1, [r3, #0]
 8000e46:	4608      	mov	r0, r1
 8000e48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <__sfputs_r>:
 8000e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e50:	4606      	mov	r6, r0
 8000e52:	460f      	mov	r7, r1
 8000e54:	4614      	mov	r4, r2
 8000e56:	18d5      	adds	r5, r2, r3
 8000e58:	42ac      	cmp	r4, r5
 8000e5a:	d101      	bne.n	8000e60 <__sfputs_r+0x12>
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	e007      	b.n	8000e70 <__sfputs_r+0x22>
 8000e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e64:	463a      	mov	r2, r7
 8000e66:	4630      	mov	r0, r6
 8000e68:	f7ff ffda 	bl	8000e20 <__sfputc_r>
 8000e6c:	1c43      	adds	r3, r0, #1
 8000e6e:	d1f3      	bne.n	8000e58 <__sfputs_r+0xa>
 8000e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000e74 <_vfiprintf_r>:
 8000e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e78:	460d      	mov	r5, r1
 8000e7a:	b09d      	sub	sp, #116	@ 0x74
 8000e7c:	4614      	mov	r4, r2
 8000e7e:	4698      	mov	r8, r3
 8000e80:	4606      	mov	r6, r0
 8000e82:	b118      	cbz	r0, 8000e8c <_vfiprintf_r+0x18>
 8000e84:	6a03      	ldr	r3, [r0, #32]
 8000e86:	b90b      	cbnz	r3, 8000e8c <_vfiprintf_r+0x18>
 8000e88:	f7ff fdca 	bl	8000a20 <__sinit>
 8000e8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e8e:	07d9      	lsls	r1, r3, #31
 8000e90:	d405      	bmi.n	8000e9e <_vfiprintf_r+0x2a>
 8000e92:	89ab      	ldrh	r3, [r5, #12]
 8000e94:	059a      	lsls	r2, r3, #22
 8000e96:	d402      	bmi.n	8000e9e <_vfiprintf_r+0x2a>
 8000e98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e9a:	f7ff fec6 	bl	8000c2a <__retarget_lock_acquire_recursive>
 8000e9e:	89ab      	ldrh	r3, [r5, #12]
 8000ea0:	071b      	lsls	r3, r3, #28
 8000ea2:	d501      	bpl.n	8000ea8 <_vfiprintf_r+0x34>
 8000ea4:	692b      	ldr	r3, [r5, #16]
 8000ea6:	b99b      	cbnz	r3, 8000ed0 <_vfiprintf_r+0x5c>
 8000ea8:	4629      	mov	r1, r5
 8000eaa:	4630      	mov	r0, r6
 8000eac:	f000 fb72 	bl	8001594 <__swsetup_r>
 8000eb0:	b170      	cbz	r0, 8000ed0 <_vfiprintf_r+0x5c>
 8000eb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000eb4:	07dc      	lsls	r4, r3, #31
 8000eb6:	d504      	bpl.n	8000ec2 <_vfiprintf_r+0x4e>
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	b01d      	add	sp, #116	@ 0x74
 8000ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ec2:	89ab      	ldrh	r3, [r5, #12]
 8000ec4:	0598      	lsls	r0, r3, #22
 8000ec6:	d4f7      	bmi.n	8000eb8 <_vfiprintf_r+0x44>
 8000ec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000eca:	f7ff feaf 	bl	8000c2c <__retarget_lock_release_recursive>
 8000ece:	e7f3      	b.n	8000eb8 <_vfiprintf_r+0x44>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ed4:	2320      	movs	r3, #32
 8000ed6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000eda:	f8cd 800c 	str.w	r8, [sp, #12]
 8000ede:	2330      	movs	r3, #48	@ 0x30
 8000ee0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001090 <_vfiprintf_r+0x21c>
 8000ee4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000ee8:	f04f 0901 	mov.w	r9, #1
 8000eec:	4623      	mov	r3, r4
 8000eee:	469a      	mov	sl, r3
 8000ef0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ef4:	b10a      	cbz	r2, 8000efa <_vfiprintf_r+0x86>
 8000ef6:	2a25      	cmp	r2, #37	@ 0x25
 8000ef8:	d1f9      	bne.n	8000eee <_vfiprintf_r+0x7a>
 8000efa:	ebba 0b04 	subs.w	fp, sl, r4
 8000efe:	d00b      	beq.n	8000f18 <_vfiprintf_r+0xa4>
 8000f00:	465b      	mov	r3, fp
 8000f02:	4622      	mov	r2, r4
 8000f04:	4629      	mov	r1, r5
 8000f06:	4630      	mov	r0, r6
 8000f08:	f7ff ffa1 	bl	8000e4e <__sfputs_r>
 8000f0c:	3001      	adds	r0, #1
 8000f0e:	f000 80a7 	beq.w	8001060 <_vfiprintf_r+0x1ec>
 8000f12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000f14:	445a      	add	r2, fp
 8000f16:	9209      	str	r2, [sp, #36]	@ 0x24
 8000f18:	f89a 3000 	ldrb.w	r3, [sl]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 809f 	beq.w	8001060 <_vfiprintf_r+0x1ec>
 8000f22:	2300      	movs	r3, #0
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000f2c:	f10a 0a01 	add.w	sl, sl, #1
 8000f30:	9304      	str	r3, [sp, #16]
 8000f32:	9307      	str	r3, [sp, #28]
 8000f34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000f38:	931a      	str	r3, [sp, #104]	@ 0x68
 8000f3a:	4654      	mov	r4, sl
 8000f3c:	2205      	movs	r2, #5
 8000f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f42:	4853      	ldr	r0, [pc, #332]	@ (8001090 <_vfiprintf_r+0x21c>)
 8000f44:	f7ff f94c 	bl	80001e0 <memchr>
 8000f48:	9a04      	ldr	r2, [sp, #16]
 8000f4a:	b9d8      	cbnz	r0, 8000f84 <_vfiprintf_r+0x110>
 8000f4c:	06d1      	lsls	r1, r2, #27
 8000f4e:	bf44      	itt	mi
 8000f50:	2320      	movmi	r3, #32
 8000f52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000f56:	0713      	lsls	r3, r2, #28
 8000f58:	bf44      	itt	mi
 8000f5a:	232b      	movmi	r3, #43	@ 0x2b
 8000f5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000f60:	f89a 3000 	ldrb.w	r3, [sl]
 8000f64:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f66:	d015      	beq.n	8000f94 <_vfiprintf_r+0x120>
 8000f68:	9a07      	ldr	r2, [sp, #28]
 8000f6a:	4654      	mov	r4, sl
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f04f 0c0a 	mov.w	ip, #10
 8000f72:	4621      	mov	r1, r4
 8000f74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f78:	3b30      	subs	r3, #48	@ 0x30
 8000f7a:	2b09      	cmp	r3, #9
 8000f7c:	d94b      	bls.n	8001016 <_vfiprintf_r+0x1a2>
 8000f7e:	b1b0      	cbz	r0, 8000fae <_vfiprintf_r+0x13a>
 8000f80:	9207      	str	r2, [sp, #28]
 8000f82:	e014      	b.n	8000fae <_vfiprintf_r+0x13a>
 8000f84:	eba0 0308 	sub.w	r3, r0, r8
 8000f88:	fa09 f303 	lsl.w	r3, r9, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	9304      	str	r3, [sp, #16]
 8000f90:	46a2      	mov	sl, r4
 8000f92:	e7d2      	b.n	8000f3a <_vfiprintf_r+0xc6>
 8000f94:	9b03      	ldr	r3, [sp, #12]
 8000f96:	1d19      	adds	r1, r3, #4
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	9103      	str	r1, [sp, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	bfbb      	ittet	lt
 8000fa0:	425b      	neglt	r3, r3
 8000fa2:	f042 0202 	orrlt.w	r2, r2, #2
 8000fa6:	9307      	strge	r3, [sp, #28]
 8000fa8:	9307      	strlt	r3, [sp, #28]
 8000faa:	bfb8      	it	lt
 8000fac:	9204      	strlt	r2, [sp, #16]
 8000fae:	7823      	ldrb	r3, [r4, #0]
 8000fb0:	2b2e      	cmp	r3, #46	@ 0x2e
 8000fb2:	d10a      	bne.n	8000fca <_vfiprintf_r+0x156>
 8000fb4:	7863      	ldrb	r3, [r4, #1]
 8000fb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8000fb8:	d132      	bne.n	8001020 <_vfiprintf_r+0x1ac>
 8000fba:	9b03      	ldr	r3, [sp, #12]
 8000fbc:	1d1a      	adds	r2, r3, #4
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	9203      	str	r2, [sp, #12]
 8000fc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000fc6:	3402      	adds	r4, #2
 8000fc8:	9305      	str	r3, [sp, #20]
 8000fca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80010a0 <_vfiprintf_r+0x22c>
 8000fce:	7821      	ldrb	r1, [r4, #0]
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	4650      	mov	r0, sl
 8000fd4:	f7ff f904 	bl	80001e0 <memchr>
 8000fd8:	b138      	cbz	r0, 8000fea <_vfiprintf_r+0x176>
 8000fda:	9b04      	ldr	r3, [sp, #16]
 8000fdc:	eba0 000a 	sub.w	r0, r0, sl
 8000fe0:	2240      	movs	r2, #64	@ 0x40
 8000fe2:	4082      	lsls	r2, r0
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	3401      	adds	r4, #1
 8000fe8:	9304      	str	r3, [sp, #16]
 8000fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fee:	4829      	ldr	r0, [pc, #164]	@ (8001094 <_vfiprintf_r+0x220>)
 8000ff0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000ff4:	2206      	movs	r2, #6
 8000ff6:	f7ff f8f3 	bl	80001e0 <memchr>
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	d03f      	beq.n	800107e <_vfiprintf_r+0x20a>
 8000ffe:	4b26      	ldr	r3, [pc, #152]	@ (8001098 <_vfiprintf_r+0x224>)
 8001000:	bb1b      	cbnz	r3, 800104a <_vfiprintf_r+0x1d6>
 8001002:	9b03      	ldr	r3, [sp, #12]
 8001004:	3307      	adds	r3, #7
 8001006:	f023 0307 	bic.w	r3, r3, #7
 800100a:	3308      	adds	r3, #8
 800100c:	9303      	str	r3, [sp, #12]
 800100e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001010:	443b      	add	r3, r7
 8001012:	9309      	str	r3, [sp, #36]	@ 0x24
 8001014:	e76a      	b.n	8000eec <_vfiprintf_r+0x78>
 8001016:	fb0c 3202 	mla	r2, ip, r2, r3
 800101a:	460c      	mov	r4, r1
 800101c:	2001      	movs	r0, #1
 800101e:	e7a8      	b.n	8000f72 <_vfiprintf_r+0xfe>
 8001020:	2300      	movs	r3, #0
 8001022:	3401      	adds	r4, #1
 8001024:	9305      	str	r3, [sp, #20]
 8001026:	4619      	mov	r1, r3
 8001028:	f04f 0c0a 	mov.w	ip, #10
 800102c:	4620      	mov	r0, r4
 800102e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001032:	3a30      	subs	r2, #48	@ 0x30
 8001034:	2a09      	cmp	r2, #9
 8001036:	d903      	bls.n	8001040 <_vfiprintf_r+0x1cc>
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0c6      	beq.n	8000fca <_vfiprintf_r+0x156>
 800103c:	9105      	str	r1, [sp, #20]
 800103e:	e7c4      	b.n	8000fca <_vfiprintf_r+0x156>
 8001040:	fb0c 2101 	mla	r1, ip, r1, r2
 8001044:	4604      	mov	r4, r0
 8001046:	2301      	movs	r3, #1
 8001048:	e7f0      	b.n	800102c <_vfiprintf_r+0x1b8>
 800104a:	ab03      	add	r3, sp, #12
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	462a      	mov	r2, r5
 8001050:	4b12      	ldr	r3, [pc, #72]	@ (800109c <_vfiprintf_r+0x228>)
 8001052:	a904      	add	r1, sp, #16
 8001054:	4630      	mov	r0, r6
 8001056:	f3af 8000 	nop.w
 800105a:	4607      	mov	r7, r0
 800105c:	1c78      	adds	r0, r7, #1
 800105e:	d1d6      	bne.n	800100e <_vfiprintf_r+0x19a>
 8001060:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001062:	07d9      	lsls	r1, r3, #31
 8001064:	d405      	bmi.n	8001072 <_vfiprintf_r+0x1fe>
 8001066:	89ab      	ldrh	r3, [r5, #12]
 8001068:	059a      	lsls	r2, r3, #22
 800106a:	d402      	bmi.n	8001072 <_vfiprintf_r+0x1fe>
 800106c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800106e:	f7ff fddd 	bl	8000c2c <__retarget_lock_release_recursive>
 8001072:	89ab      	ldrh	r3, [r5, #12]
 8001074:	065b      	lsls	r3, r3, #25
 8001076:	f53f af1f 	bmi.w	8000eb8 <_vfiprintf_r+0x44>
 800107a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800107c:	e71e      	b.n	8000ebc <_vfiprintf_r+0x48>
 800107e:	ab03      	add	r3, sp, #12
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	462a      	mov	r2, r5
 8001084:	4b05      	ldr	r3, [pc, #20]	@ (800109c <_vfiprintf_r+0x228>)
 8001086:	a904      	add	r1, sp, #16
 8001088:	4630      	mov	r0, r6
 800108a:	f000 f879 	bl	8001180 <_printf_i>
 800108e:	e7e4      	b.n	800105a <_vfiprintf_r+0x1e6>
 8001090:	0800181b 	.word	0x0800181b
 8001094:	08001825 	.word	0x08001825
 8001098:	00000000 	.word	0x00000000
 800109c:	08000e4f 	.word	0x08000e4f
 80010a0:	08001821 	.word	0x08001821

080010a4 <_printf_common>:
 80010a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010a8:	4616      	mov	r6, r2
 80010aa:	4698      	mov	r8, r3
 80010ac:	688a      	ldr	r2, [r1, #8]
 80010ae:	690b      	ldr	r3, [r1, #16]
 80010b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80010b4:	4293      	cmp	r3, r2
 80010b6:	bfb8      	it	lt
 80010b8:	4613      	movlt	r3, r2
 80010ba:	6033      	str	r3, [r6, #0]
 80010bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80010c0:	4607      	mov	r7, r0
 80010c2:	460c      	mov	r4, r1
 80010c4:	b10a      	cbz	r2, 80010ca <_printf_common+0x26>
 80010c6:	3301      	adds	r3, #1
 80010c8:	6033      	str	r3, [r6, #0]
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	0699      	lsls	r1, r3, #26
 80010ce:	bf42      	ittt	mi
 80010d0:	6833      	ldrmi	r3, [r6, #0]
 80010d2:	3302      	addmi	r3, #2
 80010d4:	6033      	strmi	r3, [r6, #0]
 80010d6:	6825      	ldr	r5, [r4, #0]
 80010d8:	f015 0506 	ands.w	r5, r5, #6
 80010dc:	d106      	bne.n	80010ec <_printf_common+0x48>
 80010de:	f104 0a19 	add.w	sl, r4, #25
 80010e2:	68e3      	ldr	r3, [r4, #12]
 80010e4:	6832      	ldr	r2, [r6, #0]
 80010e6:	1a9b      	subs	r3, r3, r2
 80010e8:	42ab      	cmp	r3, r5
 80010ea:	dc26      	bgt.n	800113a <_printf_common+0x96>
 80010ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80010f0:	6822      	ldr	r2, [r4, #0]
 80010f2:	3b00      	subs	r3, #0
 80010f4:	bf18      	it	ne
 80010f6:	2301      	movne	r3, #1
 80010f8:	0692      	lsls	r2, r2, #26
 80010fa:	d42b      	bmi.n	8001154 <_printf_common+0xb0>
 80010fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001100:	4641      	mov	r1, r8
 8001102:	4638      	mov	r0, r7
 8001104:	47c8      	blx	r9
 8001106:	3001      	adds	r0, #1
 8001108:	d01e      	beq.n	8001148 <_printf_common+0xa4>
 800110a:	6823      	ldr	r3, [r4, #0]
 800110c:	6922      	ldr	r2, [r4, #16]
 800110e:	f003 0306 	and.w	r3, r3, #6
 8001112:	2b04      	cmp	r3, #4
 8001114:	bf02      	ittt	eq
 8001116:	68e5      	ldreq	r5, [r4, #12]
 8001118:	6833      	ldreq	r3, [r6, #0]
 800111a:	1aed      	subeq	r5, r5, r3
 800111c:	68a3      	ldr	r3, [r4, #8]
 800111e:	bf0c      	ite	eq
 8001120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001124:	2500      	movne	r5, #0
 8001126:	4293      	cmp	r3, r2
 8001128:	bfc4      	itt	gt
 800112a:	1a9b      	subgt	r3, r3, r2
 800112c:	18ed      	addgt	r5, r5, r3
 800112e:	2600      	movs	r6, #0
 8001130:	341a      	adds	r4, #26
 8001132:	42b5      	cmp	r5, r6
 8001134:	d11a      	bne.n	800116c <_printf_common+0xc8>
 8001136:	2000      	movs	r0, #0
 8001138:	e008      	b.n	800114c <_printf_common+0xa8>
 800113a:	2301      	movs	r3, #1
 800113c:	4652      	mov	r2, sl
 800113e:	4641      	mov	r1, r8
 8001140:	4638      	mov	r0, r7
 8001142:	47c8      	blx	r9
 8001144:	3001      	adds	r0, #1
 8001146:	d103      	bne.n	8001150 <_printf_common+0xac>
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001150:	3501      	adds	r5, #1
 8001152:	e7c6      	b.n	80010e2 <_printf_common+0x3e>
 8001154:	18e1      	adds	r1, r4, r3
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	2030      	movs	r0, #48	@ 0x30
 800115a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800115e:	4422      	add	r2, r4
 8001160:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001164:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001168:	3302      	adds	r3, #2
 800116a:	e7c7      	b.n	80010fc <_printf_common+0x58>
 800116c:	2301      	movs	r3, #1
 800116e:	4622      	mov	r2, r4
 8001170:	4641      	mov	r1, r8
 8001172:	4638      	mov	r0, r7
 8001174:	47c8      	blx	r9
 8001176:	3001      	adds	r0, #1
 8001178:	d0e6      	beq.n	8001148 <_printf_common+0xa4>
 800117a:	3601      	adds	r6, #1
 800117c:	e7d9      	b.n	8001132 <_printf_common+0x8e>
	...

08001180 <_printf_i>:
 8001180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001184:	7e0f      	ldrb	r7, [r1, #24]
 8001186:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001188:	2f78      	cmp	r7, #120	@ 0x78
 800118a:	4691      	mov	r9, r2
 800118c:	4680      	mov	r8, r0
 800118e:	460c      	mov	r4, r1
 8001190:	469a      	mov	sl, r3
 8001192:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001196:	d807      	bhi.n	80011a8 <_printf_i+0x28>
 8001198:	2f62      	cmp	r7, #98	@ 0x62
 800119a:	d80a      	bhi.n	80011b2 <_printf_i+0x32>
 800119c:	2f00      	cmp	r7, #0
 800119e:	f000 80d2 	beq.w	8001346 <_printf_i+0x1c6>
 80011a2:	2f58      	cmp	r7, #88	@ 0x58
 80011a4:	f000 80b9 	beq.w	800131a <_printf_i+0x19a>
 80011a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80011ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80011b0:	e03a      	b.n	8001228 <_printf_i+0xa8>
 80011b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80011b6:	2b15      	cmp	r3, #21
 80011b8:	d8f6      	bhi.n	80011a8 <_printf_i+0x28>
 80011ba:	a101      	add	r1, pc, #4	@ (adr r1, 80011c0 <_printf_i+0x40>)
 80011bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80011c0:	08001219 	.word	0x08001219
 80011c4:	0800122d 	.word	0x0800122d
 80011c8:	080011a9 	.word	0x080011a9
 80011cc:	080011a9 	.word	0x080011a9
 80011d0:	080011a9 	.word	0x080011a9
 80011d4:	080011a9 	.word	0x080011a9
 80011d8:	0800122d 	.word	0x0800122d
 80011dc:	080011a9 	.word	0x080011a9
 80011e0:	080011a9 	.word	0x080011a9
 80011e4:	080011a9 	.word	0x080011a9
 80011e8:	080011a9 	.word	0x080011a9
 80011ec:	0800132d 	.word	0x0800132d
 80011f0:	08001257 	.word	0x08001257
 80011f4:	080012e7 	.word	0x080012e7
 80011f8:	080011a9 	.word	0x080011a9
 80011fc:	080011a9 	.word	0x080011a9
 8001200:	0800134f 	.word	0x0800134f
 8001204:	080011a9 	.word	0x080011a9
 8001208:	08001257 	.word	0x08001257
 800120c:	080011a9 	.word	0x080011a9
 8001210:	080011a9 	.word	0x080011a9
 8001214:	080012ef 	.word	0x080012ef
 8001218:	6833      	ldr	r3, [r6, #0]
 800121a:	1d1a      	adds	r2, r3, #4
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6032      	str	r2, [r6, #0]
 8001220:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001224:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001228:	2301      	movs	r3, #1
 800122a:	e09d      	b.n	8001368 <_printf_i+0x1e8>
 800122c:	6833      	ldr	r3, [r6, #0]
 800122e:	6820      	ldr	r0, [r4, #0]
 8001230:	1d19      	adds	r1, r3, #4
 8001232:	6031      	str	r1, [r6, #0]
 8001234:	0606      	lsls	r6, r0, #24
 8001236:	d501      	bpl.n	800123c <_printf_i+0xbc>
 8001238:	681d      	ldr	r5, [r3, #0]
 800123a:	e003      	b.n	8001244 <_printf_i+0xc4>
 800123c:	0645      	lsls	r5, r0, #25
 800123e:	d5fb      	bpl.n	8001238 <_printf_i+0xb8>
 8001240:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001244:	2d00      	cmp	r5, #0
 8001246:	da03      	bge.n	8001250 <_printf_i+0xd0>
 8001248:	232d      	movs	r3, #45	@ 0x2d
 800124a:	426d      	negs	r5, r5
 800124c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001250:	4859      	ldr	r0, [pc, #356]	@ (80013b8 <_printf_i+0x238>)
 8001252:	230a      	movs	r3, #10
 8001254:	e011      	b.n	800127a <_printf_i+0xfa>
 8001256:	6821      	ldr	r1, [r4, #0]
 8001258:	6833      	ldr	r3, [r6, #0]
 800125a:	0608      	lsls	r0, r1, #24
 800125c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001260:	d402      	bmi.n	8001268 <_printf_i+0xe8>
 8001262:	0649      	lsls	r1, r1, #25
 8001264:	bf48      	it	mi
 8001266:	b2ad      	uxthmi	r5, r5
 8001268:	2f6f      	cmp	r7, #111	@ 0x6f
 800126a:	4853      	ldr	r0, [pc, #332]	@ (80013b8 <_printf_i+0x238>)
 800126c:	6033      	str	r3, [r6, #0]
 800126e:	bf14      	ite	ne
 8001270:	230a      	movne	r3, #10
 8001272:	2308      	moveq	r3, #8
 8001274:	2100      	movs	r1, #0
 8001276:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800127a:	6866      	ldr	r6, [r4, #4]
 800127c:	60a6      	str	r6, [r4, #8]
 800127e:	2e00      	cmp	r6, #0
 8001280:	bfa2      	ittt	ge
 8001282:	6821      	ldrge	r1, [r4, #0]
 8001284:	f021 0104 	bicge.w	r1, r1, #4
 8001288:	6021      	strge	r1, [r4, #0]
 800128a:	b90d      	cbnz	r5, 8001290 <_printf_i+0x110>
 800128c:	2e00      	cmp	r6, #0
 800128e:	d04b      	beq.n	8001328 <_printf_i+0x1a8>
 8001290:	4616      	mov	r6, r2
 8001292:	fbb5 f1f3 	udiv	r1, r5, r3
 8001296:	fb03 5711 	mls	r7, r3, r1, r5
 800129a:	5dc7      	ldrb	r7, [r0, r7]
 800129c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80012a0:	462f      	mov	r7, r5
 80012a2:	42bb      	cmp	r3, r7
 80012a4:	460d      	mov	r5, r1
 80012a6:	d9f4      	bls.n	8001292 <_printf_i+0x112>
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d10b      	bne.n	80012c4 <_printf_i+0x144>
 80012ac:	6823      	ldr	r3, [r4, #0]
 80012ae:	07df      	lsls	r7, r3, #31
 80012b0:	d508      	bpl.n	80012c4 <_printf_i+0x144>
 80012b2:	6923      	ldr	r3, [r4, #16]
 80012b4:	6861      	ldr	r1, [r4, #4]
 80012b6:	4299      	cmp	r1, r3
 80012b8:	bfde      	ittt	le
 80012ba:	2330      	movle	r3, #48	@ 0x30
 80012bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80012c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80012c4:	1b92      	subs	r2, r2, r6
 80012c6:	6122      	str	r2, [r4, #16]
 80012c8:	f8cd a000 	str.w	sl, [sp]
 80012cc:	464b      	mov	r3, r9
 80012ce:	aa03      	add	r2, sp, #12
 80012d0:	4621      	mov	r1, r4
 80012d2:	4640      	mov	r0, r8
 80012d4:	f7ff fee6 	bl	80010a4 <_printf_common>
 80012d8:	3001      	adds	r0, #1
 80012da:	d14a      	bne.n	8001372 <_printf_i+0x1f2>
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	b004      	add	sp, #16
 80012e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	f043 0320 	orr.w	r3, r3, #32
 80012ec:	6023      	str	r3, [r4, #0]
 80012ee:	4833      	ldr	r0, [pc, #204]	@ (80013bc <_printf_i+0x23c>)
 80012f0:	2778      	movs	r7, #120	@ 0x78
 80012f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80012f6:	6823      	ldr	r3, [r4, #0]
 80012f8:	6831      	ldr	r1, [r6, #0]
 80012fa:	061f      	lsls	r7, r3, #24
 80012fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8001300:	d402      	bmi.n	8001308 <_printf_i+0x188>
 8001302:	065f      	lsls	r7, r3, #25
 8001304:	bf48      	it	mi
 8001306:	b2ad      	uxthmi	r5, r5
 8001308:	6031      	str	r1, [r6, #0]
 800130a:	07d9      	lsls	r1, r3, #31
 800130c:	bf44      	itt	mi
 800130e:	f043 0320 	orrmi.w	r3, r3, #32
 8001312:	6023      	strmi	r3, [r4, #0]
 8001314:	b11d      	cbz	r5, 800131e <_printf_i+0x19e>
 8001316:	2310      	movs	r3, #16
 8001318:	e7ac      	b.n	8001274 <_printf_i+0xf4>
 800131a:	4827      	ldr	r0, [pc, #156]	@ (80013b8 <_printf_i+0x238>)
 800131c:	e7e9      	b.n	80012f2 <_printf_i+0x172>
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	f023 0320 	bic.w	r3, r3, #32
 8001324:	6023      	str	r3, [r4, #0]
 8001326:	e7f6      	b.n	8001316 <_printf_i+0x196>
 8001328:	4616      	mov	r6, r2
 800132a:	e7bd      	b.n	80012a8 <_printf_i+0x128>
 800132c:	6833      	ldr	r3, [r6, #0]
 800132e:	6825      	ldr	r5, [r4, #0]
 8001330:	6961      	ldr	r1, [r4, #20]
 8001332:	1d18      	adds	r0, r3, #4
 8001334:	6030      	str	r0, [r6, #0]
 8001336:	062e      	lsls	r6, r5, #24
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	d501      	bpl.n	8001340 <_printf_i+0x1c0>
 800133c:	6019      	str	r1, [r3, #0]
 800133e:	e002      	b.n	8001346 <_printf_i+0x1c6>
 8001340:	0668      	lsls	r0, r5, #25
 8001342:	d5fb      	bpl.n	800133c <_printf_i+0x1bc>
 8001344:	8019      	strh	r1, [r3, #0]
 8001346:	2300      	movs	r3, #0
 8001348:	6123      	str	r3, [r4, #16]
 800134a:	4616      	mov	r6, r2
 800134c:	e7bc      	b.n	80012c8 <_printf_i+0x148>
 800134e:	6833      	ldr	r3, [r6, #0]
 8001350:	1d1a      	adds	r2, r3, #4
 8001352:	6032      	str	r2, [r6, #0]
 8001354:	681e      	ldr	r6, [r3, #0]
 8001356:	6862      	ldr	r2, [r4, #4]
 8001358:	2100      	movs	r1, #0
 800135a:	4630      	mov	r0, r6
 800135c:	f7fe ff40 	bl	80001e0 <memchr>
 8001360:	b108      	cbz	r0, 8001366 <_printf_i+0x1e6>
 8001362:	1b80      	subs	r0, r0, r6
 8001364:	6060      	str	r0, [r4, #4]
 8001366:	6863      	ldr	r3, [r4, #4]
 8001368:	6123      	str	r3, [r4, #16]
 800136a:	2300      	movs	r3, #0
 800136c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001370:	e7aa      	b.n	80012c8 <_printf_i+0x148>
 8001372:	6923      	ldr	r3, [r4, #16]
 8001374:	4632      	mov	r2, r6
 8001376:	4649      	mov	r1, r9
 8001378:	4640      	mov	r0, r8
 800137a:	47d0      	blx	sl
 800137c:	3001      	adds	r0, #1
 800137e:	d0ad      	beq.n	80012dc <_printf_i+0x15c>
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	079b      	lsls	r3, r3, #30
 8001384:	d413      	bmi.n	80013ae <_printf_i+0x22e>
 8001386:	68e0      	ldr	r0, [r4, #12]
 8001388:	9b03      	ldr	r3, [sp, #12]
 800138a:	4298      	cmp	r0, r3
 800138c:	bfb8      	it	lt
 800138e:	4618      	movlt	r0, r3
 8001390:	e7a6      	b.n	80012e0 <_printf_i+0x160>
 8001392:	2301      	movs	r3, #1
 8001394:	4632      	mov	r2, r6
 8001396:	4649      	mov	r1, r9
 8001398:	4640      	mov	r0, r8
 800139a:	47d0      	blx	sl
 800139c:	3001      	adds	r0, #1
 800139e:	d09d      	beq.n	80012dc <_printf_i+0x15c>
 80013a0:	3501      	adds	r5, #1
 80013a2:	68e3      	ldr	r3, [r4, #12]
 80013a4:	9903      	ldr	r1, [sp, #12]
 80013a6:	1a5b      	subs	r3, r3, r1
 80013a8:	42ab      	cmp	r3, r5
 80013aa:	dcf2      	bgt.n	8001392 <_printf_i+0x212>
 80013ac:	e7eb      	b.n	8001386 <_printf_i+0x206>
 80013ae:	2500      	movs	r5, #0
 80013b0:	f104 0619 	add.w	r6, r4, #25
 80013b4:	e7f5      	b.n	80013a2 <_printf_i+0x222>
 80013b6:	bf00      	nop
 80013b8:	0800182c 	.word	0x0800182c
 80013bc:	0800183d 	.word	0x0800183d

080013c0 <__sflush_r>:
 80013c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80013c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013c8:	0716      	lsls	r6, r2, #28
 80013ca:	4605      	mov	r5, r0
 80013cc:	460c      	mov	r4, r1
 80013ce:	d454      	bmi.n	800147a <__sflush_r+0xba>
 80013d0:	684b      	ldr	r3, [r1, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	dc02      	bgt.n	80013dc <__sflush_r+0x1c>
 80013d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80013d8:	2b00      	cmp	r3, #0
 80013da:	dd48      	ble.n	800146e <__sflush_r+0xae>
 80013dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80013de:	2e00      	cmp	r6, #0
 80013e0:	d045      	beq.n	800146e <__sflush_r+0xae>
 80013e2:	2300      	movs	r3, #0
 80013e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80013e8:	682f      	ldr	r7, [r5, #0]
 80013ea:	6a21      	ldr	r1, [r4, #32]
 80013ec:	602b      	str	r3, [r5, #0]
 80013ee:	d030      	beq.n	8001452 <__sflush_r+0x92>
 80013f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80013f2:	89a3      	ldrh	r3, [r4, #12]
 80013f4:	0759      	lsls	r1, r3, #29
 80013f6:	d505      	bpl.n	8001404 <__sflush_r+0x44>
 80013f8:	6863      	ldr	r3, [r4, #4]
 80013fa:	1ad2      	subs	r2, r2, r3
 80013fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80013fe:	b10b      	cbz	r3, 8001404 <__sflush_r+0x44>
 8001400:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001402:	1ad2      	subs	r2, r2, r3
 8001404:	2300      	movs	r3, #0
 8001406:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001408:	6a21      	ldr	r1, [r4, #32]
 800140a:	4628      	mov	r0, r5
 800140c:	47b0      	blx	r6
 800140e:	1c43      	adds	r3, r0, #1
 8001410:	89a3      	ldrh	r3, [r4, #12]
 8001412:	d106      	bne.n	8001422 <__sflush_r+0x62>
 8001414:	6829      	ldr	r1, [r5, #0]
 8001416:	291d      	cmp	r1, #29
 8001418:	d82b      	bhi.n	8001472 <__sflush_r+0xb2>
 800141a:	4a2a      	ldr	r2, [pc, #168]	@ (80014c4 <__sflush_r+0x104>)
 800141c:	410a      	asrs	r2, r1
 800141e:	07d6      	lsls	r6, r2, #31
 8001420:	d427      	bmi.n	8001472 <__sflush_r+0xb2>
 8001422:	2200      	movs	r2, #0
 8001424:	6062      	str	r2, [r4, #4]
 8001426:	04d9      	lsls	r1, r3, #19
 8001428:	6922      	ldr	r2, [r4, #16]
 800142a:	6022      	str	r2, [r4, #0]
 800142c:	d504      	bpl.n	8001438 <__sflush_r+0x78>
 800142e:	1c42      	adds	r2, r0, #1
 8001430:	d101      	bne.n	8001436 <__sflush_r+0x76>
 8001432:	682b      	ldr	r3, [r5, #0]
 8001434:	b903      	cbnz	r3, 8001438 <__sflush_r+0x78>
 8001436:	6560      	str	r0, [r4, #84]	@ 0x54
 8001438:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800143a:	602f      	str	r7, [r5, #0]
 800143c:	b1b9      	cbz	r1, 800146e <__sflush_r+0xae>
 800143e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001442:	4299      	cmp	r1, r3
 8001444:	d002      	beq.n	800144c <__sflush_r+0x8c>
 8001446:	4628      	mov	r0, r5
 8001448:	f7ff fbf2 	bl	8000c30 <_free_r>
 800144c:	2300      	movs	r3, #0
 800144e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001450:	e00d      	b.n	800146e <__sflush_r+0xae>
 8001452:	2301      	movs	r3, #1
 8001454:	4628      	mov	r0, r5
 8001456:	47b0      	blx	r6
 8001458:	4602      	mov	r2, r0
 800145a:	1c50      	adds	r0, r2, #1
 800145c:	d1c9      	bne.n	80013f2 <__sflush_r+0x32>
 800145e:	682b      	ldr	r3, [r5, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0c6      	beq.n	80013f2 <__sflush_r+0x32>
 8001464:	2b1d      	cmp	r3, #29
 8001466:	d001      	beq.n	800146c <__sflush_r+0xac>
 8001468:	2b16      	cmp	r3, #22
 800146a:	d11e      	bne.n	80014aa <__sflush_r+0xea>
 800146c:	602f      	str	r7, [r5, #0]
 800146e:	2000      	movs	r0, #0
 8001470:	e022      	b.n	80014b8 <__sflush_r+0xf8>
 8001472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001476:	b21b      	sxth	r3, r3
 8001478:	e01b      	b.n	80014b2 <__sflush_r+0xf2>
 800147a:	690f      	ldr	r7, [r1, #16]
 800147c:	2f00      	cmp	r7, #0
 800147e:	d0f6      	beq.n	800146e <__sflush_r+0xae>
 8001480:	0793      	lsls	r3, r2, #30
 8001482:	680e      	ldr	r6, [r1, #0]
 8001484:	bf08      	it	eq
 8001486:	694b      	ldreq	r3, [r1, #20]
 8001488:	600f      	str	r7, [r1, #0]
 800148a:	bf18      	it	ne
 800148c:	2300      	movne	r3, #0
 800148e:	eba6 0807 	sub.w	r8, r6, r7
 8001492:	608b      	str	r3, [r1, #8]
 8001494:	f1b8 0f00 	cmp.w	r8, #0
 8001498:	dde9      	ble.n	800146e <__sflush_r+0xae>
 800149a:	6a21      	ldr	r1, [r4, #32]
 800149c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800149e:	4643      	mov	r3, r8
 80014a0:	463a      	mov	r2, r7
 80014a2:	4628      	mov	r0, r5
 80014a4:	47b0      	blx	r6
 80014a6:	2800      	cmp	r0, #0
 80014a8:	dc08      	bgt.n	80014bc <__sflush_r+0xfc>
 80014aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014b2:	81a3      	strh	r3, [r4, #12]
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014bc:	4407      	add	r7, r0
 80014be:	eba8 0800 	sub.w	r8, r8, r0
 80014c2:	e7e7      	b.n	8001494 <__sflush_r+0xd4>
 80014c4:	dfbffffe 	.word	0xdfbffffe

080014c8 <_fflush_r>:
 80014c8:	b538      	push	{r3, r4, r5, lr}
 80014ca:	690b      	ldr	r3, [r1, #16]
 80014cc:	4605      	mov	r5, r0
 80014ce:	460c      	mov	r4, r1
 80014d0:	b913      	cbnz	r3, 80014d8 <_fflush_r+0x10>
 80014d2:	2500      	movs	r5, #0
 80014d4:	4628      	mov	r0, r5
 80014d6:	bd38      	pop	{r3, r4, r5, pc}
 80014d8:	b118      	cbz	r0, 80014e2 <_fflush_r+0x1a>
 80014da:	6a03      	ldr	r3, [r0, #32]
 80014dc:	b90b      	cbnz	r3, 80014e2 <_fflush_r+0x1a>
 80014de:	f7ff fa9f 	bl	8000a20 <__sinit>
 80014e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f3      	beq.n	80014d2 <_fflush_r+0xa>
 80014ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80014ec:	07d0      	lsls	r0, r2, #31
 80014ee:	d404      	bmi.n	80014fa <_fflush_r+0x32>
 80014f0:	0599      	lsls	r1, r3, #22
 80014f2:	d402      	bmi.n	80014fa <_fflush_r+0x32>
 80014f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80014f6:	f7ff fb98 	bl	8000c2a <__retarget_lock_acquire_recursive>
 80014fa:	4628      	mov	r0, r5
 80014fc:	4621      	mov	r1, r4
 80014fe:	f7ff ff5f 	bl	80013c0 <__sflush_r>
 8001502:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001504:	07da      	lsls	r2, r3, #31
 8001506:	4605      	mov	r5, r0
 8001508:	d4e4      	bmi.n	80014d4 <_fflush_r+0xc>
 800150a:	89a3      	ldrh	r3, [r4, #12]
 800150c:	059b      	lsls	r3, r3, #22
 800150e:	d4e1      	bmi.n	80014d4 <_fflush_r+0xc>
 8001510:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001512:	f7ff fb8b 	bl	8000c2c <__retarget_lock_release_recursive>
 8001516:	e7dd      	b.n	80014d4 <_fflush_r+0xc>

08001518 <__swbuf_r>:
 8001518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800151a:	460e      	mov	r6, r1
 800151c:	4614      	mov	r4, r2
 800151e:	4605      	mov	r5, r0
 8001520:	b118      	cbz	r0, 800152a <__swbuf_r+0x12>
 8001522:	6a03      	ldr	r3, [r0, #32]
 8001524:	b90b      	cbnz	r3, 800152a <__swbuf_r+0x12>
 8001526:	f7ff fa7b 	bl	8000a20 <__sinit>
 800152a:	69a3      	ldr	r3, [r4, #24]
 800152c:	60a3      	str	r3, [r4, #8]
 800152e:	89a3      	ldrh	r3, [r4, #12]
 8001530:	071a      	lsls	r2, r3, #28
 8001532:	d501      	bpl.n	8001538 <__swbuf_r+0x20>
 8001534:	6923      	ldr	r3, [r4, #16]
 8001536:	b943      	cbnz	r3, 800154a <__swbuf_r+0x32>
 8001538:	4621      	mov	r1, r4
 800153a:	4628      	mov	r0, r5
 800153c:	f000 f82a 	bl	8001594 <__swsetup_r>
 8001540:	b118      	cbz	r0, 800154a <__swbuf_r+0x32>
 8001542:	f04f 37ff 	mov.w	r7, #4294967295
 8001546:	4638      	mov	r0, r7
 8001548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800154a:	6823      	ldr	r3, [r4, #0]
 800154c:	6922      	ldr	r2, [r4, #16]
 800154e:	1a98      	subs	r0, r3, r2
 8001550:	6963      	ldr	r3, [r4, #20]
 8001552:	b2f6      	uxtb	r6, r6
 8001554:	4283      	cmp	r3, r0
 8001556:	4637      	mov	r7, r6
 8001558:	dc05      	bgt.n	8001566 <__swbuf_r+0x4e>
 800155a:	4621      	mov	r1, r4
 800155c:	4628      	mov	r0, r5
 800155e:	f7ff ffb3 	bl	80014c8 <_fflush_r>
 8001562:	2800      	cmp	r0, #0
 8001564:	d1ed      	bne.n	8001542 <__swbuf_r+0x2a>
 8001566:	68a3      	ldr	r3, [r4, #8]
 8001568:	3b01      	subs	r3, #1
 800156a:	60a3      	str	r3, [r4, #8]
 800156c:	6823      	ldr	r3, [r4, #0]
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	6022      	str	r2, [r4, #0]
 8001572:	701e      	strb	r6, [r3, #0]
 8001574:	6962      	ldr	r2, [r4, #20]
 8001576:	1c43      	adds	r3, r0, #1
 8001578:	429a      	cmp	r2, r3
 800157a:	d004      	beq.n	8001586 <__swbuf_r+0x6e>
 800157c:	89a3      	ldrh	r3, [r4, #12]
 800157e:	07db      	lsls	r3, r3, #31
 8001580:	d5e1      	bpl.n	8001546 <__swbuf_r+0x2e>
 8001582:	2e0a      	cmp	r6, #10
 8001584:	d1df      	bne.n	8001546 <__swbuf_r+0x2e>
 8001586:	4621      	mov	r1, r4
 8001588:	4628      	mov	r0, r5
 800158a:	f7ff ff9d 	bl	80014c8 <_fflush_r>
 800158e:	2800      	cmp	r0, #0
 8001590:	d0d9      	beq.n	8001546 <__swbuf_r+0x2e>
 8001592:	e7d6      	b.n	8001542 <__swbuf_r+0x2a>

08001594 <__swsetup_r>:
 8001594:	b538      	push	{r3, r4, r5, lr}
 8001596:	4b29      	ldr	r3, [pc, #164]	@ (800163c <__swsetup_r+0xa8>)
 8001598:	4605      	mov	r5, r0
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	460c      	mov	r4, r1
 800159e:	b118      	cbz	r0, 80015a8 <__swsetup_r+0x14>
 80015a0:	6a03      	ldr	r3, [r0, #32]
 80015a2:	b90b      	cbnz	r3, 80015a8 <__swsetup_r+0x14>
 80015a4:	f7ff fa3c 	bl	8000a20 <__sinit>
 80015a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015ac:	0719      	lsls	r1, r3, #28
 80015ae:	d422      	bmi.n	80015f6 <__swsetup_r+0x62>
 80015b0:	06da      	lsls	r2, r3, #27
 80015b2:	d407      	bmi.n	80015c4 <__swsetup_r+0x30>
 80015b4:	2209      	movs	r2, #9
 80015b6:	602a      	str	r2, [r5, #0]
 80015b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015bc:	81a3      	strh	r3, [r4, #12]
 80015be:	f04f 30ff 	mov.w	r0, #4294967295
 80015c2:	e033      	b.n	800162c <__swsetup_r+0x98>
 80015c4:	0758      	lsls	r0, r3, #29
 80015c6:	d512      	bpl.n	80015ee <__swsetup_r+0x5a>
 80015c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80015ca:	b141      	cbz	r1, 80015de <__swsetup_r+0x4a>
 80015cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80015d0:	4299      	cmp	r1, r3
 80015d2:	d002      	beq.n	80015da <__swsetup_r+0x46>
 80015d4:	4628      	mov	r0, r5
 80015d6:	f7ff fb2b 	bl	8000c30 <_free_r>
 80015da:	2300      	movs	r3, #0
 80015dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80015de:	89a3      	ldrh	r3, [r4, #12]
 80015e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80015e4:	81a3      	strh	r3, [r4, #12]
 80015e6:	2300      	movs	r3, #0
 80015e8:	6063      	str	r3, [r4, #4]
 80015ea:	6923      	ldr	r3, [r4, #16]
 80015ec:	6023      	str	r3, [r4, #0]
 80015ee:	89a3      	ldrh	r3, [r4, #12]
 80015f0:	f043 0308 	orr.w	r3, r3, #8
 80015f4:	81a3      	strh	r3, [r4, #12]
 80015f6:	6923      	ldr	r3, [r4, #16]
 80015f8:	b94b      	cbnz	r3, 800160e <__swsetup_r+0x7a>
 80015fa:	89a3      	ldrh	r3, [r4, #12]
 80015fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001600:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001604:	d003      	beq.n	800160e <__swsetup_r+0x7a>
 8001606:	4621      	mov	r1, r4
 8001608:	4628      	mov	r0, r5
 800160a:	f000 f84f 	bl	80016ac <__smakebuf_r>
 800160e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001612:	f013 0201 	ands.w	r2, r3, #1
 8001616:	d00a      	beq.n	800162e <__swsetup_r+0x9a>
 8001618:	2200      	movs	r2, #0
 800161a:	60a2      	str	r2, [r4, #8]
 800161c:	6962      	ldr	r2, [r4, #20]
 800161e:	4252      	negs	r2, r2
 8001620:	61a2      	str	r2, [r4, #24]
 8001622:	6922      	ldr	r2, [r4, #16]
 8001624:	b942      	cbnz	r2, 8001638 <__swsetup_r+0xa4>
 8001626:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800162a:	d1c5      	bne.n	80015b8 <__swsetup_r+0x24>
 800162c:	bd38      	pop	{r3, r4, r5, pc}
 800162e:	0799      	lsls	r1, r3, #30
 8001630:	bf58      	it	pl
 8001632:	6962      	ldrpl	r2, [r4, #20]
 8001634:	60a2      	str	r2, [r4, #8]
 8001636:	e7f4      	b.n	8001622 <__swsetup_r+0x8e>
 8001638:	2000      	movs	r0, #0
 800163a:	e7f7      	b.n	800162c <__swsetup_r+0x98>
 800163c:	2000000c 	.word	0x2000000c

08001640 <_sbrk_r>:
 8001640:	b538      	push	{r3, r4, r5, lr}
 8001642:	4d06      	ldr	r5, [pc, #24]	@ (800165c <_sbrk_r+0x1c>)
 8001644:	2300      	movs	r3, #0
 8001646:	4604      	mov	r4, r0
 8001648:	4608      	mov	r0, r1
 800164a:	602b      	str	r3, [r5, #0]
 800164c:	f7fe ff4c 	bl	80004e8 <_sbrk>
 8001650:	1c43      	adds	r3, r0, #1
 8001652:	d102      	bne.n	800165a <_sbrk_r+0x1a>
 8001654:	682b      	ldr	r3, [r5, #0]
 8001656:	b103      	cbz	r3, 800165a <_sbrk_r+0x1a>
 8001658:	6023      	str	r3, [r4, #0]
 800165a:	bd38      	pop	{r3, r4, r5, pc}
 800165c:	200001c4 	.word	0x200001c4

08001660 <__swhatbuf_r>:
 8001660:	b570      	push	{r4, r5, r6, lr}
 8001662:	460c      	mov	r4, r1
 8001664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001668:	2900      	cmp	r1, #0
 800166a:	b096      	sub	sp, #88	@ 0x58
 800166c:	4615      	mov	r5, r2
 800166e:	461e      	mov	r6, r3
 8001670:	da0d      	bge.n	800168e <__swhatbuf_r+0x2e>
 8001672:	89a3      	ldrh	r3, [r4, #12]
 8001674:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001678:	f04f 0100 	mov.w	r1, #0
 800167c:	bf14      	ite	ne
 800167e:	2340      	movne	r3, #64	@ 0x40
 8001680:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001684:	2000      	movs	r0, #0
 8001686:	6031      	str	r1, [r6, #0]
 8001688:	602b      	str	r3, [r5, #0]
 800168a:	b016      	add	sp, #88	@ 0x58
 800168c:	bd70      	pop	{r4, r5, r6, pc}
 800168e:	466a      	mov	r2, sp
 8001690:	f000 f848 	bl	8001724 <_fstat_r>
 8001694:	2800      	cmp	r0, #0
 8001696:	dbec      	blt.n	8001672 <__swhatbuf_r+0x12>
 8001698:	9901      	ldr	r1, [sp, #4]
 800169a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800169e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80016a2:	4259      	negs	r1, r3
 80016a4:	4159      	adcs	r1, r3
 80016a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016aa:	e7eb      	b.n	8001684 <__swhatbuf_r+0x24>

080016ac <__smakebuf_r>:
 80016ac:	898b      	ldrh	r3, [r1, #12]
 80016ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016b0:	079d      	lsls	r5, r3, #30
 80016b2:	4606      	mov	r6, r0
 80016b4:	460c      	mov	r4, r1
 80016b6:	d507      	bpl.n	80016c8 <__smakebuf_r+0x1c>
 80016b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80016bc:	6023      	str	r3, [r4, #0]
 80016be:	6123      	str	r3, [r4, #16]
 80016c0:	2301      	movs	r3, #1
 80016c2:	6163      	str	r3, [r4, #20]
 80016c4:	b003      	add	sp, #12
 80016c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c8:	ab01      	add	r3, sp, #4
 80016ca:	466a      	mov	r2, sp
 80016cc:	f7ff ffc8 	bl	8001660 <__swhatbuf_r>
 80016d0:	9f00      	ldr	r7, [sp, #0]
 80016d2:	4605      	mov	r5, r0
 80016d4:	4639      	mov	r1, r7
 80016d6:	4630      	mov	r0, r6
 80016d8:	f7ff fb16 	bl	8000d08 <_malloc_r>
 80016dc:	b948      	cbnz	r0, 80016f2 <__smakebuf_r+0x46>
 80016de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016e2:	059a      	lsls	r2, r3, #22
 80016e4:	d4ee      	bmi.n	80016c4 <__smakebuf_r+0x18>
 80016e6:	f023 0303 	bic.w	r3, r3, #3
 80016ea:	f043 0302 	orr.w	r3, r3, #2
 80016ee:	81a3      	strh	r3, [r4, #12]
 80016f0:	e7e2      	b.n	80016b8 <__smakebuf_r+0xc>
 80016f2:	89a3      	ldrh	r3, [r4, #12]
 80016f4:	6020      	str	r0, [r4, #0]
 80016f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016fa:	81a3      	strh	r3, [r4, #12]
 80016fc:	9b01      	ldr	r3, [sp, #4]
 80016fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001702:	b15b      	cbz	r3, 800171c <__smakebuf_r+0x70>
 8001704:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001708:	4630      	mov	r0, r6
 800170a:	f000 f81d 	bl	8001748 <_isatty_r>
 800170e:	b128      	cbz	r0, 800171c <__smakebuf_r+0x70>
 8001710:	89a3      	ldrh	r3, [r4, #12]
 8001712:	f023 0303 	bic.w	r3, r3, #3
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	81a3      	strh	r3, [r4, #12]
 800171c:	89a3      	ldrh	r3, [r4, #12]
 800171e:	431d      	orrs	r5, r3
 8001720:	81a5      	strh	r5, [r4, #12]
 8001722:	e7cf      	b.n	80016c4 <__smakebuf_r+0x18>

08001724 <_fstat_r>:
 8001724:	b538      	push	{r3, r4, r5, lr}
 8001726:	4d07      	ldr	r5, [pc, #28]	@ (8001744 <_fstat_r+0x20>)
 8001728:	2300      	movs	r3, #0
 800172a:	4604      	mov	r4, r0
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	602b      	str	r3, [r5, #0]
 8001732:	f7fe feb0 	bl	8000496 <_fstat>
 8001736:	1c43      	adds	r3, r0, #1
 8001738:	d102      	bne.n	8001740 <_fstat_r+0x1c>
 800173a:	682b      	ldr	r3, [r5, #0]
 800173c:	b103      	cbz	r3, 8001740 <_fstat_r+0x1c>
 800173e:	6023      	str	r3, [r4, #0]
 8001740:	bd38      	pop	{r3, r4, r5, pc}
 8001742:	bf00      	nop
 8001744:	200001c4 	.word	0x200001c4

08001748 <_isatty_r>:
 8001748:	b538      	push	{r3, r4, r5, lr}
 800174a:	4d06      	ldr	r5, [pc, #24]	@ (8001764 <_isatty_r+0x1c>)
 800174c:	2300      	movs	r3, #0
 800174e:	4604      	mov	r4, r0
 8001750:	4608      	mov	r0, r1
 8001752:	602b      	str	r3, [r5, #0]
 8001754:	f7fe feaf 	bl	80004b6 <_isatty>
 8001758:	1c43      	adds	r3, r0, #1
 800175a:	d102      	bne.n	8001762 <_isatty_r+0x1a>
 800175c:	682b      	ldr	r3, [r5, #0]
 800175e:	b103      	cbz	r3, 8001762 <_isatty_r+0x1a>
 8001760:	6023      	str	r3, [r4, #0]
 8001762:	bd38      	pop	{r3, r4, r5, pc}
 8001764:	200001c4 	.word	0x200001c4

08001768 <_init>:
 8001768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800176a:	bf00      	nop
 800176c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800176e:	bc08      	pop	{r3}
 8001770:	469e      	mov	lr, r3
 8001772:	4770      	bx	lr

08001774 <_fini>:
 8001774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001776:	bf00      	nop
 8001778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800177a:	bc08      	pop	{r3}
 800177c:	469e      	mov	lr, r3
 800177e:	4770      	bx	lr
