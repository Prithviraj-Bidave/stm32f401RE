
21_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cb4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001e54  08001e54  00002e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ea0  08001ea0  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001ea0  08001ea0  00002ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001ea8  08001ea8  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ea8  08001ea8  00002ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001eac  08001eac  00002eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001eb0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000060  08001f0c  00003060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08001f0c  000031f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018cf  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000080e  00000000  00000000  0000495b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  00005170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000154  00000000  00000000  00005358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fbeb  00000000  00000000  000054ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002d54  00000000  00000000  00015097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005553e  00000000  00000000  00017deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006d329  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e64  00000000  00000000  0006d36c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0006e1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001e3c 	.word	0x08001e3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08001e3c 	.word	0x08001e3c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <adxl_read_address>:

char data;

uint8_t data_rec[6];
void adxl_read_address(uint8_t reg)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
	I2C1_byteRead(DEVICE_ADDR, reg, &data);
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	4a04      	ldr	r2, [pc, #16]	@ (800086c <adxl_read_address+0x20>)
 800085a:	4619      	mov	r1, r3
 800085c:	2053      	movs	r0, #83	@ 0x53
 800085e:	f000 f8e9 	bl	8000a34 <I2C1_byteRead>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	2000007c 	.word	0x2000007c

08000870 <adxl_write>:

void adxl_write(uint8_t reg, char value)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	460a      	mov	r2, r1
 800087a:	71fb      	strb	r3, [r7, #7]
 800087c:	4613      	mov	r3, r2
 800087e:	71bb      	strb	r3, [r7, #6]
	char data[1];
	data[0] = value;
 8000880:	79bb      	ldrb	r3, [r7, #6]
 8000882:	733b      	strb	r3, [r7, #12]
	I2C1_burstWrite(DEVICE_ADDR, reg, 1, data);
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	79f9      	ldrb	r1, [r7, #7]
 800088a:	2201      	movs	r2, #1
 800088c:	2053      	movs	r0, #83	@ 0x53
 800088e:	f000 f945 	bl	8000b1c <I2C1_burstWrite>
}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <adxl_read_values>:

void adxl_read_values(uint8_t reg)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	I2C1_burstWrite(DEVICE_ADDR, reg, 6, (char *) data_rec);
 80008a6:	79f9      	ldrb	r1, [r7, #7]
 80008a8:	4b04      	ldr	r3, [pc, #16]	@ (80008bc <adxl_read_values+0x20>)
 80008aa:	2206      	movs	r2, #6
 80008ac:	2053      	movs	r0, #83	@ 0x53
 80008ae:	f000 f935 	bl	8000b1c <I2C1_burstWrite>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000080 	.word	0x20000080

080008c0 <adxl_init>:

void adxl_init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	/*Enable I2C Module*/
	I2C1_init();
 80008c4:	f000 f812 	bl	80008ec <I2C1_init>
	/*Read the DEVID, should return 0xE5*/
	adxl_read_address(DEVID_R);
 80008c8:	2000      	movs	r0, #0
 80008ca:	f7ff ffbf 	bl	800084c <adxl_read_address>
	/*Set data format range to +-4g*/
	adxl_write(DATA_FORMAT_R, FOUR_G);
 80008ce:	2101      	movs	r1, #1
 80008d0:	2031      	movs	r0, #49	@ 0x31
 80008d2:	f7ff ffcd 	bl	8000870 <adxl_write>
	/*Reset all bits*/
	adxl_write(POWER_CTL_R, RESET);
 80008d6:	2100      	movs	r1, #0
 80008d8:	202d      	movs	r0, #45	@ 0x2d
 80008da:	f7ff ffc9 	bl	8000870 <adxl_write>
	/*Configure power control measure bit*/
	adxl_write(POWER_CTL_R, SET_MEASURE_B);
 80008de:	2108      	movs	r1, #8
 80008e0:	202d      	movs	r0, #45	@ 0x2d
 80008e2:	f7ff ffc5 	bl	8000870 <adxl_write>
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <I2C1_init>:
/*Pinout
 * PB8 ---- SCL
 * PB9 ---- SDA
 */
void I2C1_init(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOB*/
	RCC->AHB1ENR |= GPIOBEN;
 80008f0:	4b4d      	ldr	r3, [pc, #308]	@ (8000a28 <I2C1_init+0x13c>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f4:	4a4c      	ldr	r2, [pc, #304]	@ (8000a28 <I2C1_init+0x13c>)
 80008f6:	f043 0302 	orr.w	r3, r3, #2
 80008fa:	6313      	str	r3, [r2, #48]	@ 0x30
	/*Set PB8 and PB9 mode to alternate function*/
	GPIOB->MODER &=~(1U<<16);
 80008fc:	4b4b      	ldr	r3, [pc, #300]	@ (8000a2c <I2C1_init+0x140>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a4a      	ldr	r2, [pc, #296]	@ (8000a2c <I2C1_init+0x140>)
 8000902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000906:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<17);
 8000908:	4b48      	ldr	r3, [pc, #288]	@ (8000a2c <I2C1_init+0x140>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a47      	ldr	r2, [pc, #284]	@ (8000a2c <I2C1_init+0x140>)
 800090e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000912:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &=~(1U<<18);
 8000914:	4b45      	ldr	r3, [pc, #276]	@ (8000a2c <I2C1_init+0x140>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a44      	ldr	r2, [pc, #272]	@ (8000a2c <I2C1_init+0x140>)
 800091a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800091e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<19);
 8000920:	4b42      	ldr	r3, [pc, #264]	@ (8000a2c <I2C1_init+0x140>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a41      	ldr	r2, [pc, #260]	@ (8000a2c <I2C1_init+0x140>)
 8000926:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800092a:	6013      	str	r3, [r2, #0]
	/*Set PB8 and PB9 output type to open drain*/
	GPIOB->OTYPER |= (1U<<8);
 800092c:	4b3f      	ldr	r3, [pc, #252]	@ (8000a2c <I2C1_init+0x140>)
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	4a3e      	ldr	r2, [pc, #248]	@ (8000a2c <I2C1_init+0x140>)
 8000932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000936:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (1U<<9);
 8000938:	4b3c      	ldr	r3, [pc, #240]	@ (8000a2c <I2C1_init+0x140>)
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	4a3b      	ldr	r2, [pc, #236]	@ (8000a2c <I2C1_init+0x140>)
 800093e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000942:	6053      	str	r3, [r2, #4]
	/*Enable pull up for PB8 and PB9*/
	GPIOB->PUPDR &=~(1U<<17);
 8000944:	4b39      	ldr	r3, [pc, #228]	@ (8000a2c <I2C1_init+0x140>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	4a38      	ldr	r2, [pc, #224]	@ (8000a2c <I2C1_init+0x140>)
 800094a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800094e:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (1U<<16);
 8000950:	4b36      	ldr	r3, [pc, #216]	@ (8000a2c <I2C1_init+0x140>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	4a35      	ldr	r2, [pc, #212]	@ (8000a2c <I2C1_init+0x140>)
 8000956:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800095a:	60d3      	str	r3, [r2, #12]

	GPIOB->PUPDR &=~(1U<<19);
 800095c:	4b33      	ldr	r3, [pc, #204]	@ (8000a2c <I2C1_init+0x140>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	4a32      	ldr	r2, [pc, #200]	@ (8000a2c <I2C1_init+0x140>)
 8000962:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000966:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (1U<<18);
 8000968:	4b30      	ldr	r3, [pc, #192]	@ (8000a2c <I2C1_init+0x140>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	4a2f      	ldr	r2, [pc, #188]	@ (8000a2c <I2C1_init+0x140>)
 800096e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000972:	60d3      	str	r3, [r2, #12]

	/*Set PB8 and PB9 alternate function type to I2C(AF4)*/
	GPIOB->AFR[1] &=~(1U<<0);
 8000974:	4b2d      	ldr	r3, [pc, #180]	@ (8000a2c <I2C1_init+0x140>)
 8000976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000978:	4a2c      	ldr	r2, [pc, #176]	@ (8000a2c <I2C1_init+0x140>)
 800097a:	f023 0301 	bic.w	r3, r3, #1
 800097e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &=~(1U<<1);
 8000980:	4b2a      	ldr	r3, [pc, #168]	@ (8000a2c <I2C1_init+0x140>)
 8000982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000984:	4a29      	ldr	r2, [pc, #164]	@ (8000a2c <I2C1_init+0x140>)
 8000986:	f023 0302 	bic.w	r3, r3, #2
 800098a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (1U<<2);
 800098c:	4b27      	ldr	r3, [pc, #156]	@ (8000a2c <I2C1_init+0x140>)
 800098e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000990:	4a26      	ldr	r2, [pc, #152]	@ (8000a2c <I2C1_init+0x140>)
 8000992:	f043 0304 	orr.w	r3, r3, #4
 8000996:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &=~(1U<<3);
 8000998:	4b24      	ldr	r3, [pc, #144]	@ (8000a2c <I2C1_init+0x140>)
 800099a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800099c:	4a23      	ldr	r2, [pc, #140]	@ (8000a2c <I2C1_init+0x140>)
 800099e:	f023 0308 	bic.w	r3, r3, #8
 80009a2:	6253      	str	r3, [r2, #36]	@ 0x24

	GPIOB->AFR[1] &=~(1U<<4);
 80009a4:	4b21      	ldr	r3, [pc, #132]	@ (8000a2c <I2C1_init+0x140>)
 80009a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009a8:	4a20      	ldr	r2, [pc, #128]	@ (8000a2c <I2C1_init+0x140>)
 80009aa:	f023 0310 	bic.w	r3, r3, #16
 80009ae:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &=~(1U<<5);
 80009b0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <I2C1_init+0x140>)
 80009b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009b4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a2c <I2C1_init+0x140>)
 80009b6:	f023 0320 	bic.w	r3, r3, #32
 80009ba:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (1U<<6);
 80009bc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <I2C1_init+0x140>)
 80009be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009c0:	4a1a      	ldr	r2, [pc, #104]	@ (8000a2c <I2C1_init+0x140>)
 80009c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009c6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &=~(1U<<7);
 80009c8:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <I2C1_init+0x140>)
 80009ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009cc:	4a17      	ldr	r2, [pc, #92]	@ (8000a2c <I2C1_init+0x140>)
 80009ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80009d2:	6253      	str	r3, [r2, #36]	@ 0x24

		/*Enable clock access to I2C1*/
	RCC->APB1ENR |= I2C1EN;
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <I2C1_init+0x13c>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d8:	4a13      	ldr	r2, [pc, #76]	@ (8000a28 <I2C1_init+0x13c>)
 80009da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009de:	6413      	str	r3, [r2, #64]	@ 0x40
	/*Enter reset mode*/
	I2C1->CR1 |= (1U<<5);
 80009e0:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <I2C1_init+0x144>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a12      	ldr	r2, [pc, #72]	@ (8000a30 <I2C1_init+0x144>)
 80009e6:	f043 0320 	orr.w	r3, r3, #32
 80009ea:	6013      	str	r3, [r2, #0]
	/*EXIT reset mode*/
	I2C1->CR1 &=~(1U<<5);
 80009ec:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <I2C1_init+0x144>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000a30 <I2C1_init+0x144>)
 80009f2:	f023 0320 	bic.w	r3, r3, #32
 80009f6:	6013      	str	r3, [r2, #0]
	/*Set Peripheral Frequency*/
	I2C1->CR2 |= (1U<<4);
 80009f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <I2C1_init+0x144>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000a30 <I2C1_init+0x144>)
 80009fe:	f043 0310 	orr.w	r3, r3, #16
 8000a02:	6053      	str	r3, [r2, #4]
	/*Set I2C to standard mode, 100khz clock*/
	I2C1->CCR = I2C_100KHz;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <I2C1_init+0x144>)
 8000a06:	2250      	movs	r2, #80	@ 0x50
 8000a08:	61da      	str	r2, [r3, #28]
	/*Set rise time*/
	I2C1->TRISE = I2C_100KHz;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <I2C1_init+0x144>)
 8000a0c:	2250      	movs	r2, #80	@ 0x50
 8000a0e:	621a      	str	r2, [r3, #32]
	/*Enable I2C1 module*/
	I2C1->CR1 |= CR1_PE;
 8000a10:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <I2C1_init+0x144>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a06      	ldr	r2, [pc, #24]	@ (8000a30 <I2C1_init+0x144>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	6013      	str	r3, [r2, #0]

}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020400 	.word	0x40020400
 8000a30:	40005400 	.word	0x40005400

08000a34 <I2C1_byteRead>:


void I2C1_byteRead(char saddr, char maddr, char* data)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	603a      	str	r2, [r7, #0]
 8000a3e:	71fb      	strb	r3, [r7, #7]
 8000a40:	460b      	mov	r3, r1
 8000a42:	71bb      	strb	r3, [r7, #6]
	volatile int tmp;
	/*wait until bus not busy*/
	while(I2C1->SR2 & (SR2_BUSY));
 8000a44:	bf00      	nop
 8000a46:	4b34      	ldr	r3, [pc, #208]	@ (8000b18 <I2C1_byteRead+0xe4>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d1f9      	bne.n	8000a46 <I2C1_byteRead+0x12>
	/*Generate Start Condition*/
	I2C1->CR1 |= CR1_START;
 8000a52:	4b31      	ldr	r3, [pc, #196]	@ (8000b18 <I2C1_byteRead+0xe4>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a30      	ldr	r2, [pc, #192]	@ (8000b18 <I2C1_byteRead+0xe4>)
 8000a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a5c:	6013      	str	r3, [r2, #0]
	/*Wait until start flag is set*/
	while(!(I2C1->SR1 & (SR1_SB)));
 8000a5e:	bf00      	nop
 8000a60:	4b2d      	ldr	r3, [pc, #180]	@ (8000b18 <I2C1_byteRead+0xe4>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d0f9      	beq.n	8000a60 <I2C1_byteRead+0x2c>
	/* Transmit slave address + Write */
	I2C1->DR = saddr << 1;
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8000b18 <I2C1_byteRead+0xe4>)
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	6113      	str	r3, [r2, #16]
	/*Wait until addr flag is set*/
	while (!(I2C1->SR1 & (SR1_ADDR)));
 8000a74:	bf00      	nop
 8000a76:	4b28      	ldr	r3, [pc, #160]	@ (8000b18 <I2C1_byteRead+0xe4>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0f9      	beq.n	8000a76 <I2C1_byteRead+0x42>
	/*clear addr flag*/
	tmp = I2C1->SR2;
 8000a82:	4b25      	ldr	r3, [pc, #148]	@ (8000b18 <I2C1_byteRead+0xe4>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	60fb      	str	r3, [r7, #12]
	/*Send memory address*/
	I2C1->DR = maddr;
 8000a88:	4a23      	ldr	r2, [pc, #140]	@ (8000b18 <I2C1_byteRead+0xe4>)
 8000a8a:	79bb      	ldrb	r3, [r7, #6]
 8000a8c:	6113      	str	r3, [r2, #16]
	/*Wait until transmitter ready*/
	while(!(I2C1->SR1 & SR1_TXE));
 8000a8e:	bf00      	nop
 8000a90:	4b21      	ldr	r3, [pc, #132]	@ (8000b18 <I2C1_byteRead+0xe4>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d0f9      	beq.n	8000a90 <I2C1_byteRead+0x5c>

	/*Generate restart Condition*/
	I2C1->CR1 |= CR1_START;
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b18 <I2C1_byteRead+0xe4>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b18 <I2C1_byteRead+0xe4>)
 8000aa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aa6:	6013      	str	r3, [r2, #0]
	/*Wait until start flag is set*/
	while(!(I2C1->SR1 & (SR1_SB)));
 8000aa8:	bf00      	nop
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8000b18 <I2C1_byteRead+0xe4>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d0f9      	beq.n	8000aaa <I2C1_byteRead+0x76>
	/*Transmit slave address + Read*/
	I2C1->DR = saddr << 1|1 ;
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	f043 0201 	orr.w	r2, r3, #1
 8000abe:	4b16      	ldr	r3, [pc, #88]	@ (8000b18 <I2C1_byteRead+0xe4>)
 8000ac0:	611a      	str	r2, [r3, #16]
	/*Wait until addr flag is set*/
	while(!(I2C1->SR1 & (SR1_ADDR)));
 8000ac2:	bf00      	nop
 8000ac4:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <I2C1_byteRead+0xe4>)
 8000ac6:	695b      	ldr	r3, [r3, #20]
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d0f9      	beq.n	8000ac4 <I2C1_byteRead+0x90>
	/*Disable Acknowledge*/
	I2C1->CR1 &=~CR1_ACK;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <I2C1_byteRead+0xe4>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a10      	ldr	r2, [pc, #64]	@ (8000b18 <I2C1_byteRead+0xe4>)
 8000ad6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000ada:	6013      	str	r3, [r2, #0]
	/*clear addr flag*/
	tmp = I2C1->SR2;
 8000adc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <I2C1_byteRead+0xe4>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	60fb      	str	r3, [r7, #12]
	/*Generate Stop after data received*/
	I2C1->CR1 |= CR1_STOP;
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <I2C1_byteRead+0xe4>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8000b18 <I2C1_byteRead+0xe4>)
 8000ae8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aec:	6013      	str	r3, [r2, #0]
	/*Wait until RXNE flag is set*/
	while(!(I2C1->SR1 & SR1_RXNE));
 8000aee:	bf00      	nop
 8000af0:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <I2C1_byteRead+0xe4>)
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d0f9      	beq.n	8000af0 <I2C1_byteRead+0xbc>

	/*Read from data register*/
	*data++ = I2C1->DR;
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <I2C1_byteRead+0xe4>)
 8000afe:	6919      	ldr	r1, [r3, #16]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	1c5a      	adds	r2, r3, #1
 8000b04:	603a      	str	r2, [r7, #0]
 8000b06:	b2ca      	uxtb	r2, r1
 8000b08:	701a      	strb	r2, [r3, #0]
}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40005400 	.word	0x40005400

08000b1c <I2C1_burstWrite>:
		}
	}
}

void I2C1_burstWrite(char saddr, char maddr, int n, char *data)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b087      	sub	sp, #28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60ba      	str	r2, [r7, #8]
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4603      	mov	r3, r0
 8000b28:	73fb      	strb	r3, [r7, #15]
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	73bb      	strb	r3, [r7, #14]
	volatile int tmp;
	/*wait until bus not busy*/
	while(I2C1->SR2 & (SR2_BUSY));
 8000b2e:	bf00      	nop
 8000b30:	4b2a      	ldr	r3, [pc, #168]	@ (8000bdc <I2C1_burstWrite+0xc0>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d1f9      	bne.n	8000b30 <I2C1_burstWrite+0x14>
	/*Generate Start Condition*/
	I2C1->CR1 |= CR1_START;
 8000b3c:	4b27      	ldr	r3, [pc, #156]	@ (8000bdc <I2C1_burstWrite+0xc0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a26      	ldr	r2, [pc, #152]	@ (8000bdc <I2C1_burstWrite+0xc0>)
 8000b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b46:	6013      	str	r3, [r2, #0]
	/*Wait until start flag is set*/
	while(!(I2C1->SR1 & (SR1_SB)));
 8000b48:	bf00      	nop
 8000b4a:	4b24      	ldr	r3, [pc, #144]	@ (8000bdc <I2C1_burstWrite+0xc0>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d0f9      	beq.n	8000b4a <I2C1_burstWrite+0x2e>
	/*Transmit slave address + Write*/
	I2C1->DR = saddr << 1;
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	4a20      	ldr	r2, [pc, #128]	@ (8000bdc <I2C1_burstWrite+0xc0>)
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	6113      	str	r3, [r2, #16]
	/*Wait until addr flag is set*/
	while(!(I2C1->SR1 & (SR1_ADDR)));
 8000b5e:	bf00      	nop
 8000b60:	4b1e      	ldr	r3, [pc, #120]	@ (8000bdc <I2C1_burstWrite+0xc0>)
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	f003 0302 	and.w	r3, r3, #2
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d0f9      	beq.n	8000b60 <I2C1_burstWrite+0x44>
	/*clear addr flag*/
	tmp = I2C1->SR2;
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bdc <I2C1_burstWrite+0xc0>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	613b      	str	r3, [r7, #16]
	/*Wait until data register empty*/
	while(!(I2C1->SR1 & SR1_TXE));
 8000b72:	bf00      	nop
 8000b74:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <I2C1_burstWrite+0xc0>)
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d0f9      	beq.n	8000b74 <I2C1_burstWrite+0x58>
	/*Send memory address*/
	I2C1->DR = maddr;
 8000b80:	4a16      	ldr	r2, [pc, #88]	@ (8000bdc <I2C1_burstWrite+0xc0>)
 8000b82:	7bbb      	ldrb	r3, [r7, #14]
 8000b84:	6113      	str	r3, [r2, #16]
	for(int i = 0; i < n; i++)
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	e00f      	b.n	8000bac <I2C1_burstWrite+0x90>
	{
		/*Wait until data register empty*/
		while(!(I2C1->SR1 & SR1_TXE));
 8000b8c:	bf00      	nop
 8000b8e:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <I2C1_burstWrite+0xc0>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0f9      	beq.n	8000b8e <I2C1_burstWrite+0x72>
		/*Send memory address*/
		I2C1->DR = *data++;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	1c5a      	adds	r2, r3, #1
 8000b9e:	607a      	str	r2, [r7, #4]
 8000ba0:	781a      	ldrb	r2, [r3, #0]
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <I2C1_burstWrite+0xc0>)
 8000ba4:	611a      	str	r2, [r3, #16]
	for(int i = 0; i < n; i++)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697a      	ldr	r2, [r7, #20]
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	dbeb      	blt.n	8000b8c <I2C1_burstWrite+0x70>
	}
	while(!(I2C1->SR1 & SR1_BTF));
 8000bb4:	bf00      	nop
 8000bb6:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <I2C1_burstWrite+0xc0>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d0f9      	beq.n	8000bb6 <I2C1_burstWrite+0x9a>
	/*Generate Stop Condition*/
	I2C1->CR1 |= CR1_STOP;
 8000bc2:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <I2C1_burstWrite+0xc0>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a05      	ldr	r2, [pc, #20]	@ (8000bdc <I2C1_burstWrite+0xc0>)
 8000bc8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bcc:	6013      	str	r3, [r2, #0]
}
 8000bce:	bf00      	nop
 8000bd0:	371c      	adds	r7, #28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40005400 	.word	0x40005400

08000be0 <main>:
extern uint8_t data_rec[6];
const float FOUR_G_SCALE_FACT = 0.0078;


int main(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	uart2_rxtx_init();
 8000be4:	f000 f924 	bl	8000e30 <uart2_rxtx_init>
	adxl_init();
 8000be8:	f7ff fe6a 	bl	80008c0 <adxl_init>
	printf("System Initializing\n\r");
 8000bec:	4830      	ldr	r0, [pc, #192]	@ (8000cb0 <main+0xd0>)
 8000bee:	f000 fab9 	bl	8001164 <iprintf>

	while (1)
	{
		adxl_read_values(DATA_START_ADDR);
 8000bf2:	2032      	movs	r0, #50	@ 0x32
 8000bf4:	f7ff fe52 	bl	800089c <adxl_read_values>
		x = ((data_rec[1]<<8)|data_rec[0]);
 8000bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb4 <main+0xd4>)
 8000bfa:	785b      	ldrb	r3, [r3, #1]
 8000bfc:	b21b      	sxth	r3, r3
 8000bfe:	021b      	lsls	r3, r3, #8
 8000c00:	b21a      	sxth	r2, r3
 8000c02:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb4 <main+0xd4>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b21b      	sxth	r3, r3
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	b21a      	sxth	r2, r3
 8000c0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb8 <main+0xd8>)
 8000c0e:	801a      	strh	r2, [r3, #0]
		y = ((data_rec[3]<<8)|data_rec[2]);
 8000c10:	4b28      	ldr	r3, [pc, #160]	@ (8000cb4 <main+0xd4>)
 8000c12:	78db      	ldrb	r3, [r3, #3]
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	021b      	lsls	r3, r3, #8
 8000c18:	b21a      	sxth	r2, r3
 8000c1a:	4b26      	ldr	r3, [pc, #152]	@ (8000cb4 <main+0xd4>)
 8000c1c:	789b      	ldrb	r3, [r3, #2]
 8000c1e:	b21b      	sxth	r3, r3
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b21a      	sxth	r2, r3
 8000c24:	4b25      	ldr	r3, [pc, #148]	@ (8000cbc <main+0xdc>)
 8000c26:	801a      	strh	r2, [r3, #0]
		z = ((data_rec[5]<<8)|data_rec[4]);
 8000c28:	4b22      	ldr	r3, [pc, #136]	@ (8000cb4 <main+0xd4>)
 8000c2a:	795b      	ldrb	r3, [r3, #5]
 8000c2c:	b21b      	sxth	r3, r3
 8000c2e:	021b      	lsls	r3, r3, #8
 8000c30:	b21a      	sxth	r2, r3
 8000c32:	4b20      	ldr	r3, [pc, #128]	@ (8000cb4 <main+0xd4>)
 8000c34:	791b      	ldrb	r3, [r3, #4]
 8000c36:	b21b      	sxth	r3, r3
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	b21a      	sxth	r2, r3
 8000c3c:	4b20      	ldr	r3, [pc, #128]	@ (8000cc0 <main+0xe0>)
 8000c3e:	801a      	strh	r2, [r3, #0]

		xg = x * 0.0078;
 8000c40:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <main+0xd8>)
 8000c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fd96 	bl	8000778 <__aeabi_i2d>
 8000c4c:	a316      	add	r3, pc, #88	@ (adr r3, 8000ca8 <main+0xc8>)
 8000c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c52:	f7ff fb15 	bl	8000280 <__aeabi_dmul>
 8000c56:	4602      	mov	r2, r0
 8000c58:	460b      	mov	r3, r1
 8000c5a:	491a      	ldr	r1, [pc, #104]	@ (8000cc4 <main+0xe4>)
 8000c5c:	e9c1 2300 	strd	r2, r3, [r1]
		yg = y * 0.0078;
 8000c60:	4b16      	ldr	r3, [pc, #88]	@ (8000cbc <main+0xdc>)
 8000c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fd86 	bl	8000778 <__aeabi_i2d>
 8000c6c:	a30e      	add	r3, pc, #56	@ (adr r3, 8000ca8 <main+0xc8>)
 8000c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c72:	f7ff fb05 	bl	8000280 <__aeabi_dmul>
 8000c76:	4602      	mov	r2, r0
 8000c78:	460b      	mov	r3, r1
 8000c7a:	4913      	ldr	r1, [pc, #76]	@ (8000cc8 <main+0xe8>)
 8000c7c:	e9c1 2300 	strd	r2, r3, [r1]
		zg = z * 0.0078;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <main+0xe0>)
 8000c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fd76 	bl	8000778 <__aeabi_i2d>
 8000c8c:	a306      	add	r3, pc, #24	@ (adr r3, 8000ca8 <main+0xc8>)
 8000c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c92:	f7ff faf5 	bl	8000280 <__aeabi_dmul>
 8000c96:	4602      	mov	r2, r0
 8000c98:	460b      	mov	r3, r1
 8000c9a:	490c      	ldr	r1, [pc, #48]	@ (8000ccc <main+0xec>)
 8000c9c:	e9c1 2300 	strd	r2, r3, [r1]
		adxl_read_values(DATA_START_ADDR);
 8000ca0:	bf00      	nop
 8000ca2:	e7a6      	b.n	8000bf2 <main+0x12>
 8000ca4:	f3af 8000 	nop.w
 8000ca8:	8e8a71de 	.word	0x8e8a71de
 8000cac:	3f7ff2e4 	.word	0x3f7ff2e4
 8000cb0:	08001e54 	.word	0x08001e54
 8000cb4:	20000080 	.word	0x20000080
 8000cb8:	20000086 	.word	0x20000086
 8000cbc:	20000088 	.word	0x20000088
 8000cc0:	2000008a 	.word	0x2000008a
 8000cc4:	20000090 	.word	0x20000090
 8000cc8:	20000098 	.word	0x20000098
 8000ccc:	200000a0 	.word	0x200000a0

08000cd0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	e00a      	b.n	8000cf8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ce2:	f3af 8000 	nop.w
 8000ce6:	4601      	mov	r1, r0
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	60ba      	str	r2, [r7, #8]
 8000cee:	b2ca      	uxtb	r2, r1
 8000cf0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	dbf0      	blt.n	8000ce2 <_read+0x12>
  }

  return len;
 8000d00:	687b      	ldr	r3, [r7, #4]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	e009      	b.n	8000d30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	60ba      	str	r2, [r7, #8]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 f877 	bl	8000e18 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	697a      	ldr	r2, [r7, #20]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	dbf1      	blt.n	8000d1c <_write+0x12>
  }
  return len;
 8000d38:	687b      	ldr	r3, [r7, #4]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <_close>:

int _close(int file)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d6a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <_isatty>:

int _isatty(int file)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db4:	4a14      	ldr	r2, [pc, #80]	@ (8000e08 <_sbrk+0x5c>)
 8000db6:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <_sbrk+0x60>)
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc0:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d102      	bne.n	8000dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <_sbrk+0x64>)
 8000dca:	4a12      	ldr	r2, [pc, #72]	@ (8000e14 <_sbrk+0x68>)
 8000dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dce:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d207      	bcs.n	8000dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ddc:	f000 fa66 	bl	80012ac <__errno>
 8000de0:	4603      	mov	r3, r0
 8000de2:	220c      	movs	r2, #12
 8000de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dea:	e009      	b.n	8000e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dec:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df2:	4b07      	ldr	r3, [pc, #28]	@ (8000e10 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	4a05      	ldr	r2, [pc, #20]	@ (8000e10 <_sbrk+0x64>)
 8000dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20018000 	.word	0x20018000
 8000e0c:	00000400 	.word	0x00000400
 8000e10:	200000a8 	.word	0x200000a8
 8000e14:	200001f8 	.word	0x200001f8

08000e18 <__io_putchar>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);

int __io_putchar(int ch)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f000 f875 	bl	8000f10 <uart2_write>
	return ch;
 8000e26:	687b      	ldr	r3, [r7, #4]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <uart2_rxtx_init>:
}



void uart2_rxtx_init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	/******Configure UART gpio pins******/
	RCC->AHB1ENR |= GPIOAEN;
 8000e34:	4b32      	ldr	r3, [pc, #200]	@ (8000f00 <uart2_rxtx_init+0xd0>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e38:	4a31      	ldr	r2, [pc, #196]	@ (8000f00 <uart2_rxtx_init+0xd0>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER |= (1U<<5);
 8000e40:	4b30      	ldr	r3, [pc, #192]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a2f      	ldr	r2, [pc, #188]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000e46:	f043 0320 	orr.w	r3, r3, #32
 8000e4a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<4);
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a2c      	ldr	r2, [pc, #176]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000e52:	f023 0310 	bic.w	r3, r3, #16
 8000e56:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &=~(1U<<11);
 8000e58:	4b2a      	ldr	r3, [pc, #168]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000e5a:	6a1b      	ldr	r3, [r3, #32]
 8000e5c:	4a29      	ldr	r2, [pc, #164]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000e5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000e62:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000e64:	4b27      	ldr	r3, [pc, #156]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000e66:	6a1b      	ldr	r3, [r3, #32]
 8000e68:	4a26      	ldr	r2, [pc, #152]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000e6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e6e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000e70:	4b24      	ldr	r3, [pc, #144]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000e72:	6a1b      	ldr	r3, [r3, #32]
 8000e74:	4a23      	ldr	r2, [pc, #140]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000e76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e7a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<8);
 8000e7c:	4b21      	ldr	r3, [pc, #132]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000e7e:	6a1b      	ldr	r3, [r3, #32]
 8000e80:	4a20      	ldr	r2, [pc, #128]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000e82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e86:	6213      	str	r3, [r2, #32]

	GPIOA->MODER |= (1U<<7);
 8000e88:	4b1e      	ldr	r3, [pc, #120]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e92:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<6);
 8000e94:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a1a      	ldr	r2, [pc, #104]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000e9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000e9e:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &=~(1U<<15);
 8000ea0:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000ea2:	6a1b      	ldr	r3, [r3, #32]
 8000ea4:	4a17      	ldr	r2, [pc, #92]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000ea6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000eaa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 8000eac:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000eae:	6a1b      	ldr	r3, [r3, #32]
 8000eb0:	4a14      	ldr	r2, [pc, #80]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000eb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	4a11      	ldr	r2, [pc, #68]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000ebe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ec2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<12);
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f04 <uart2_rxtx_init+0xd4>)
 8000eca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ece:	6213      	str	r3, [r2, #32]

	/******Configure UART module******/
	/*Enable clock access to uart2*/
	RCC->APB1ENR |= UART2EN;
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f00 <uart2_rxtx_init+0xd0>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8000f00 <uart2_rxtx_init+0xd0>)
 8000ed6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eda:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000edc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ee0:	4909      	ldr	r1, [pc, #36]	@ (8000f08 <uart2_rxtx_init+0xd8>)
 8000ee2:	480a      	ldr	r0, [pc, #40]	@ (8000f0c <uart2_rxtx_init+0xdc>)
 8000ee4:	f000 f82c 	bl	8000f40 <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000ee8:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <uart2_rxtx_init+0xdc>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	60da      	str	r2, [r3, #12]

	/*Enable UART module*/
	USART2->CR1 |= CR1_UE;
 8000eee:	4b07      	ldr	r3, [pc, #28]	@ (8000f0c <uart2_rxtx_init+0xdc>)
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	4a06      	ldr	r2, [pc, #24]	@ (8000f0c <uart2_rxtx_init+0xdc>)
 8000ef4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ef8:	60d3      	str	r3, [r2, #12]
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000
 8000f08:	00f42400 	.word	0x00f42400
 8000f0c:	40004400 	.word	0x40004400

08000f10 <uart2_write>:
	/*Read the data register*/
	return USART2->DR;
}

void uart2_write(int ch)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE));
 8000f18:	bf00      	nop
 8000f1a:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <uart2_write+0x2c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d0f9      	beq.n	8000f1a <uart2_write+0xa>
	/*Write to the transmit data register*/
	USART2->DR = (ch & 0xFF);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a04      	ldr	r2, [pc, #16]	@ (8000f3c <uart2_write+0x2c>)
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	6053      	str	r3, [r2, #4]
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40004400 	.word	0x40004400

08000f40 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	68b8      	ldr	r0, [r7, #8]
 8000f50:	f000 f808 	bl	8000f64 <compute_uart_bd>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	609a      	str	r2, [r3, #8]
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	085a      	lsrs	r2, r3, #1
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	441a      	add	r2, r3
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7c:	b29b      	uxth	r3, r3
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f8c:	480d      	ldr	r0, [pc, #52]	@ (8000fc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f8e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f90:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f94:	480c      	ldr	r0, [pc, #48]	@ (8000fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f96:	490d      	ldr	r1, [pc, #52]	@ (8000fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f98:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd0 <LoopForever+0xe>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000faa:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fac:	4c0a      	ldr	r4, [pc, #40]	@ (8000fd8 <LoopForever+0x16>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fba:	f000 f97d 	bl	80012b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fbe:	f7ff fe0f 	bl	8000be0 <main>

08000fc2 <LoopForever>:

LoopForever:
  b LoopForever
 8000fc2:	e7fe      	b.n	8000fc2 <LoopForever>
  ldr   r0, =_estack
 8000fc4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000fd0:	08001eb0 	.word	0x08001eb0
  ldr r2, =_sbss
 8000fd4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000fd8:	200001f8 	.word	0x200001f8

08000fdc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC_IRQHandler>
	...

08000fe0 <std>:
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	b510      	push	{r4, lr}
 8000fe4:	4604      	mov	r4, r0
 8000fe6:	e9c0 3300 	strd	r3, r3, [r0]
 8000fea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000fee:	6083      	str	r3, [r0, #8]
 8000ff0:	8181      	strh	r1, [r0, #12]
 8000ff2:	6643      	str	r3, [r0, #100]	@ 0x64
 8000ff4:	81c2      	strh	r2, [r0, #14]
 8000ff6:	6183      	str	r3, [r0, #24]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	305c      	adds	r0, #92	@ 0x5c
 8000ffe:	f000 f906 	bl	800120e <memset>
 8001002:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <std+0x58>)
 8001004:	6263      	str	r3, [r4, #36]	@ 0x24
 8001006:	4b0d      	ldr	r3, [pc, #52]	@ (800103c <std+0x5c>)
 8001008:	62a3      	str	r3, [r4, #40]	@ 0x28
 800100a:	4b0d      	ldr	r3, [pc, #52]	@ (8001040 <std+0x60>)
 800100c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800100e:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <std+0x64>)
 8001010:	6323      	str	r3, [r4, #48]	@ 0x30
 8001012:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <std+0x68>)
 8001014:	6224      	str	r4, [r4, #32]
 8001016:	429c      	cmp	r4, r3
 8001018:	d006      	beq.n	8001028 <std+0x48>
 800101a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800101e:	4294      	cmp	r4, r2
 8001020:	d002      	beq.n	8001028 <std+0x48>
 8001022:	33d0      	adds	r3, #208	@ 0xd0
 8001024:	429c      	cmp	r4, r3
 8001026:	d105      	bne.n	8001034 <std+0x54>
 8001028:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800102c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001030:	f000 b966 	b.w	8001300 <__retarget_lock_init_recursive>
 8001034:	bd10      	pop	{r4, pc}
 8001036:	bf00      	nop
 8001038:	08001189 	.word	0x08001189
 800103c:	080011ab 	.word	0x080011ab
 8001040:	080011e3 	.word	0x080011e3
 8001044:	08001207 	.word	0x08001207
 8001048:	200000ac 	.word	0x200000ac

0800104c <stdio_exit_handler>:
 800104c:	4a02      	ldr	r2, [pc, #8]	@ (8001058 <stdio_exit_handler+0xc>)
 800104e:	4903      	ldr	r1, [pc, #12]	@ (800105c <stdio_exit_handler+0x10>)
 8001050:	4803      	ldr	r0, [pc, #12]	@ (8001060 <stdio_exit_handler+0x14>)
 8001052:	f000 b869 	b.w	8001128 <_fwalk_sglue>
 8001056:	bf00      	nop
 8001058:	20000000 	.word	0x20000000
 800105c:	08001b9d 	.word	0x08001b9d
 8001060:	20000010 	.word	0x20000010

08001064 <cleanup_stdio>:
 8001064:	6841      	ldr	r1, [r0, #4]
 8001066:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <cleanup_stdio+0x34>)
 8001068:	4299      	cmp	r1, r3
 800106a:	b510      	push	{r4, lr}
 800106c:	4604      	mov	r4, r0
 800106e:	d001      	beq.n	8001074 <cleanup_stdio+0x10>
 8001070:	f000 fd94 	bl	8001b9c <_fflush_r>
 8001074:	68a1      	ldr	r1, [r4, #8]
 8001076:	4b09      	ldr	r3, [pc, #36]	@ (800109c <cleanup_stdio+0x38>)
 8001078:	4299      	cmp	r1, r3
 800107a:	d002      	beq.n	8001082 <cleanup_stdio+0x1e>
 800107c:	4620      	mov	r0, r4
 800107e:	f000 fd8d 	bl	8001b9c <_fflush_r>
 8001082:	68e1      	ldr	r1, [r4, #12]
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <cleanup_stdio+0x3c>)
 8001086:	4299      	cmp	r1, r3
 8001088:	d004      	beq.n	8001094 <cleanup_stdio+0x30>
 800108a:	4620      	mov	r0, r4
 800108c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001090:	f000 bd84 	b.w	8001b9c <_fflush_r>
 8001094:	bd10      	pop	{r4, pc}
 8001096:	bf00      	nop
 8001098:	200000ac 	.word	0x200000ac
 800109c:	20000114 	.word	0x20000114
 80010a0:	2000017c 	.word	0x2000017c

080010a4 <global_stdio_init.part.0>:
 80010a4:	b510      	push	{r4, lr}
 80010a6:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <global_stdio_init.part.0+0x30>)
 80010a8:	4c0b      	ldr	r4, [pc, #44]	@ (80010d8 <global_stdio_init.part.0+0x34>)
 80010aa:	4a0c      	ldr	r2, [pc, #48]	@ (80010dc <global_stdio_init.part.0+0x38>)
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	4620      	mov	r0, r4
 80010b0:	2200      	movs	r2, #0
 80010b2:	2104      	movs	r1, #4
 80010b4:	f7ff ff94 	bl	8000fe0 <std>
 80010b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80010bc:	2201      	movs	r2, #1
 80010be:	2109      	movs	r1, #9
 80010c0:	f7ff ff8e 	bl	8000fe0 <std>
 80010c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80010c8:	2202      	movs	r2, #2
 80010ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010ce:	2112      	movs	r1, #18
 80010d0:	f7ff bf86 	b.w	8000fe0 <std>
 80010d4:	200001e4 	.word	0x200001e4
 80010d8:	200000ac 	.word	0x200000ac
 80010dc:	0800104d 	.word	0x0800104d

080010e0 <__sfp_lock_acquire>:
 80010e0:	4801      	ldr	r0, [pc, #4]	@ (80010e8 <__sfp_lock_acquire+0x8>)
 80010e2:	f000 b90e 	b.w	8001302 <__retarget_lock_acquire_recursive>
 80010e6:	bf00      	nop
 80010e8:	200001ed 	.word	0x200001ed

080010ec <__sfp_lock_release>:
 80010ec:	4801      	ldr	r0, [pc, #4]	@ (80010f4 <__sfp_lock_release+0x8>)
 80010ee:	f000 b909 	b.w	8001304 <__retarget_lock_release_recursive>
 80010f2:	bf00      	nop
 80010f4:	200001ed 	.word	0x200001ed

080010f8 <__sinit>:
 80010f8:	b510      	push	{r4, lr}
 80010fa:	4604      	mov	r4, r0
 80010fc:	f7ff fff0 	bl	80010e0 <__sfp_lock_acquire>
 8001100:	6a23      	ldr	r3, [r4, #32]
 8001102:	b11b      	cbz	r3, 800110c <__sinit+0x14>
 8001104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001108:	f7ff bff0 	b.w	80010ec <__sfp_lock_release>
 800110c:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <__sinit+0x28>)
 800110e:	6223      	str	r3, [r4, #32]
 8001110:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <__sinit+0x2c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1f5      	bne.n	8001104 <__sinit+0xc>
 8001118:	f7ff ffc4 	bl	80010a4 <global_stdio_init.part.0>
 800111c:	e7f2      	b.n	8001104 <__sinit+0xc>
 800111e:	bf00      	nop
 8001120:	08001065 	.word	0x08001065
 8001124:	200001e4 	.word	0x200001e4

08001128 <_fwalk_sglue>:
 8001128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800112c:	4607      	mov	r7, r0
 800112e:	4688      	mov	r8, r1
 8001130:	4614      	mov	r4, r2
 8001132:	2600      	movs	r6, #0
 8001134:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001138:	f1b9 0901 	subs.w	r9, r9, #1
 800113c:	d505      	bpl.n	800114a <_fwalk_sglue+0x22>
 800113e:	6824      	ldr	r4, [r4, #0]
 8001140:	2c00      	cmp	r4, #0
 8001142:	d1f7      	bne.n	8001134 <_fwalk_sglue+0xc>
 8001144:	4630      	mov	r0, r6
 8001146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800114a:	89ab      	ldrh	r3, [r5, #12]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d907      	bls.n	8001160 <_fwalk_sglue+0x38>
 8001150:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001154:	3301      	adds	r3, #1
 8001156:	d003      	beq.n	8001160 <_fwalk_sglue+0x38>
 8001158:	4629      	mov	r1, r5
 800115a:	4638      	mov	r0, r7
 800115c:	47c0      	blx	r8
 800115e:	4306      	orrs	r6, r0
 8001160:	3568      	adds	r5, #104	@ 0x68
 8001162:	e7e9      	b.n	8001138 <_fwalk_sglue+0x10>

08001164 <iprintf>:
 8001164:	b40f      	push	{r0, r1, r2, r3}
 8001166:	b507      	push	{r0, r1, r2, lr}
 8001168:	4906      	ldr	r1, [pc, #24]	@ (8001184 <iprintf+0x20>)
 800116a:	ab04      	add	r3, sp, #16
 800116c:	6808      	ldr	r0, [r1, #0]
 800116e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001172:	6881      	ldr	r1, [r0, #8]
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	f000 f9e9 	bl	800154c <_vfiprintf_r>
 800117a:	b003      	add	sp, #12
 800117c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001180:	b004      	add	sp, #16
 8001182:	4770      	bx	lr
 8001184:	2000000c 	.word	0x2000000c

08001188 <__sread>:
 8001188:	b510      	push	{r4, lr}
 800118a:	460c      	mov	r4, r1
 800118c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001190:	f000 f868 	bl	8001264 <_read_r>
 8001194:	2800      	cmp	r0, #0
 8001196:	bfab      	itete	ge
 8001198:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800119a:	89a3      	ldrhlt	r3, [r4, #12]
 800119c:	181b      	addge	r3, r3, r0
 800119e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80011a2:	bfac      	ite	ge
 80011a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80011a6:	81a3      	strhlt	r3, [r4, #12]
 80011a8:	bd10      	pop	{r4, pc}

080011aa <__swrite>:
 80011aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011ae:	461f      	mov	r7, r3
 80011b0:	898b      	ldrh	r3, [r1, #12]
 80011b2:	05db      	lsls	r3, r3, #23
 80011b4:	4605      	mov	r5, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	4616      	mov	r6, r2
 80011ba:	d505      	bpl.n	80011c8 <__swrite+0x1e>
 80011bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011c0:	2302      	movs	r3, #2
 80011c2:	2200      	movs	r2, #0
 80011c4:	f000 f83c 	bl	8001240 <_lseek_r>
 80011c8:	89a3      	ldrh	r3, [r4, #12]
 80011ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80011ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80011d2:	81a3      	strh	r3, [r4, #12]
 80011d4:	4632      	mov	r2, r6
 80011d6:	463b      	mov	r3, r7
 80011d8:	4628      	mov	r0, r5
 80011da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011de:	f000 b853 	b.w	8001288 <_write_r>

080011e2 <__sseek>:
 80011e2:	b510      	push	{r4, lr}
 80011e4:	460c      	mov	r4, r1
 80011e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011ea:	f000 f829 	bl	8001240 <_lseek_r>
 80011ee:	1c43      	adds	r3, r0, #1
 80011f0:	89a3      	ldrh	r3, [r4, #12]
 80011f2:	bf15      	itete	ne
 80011f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80011f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80011fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80011fe:	81a3      	strheq	r3, [r4, #12]
 8001200:	bf18      	it	ne
 8001202:	81a3      	strhne	r3, [r4, #12]
 8001204:	bd10      	pop	{r4, pc}

08001206 <__sclose>:
 8001206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800120a:	f000 b809 	b.w	8001220 <_close_r>

0800120e <memset>:
 800120e:	4402      	add	r2, r0
 8001210:	4603      	mov	r3, r0
 8001212:	4293      	cmp	r3, r2
 8001214:	d100      	bne.n	8001218 <memset+0xa>
 8001216:	4770      	bx	lr
 8001218:	f803 1b01 	strb.w	r1, [r3], #1
 800121c:	e7f9      	b.n	8001212 <memset+0x4>
	...

08001220 <_close_r>:
 8001220:	b538      	push	{r3, r4, r5, lr}
 8001222:	4d06      	ldr	r5, [pc, #24]	@ (800123c <_close_r+0x1c>)
 8001224:	2300      	movs	r3, #0
 8001226:	4604      	mov	r4, r0
 8001228:	4608      	mov	r0, r1
 800122a:	602b      	str	r3, [r5, #0]
 800122c:	f7ff fd89 	bl	8000d42 <_close>
 8001230:	1c43      	adds	r3, r0, #1
 8001232:	d102      	bne.n	800123a <_close_r+0x1a>
 8001234:	682b      	ldr	r3, [r5, #0]
 8001236:	b103      	cbz	r3, 800123a <_close_r+0x1a>
 8001238:	6023      	str	r3, [r4, #0]
 800123a:	bd38      	pop	{r3, r4, r5, pc}
 800123c:	200001e8 	.word	0x200001e8

08001240 <_lseek_r>:
 8001240:	b538      	push	{r3, r4, r5, lr}
 8001242:	4d07      	ldr	r5, [pc, #28]	@ (8001260 <_lseek_r+0x20>)
 8001244:	4604      	mov	r4, r0
 8001246:	4608      	mov	r0, r1
 8001248:	4611      	mov	r1, r2
 800124a:	2200      	movs	r2, #0
 800124c:	602a      	str	r2, [r5, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	f7ff fd9e 	bl	8000d90 <_lseek>
 8001254:	1c43      	adds	r3, r0, #1
 8001256:	d102      	bne.n	800125e <_lseek_r+0x1e>
 8001258:	682b      	ldr	r3, [r5, #0]
 800125a:	b103      	cbz	r3, 800125e <_lseek_r+0x1e>
 800125c:	6023      	str	r3, [r4, #0]
 800125e:	bd38      	pop	{r3, r4, r5, pc}
 8001260:	200001e8 	.word	0x200001e8

08001264 <_read_r>:
 8001264:	b538      	push	{r3, r4, r5, lr}
 8001266:	4d07      	ldr	r5, [pc, #28]	@ (8001284 <_read_r+0x20>)
 8001268:	4604      	mov	r4, r0
 800126a:	4608      	mov	r0, r1
 800126c:	4611      	mov	r1, r2
 800126e:	2200      	movs	r2, #0
 8001270:	602a      	str	r2, [r5, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	f7ff fd2c 	bl	8000cd0 <_read>
 8001278:	1c43      	adds	r3, r0, #1
 800127a:	d102      	bne.n	8001282 <_read_r+0x1e>
 800127c:	682b      	ldr	r3, [r5, #0]
 800127e:	b103      	cbz	r3, 8001282 <_read_r+0x1e>
 8001280:	6023      	str	r3, [r4, #0]
 8001282:	bd38      	pop	{r3, r4, r5, pc}
 8001284:	200001e8 	.word	0x200001e8

08001288 <_write_r>:
 8001288:	b538      	push	{r3, r4, r5, lr}
 800128a:	4d07      	ldr	r5, [pc, #28]	@ (80012a8 <_write_r+0x20>)
 800128c:	4604      	mov	r4, r0
 800128e:	4608      	mov	r0, r1
 8001290:	4611      	mov	r1, r2
 8001292:	2200      	movs	r2, #0
 8001294:	602a      	str	r2, [r5, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	f7ff fd37 	bl	8000d0a <_write>
 800129c:	1c43      	adds	r3, r0, #1
 800129e:	d102      	bne.n	80012a6 <_write_r+0x1e>
 80012a0:	682b      	ldr	r3, [r5, #0]
 80012a2:	b103      	cbz	r3, 80012a6 <_write_r+0x1e>
 80012a4:	6023      	str	r3, [r4, #0]
 80012a6:	bd38      	pop	{r3, r4, r5, pc}
 80012a8:	200001e8 	.word	0x200001e8

080012ac <__errno>:
 80012ac:	4b01      	ldr	r3, [pc, #4]	@ (80012b4 <__errno+0x8>)
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	2000000c 	.word	0x2000000c

080012b8 <__libc_init_array>:
 80012b8:	b570      	push	{r4, r5, r6, lr}
 80012ba:	4d0d      	ldr	r5, [pc, #52]	@ (80012f0 <__libc_init_array+0x38>)
 80012bc:	4c0d      	ldr	r4, [pc, #52]	@ (80012f4 <__libc_init_array+0x3c>)
 80012be:	1b64      	subs	r4, r4, r5
 80012c0:	10a4      	asrs	r4, r4, #2
 80012c2:	2600      	movs	r6, #0
 80012c4:	42a6      	cmp	r6, r4
 80012c6:	d109      	bne.n	80012dc <__libc_init_array+0x24>
 80012c8:	4d0b      	ldr	r5, [pc, #44]	@ (80012f8 <__libc_init_array+0x40>)
 80012ca:	4c0c      	ldr	r4, [pc, #48]	@ (80012fc <__libc_init_array+0x44>)
 80012cc:	f000 fdb6 	bl	8001e3c <_init>
 80012d0:	1b64      	subs	r4, r4, r5
 80012d2:	10a4      	asrs	r4, r4, #2
 80012d4:	2600      	movs	r6, #0
 80012d6:	42a6      	cmp	r6, r4
 80012d8:	d105      	bne.n	80012e6 <__libc_init_array+0x2e>
 80012da:	bd70      	pop	{r4, r5, r6, pc}
 80012dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80012e0:	4798      	blx	r3
 80012e2:	3601      	adds	r6, #1
 80012e4:	e7ee      	b.n	80012c4 <__libc_init_array+0xc>
 80012e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80012ea:	4798      	blx	r3
 80012ec:	3601      	adds	r6, #1
 80012ee:	e7f2      	b.n	80012d6 <__libc_init_array+0x1e>
 80012f0:	08001ea8 	.word	0x08001ea8
 80012f4:	08001ea8 	.word	0x08001ea8
 80012f8:	08001ea8 	.word	0x08001ea8
 80012fc:	08001eac 	.word	0x08001eac

08001300 <__retarget_lock_init_recursive>:
 8001300:	4770      	bx	lr

08001302 <__retarget_lock_acquire_recursive>:
 8001302:	4770      	bx	lr

08001304 <__retarget_lock_release_recursive>:
 8001304:	4770      	bx	lr
	...

08001308 <_free_r>:
 8001308:	b538      	push	{r3, r4, r5, lr}
 800130a:	4605      	mov	r5, r0
 800130c:	2900      	cmp	r1, #0
 800130e:	d041      	beq.n	8001394 <_free_r+0x8c>
 8001310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001314:	1f0c      	subs	r4, r1, #4
 8001316:	2b00      	cmp	r3, #0
 8001318:	bfb8      	it	lt
 800131a:	18e4      	addlt	r4, r4, r3
 800131c:	f000 f8e0 	bl	80014e0 <__malloc_lock>
 8001320:	4a1d      	ldr	r2, [pc, #116]	@ (8001398 <_free_r+0x90>)
 8001322:	6813      	ldr	r3, [r2, #0]
 8001324:	b933      	cbnz	r3, 8001334 <_free_r+0x2c>
 8001326:	6063      	str	r3, [r4, #4]
 8001328:	6014      	str	r4, [r2, #0]
 800132a:	4628      	mov	r0, r5
 800132c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001330:	f000 b8dc 	b.w	80014ec <__malloc_unlock>
 8001334:	42a3      	cmp	r3, r4
 8001336:	d908      	bls.n	800134a <_free_r+0x42>
 8001338:	6820      	ldr	r0, [r4, #0]
 800133a:	1821      	adds	r1, r4, r0
 800133c:	428b      	cmp	r3, r1
 800133e:	bf01      	itttt	eq
 8001340:	6819      	ldreq	r1, [r3, #0]
 8001342:	685b      	ldreq	r3, [r3, #4]
 8001344:	1809      	addeq	r1, r1, r0
 8001346:	6021      	streq	r1, [r4, #0]
 8001348:	e7ed      	b.n	8001326 <_free_r+0x1e>
 800134a:	461a      	mov	r2, r3
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	b10b      	cbz	r3, 8001354 <_free_r+0x4c>
 8001350:	42a3      	cmp	r3, r4
 8001352:	d9fa      	bls.n	800134a <_free_r+0x42>
 8001354:	6811      	ldr	r1, [r2, #0]
 8001356:	1850      	adds	r0, r2, r1
 8001358:	42a0      	cmp	r0, r4
 800135a:	d10b      	bne.n	8001374 <_free_r+0x6c>
 800135c:	6820      	ldr	r0, [r4, #0]
 800135e:	4401      	add	r1, r0
 8001360:	1850      	adds	r0, r2, r1
 8001362:	4283      	cmp	r3, r0
 8001364:	6011      	str	r1, [r2, #0]
 8001366:	d1e0      	bne.n	800132a <_free_r+0x22>
 8001368:	6818      	ldr	r0, [r3, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	6053      	str	r3, [r2, #4]
 800136e:	4408      	add	r0, r1
 8001370:	6010      	str	r0, [r2, #0]
 8001372:	e7da      	b.n	800132a <_free_r+0x22>
 8001374:	d902      	bls.n	800137c <_free_r+0x74>
 8001376:	230c      	movs	r3, #12
 8001378:	602b      	str	r3, [r5, #0]
 800137a:	e7d6      	b.n	800132a <_free_r+0x22>
 800137c:	6820      	ldr	r0, [r4, #0]
 800137e:	1821      	adds	r1, r4, r0
 8001380:	428b      	cmp	r3, r1
 8001382:	bf04      	itt	eq
 8001384:	6819      	ldreq	r1, [r3, #0]
 8001386:	685b      	ldreq	r3, [r3, #4]
 8001388:	6063      	str	r3, [r4, #4]
 800138a:	bf04      	itt	eq
 800138c:	1809      	addeq	r1, r1, r0
 800138e:	6021      	streq	r1, [r4, #0]
 8001390:	6054      	str	r4, [r2, #4]
 8001392:	e7ca      	b.n	800132a <_free_r+0x22>
 8001394:	bd38      	pop	{r3, r4, r5, pc}
 8001396:	bf00      	nop
 8001398:	200001f4 	.word	0x200001f4

0800139c <sbrk_aligned>:
 800139c:	b570      	push	{r4, r5, r6, lr}
 800139e:	4e0f      	ldr	r6, [pc, #60]	@ (80013dc <sbrk_aligned+0x40>)
 80013a0:	460c      	mov	r4, r1
 80013a2:	6831      	ldr	r1, [r6, #0]
 80013a4:	4605      	mov	r5, r0
 80013a6:	b911      	cbnz	r1, 80013ae <sbrk_aligned+0x12>
 80013a8:	f000 fcb4 	bl	8001d14 <_sbrk_r>
 80013ac:	6030      	str	r0, [r6, #0]
 80013ae:	4621      	mov	r1, r4
 80013b0:	4628      	mov	r0, r5
 80013b2:	f000 fcaf 	bl	8001d14 <_sbrk_r>
 80013b6:	1c43      	adds	r3, r0, #1
 80013b8:	d103      	bne.n	80013c2 <sbrk_aligned+0x26>
 80013ba:	f04f 34ff 	mov.w	r4, #4294967295
 80013be:	4620      	mov	r0, r4
 80013c0:	bd70      	pop	{r4, r5, r6, pc}
 80013c2:	1cc4      	adds	r4, r0, #3
 80013c4:	f024 0403 	bic.w	r4, r4, #3
 80013c8:	42a0      	cmp	r0, r4
 80013ca:	d0f8      	beq.n	80013be <sbrk_aligned+0x22>
 80013cc:	1a21      	subs	r1, r4, r0
 80013ce:	4628      	mov	r0, r5
 80013d0:	f000 fca0 	bl	8001d14 <_sbrk_r>
 80013d4:	3001      	adds	r0, #1
 80013d6:	d1f2      	bne.n	80013be <sbrk_aligned+0x22>
 80013d8:	e7ef      	b.n	80013ba <sbrk_aligned+0x1e>
 80013da:	bf00      	nop
 80013dc:	200001f0 	.word	0x200001f0

080013e0 <_malloc_r>:
 80013e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013e4:	1ccd      	adds	r5, r1, #3
 80013e6:	f025 0503 	bic.w	r5, r5, #3
 80013ea:	3508      	adds	r5, #8
 80013ec:	2d0c      	cmp	r5, #12
 80013ee:	bf38      	it	cc
 80013f0:	250c      	movcc	r5, #12
 80013f2:	2d00      	cmp	r5, #0
 80013f4:	4606      	mov	r6, r0
 80013f6:	db01      	blt.n	80013fc <_malloc_r+0x1c>
 80013f8:	42a9      	cmp	r1, r5
 80013fa:	d904      	bls.n	8001406 <_malloc_r+0x26>
 80013fc:	230c      	movs	r3, #12
 80013fe:	6033      	str	r3, [r6, #0]
 8001400:	2000      	movs	r0, #0
 8001402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001406:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80014dc <_malloc_r+0xfc>
 800140a:	f000 f869 	bl	80014e0 <__malloc_lock>
 800140e:	f8d8 3000 	ldr.w	r3, [r8]
 8001412:	461c      	mov	r4, r3
 8001414:	bb44      	cbnz	r4, 8001468 <_malloc_r+0x88>
 8001416:	4629      	mov	r1, r5
 8001418:	4630      	mov	r0, r6
 800141a:	f7ff ffbf 	bl	800139c <sbrk_aligned>
 800141e:	1c43      	adds	r3, r0, #1
 8001420:	4604      	mov	r4, r0
 8001422:	d158      	bne.n	80014d6 <_malloc_r+0xf6>
 8001424:	f8d8 4000 	ldr.w	r4, [r8]
 8001428:	4627      	mov	r7, r4
 800142a:	2f00      	cmp	r7, #0
 800142c:	d143      	bne.n	80014b6 <_malloc_r+0xd6>
 800142e:	2c00      	cmp	r4, #0
 8001430:	d04b      	beq.n	80014ca <_malloc_r+0xea>
 8001432:	6823      	ldr	r3, [r4, #0]
 8001434:	4639      	mov	r1, r7
 8001436:	4630      	mov	r0, r6
 8001438:	eb04 0903 	add.w	r9, r4, r3
 800143c:	f000 fc6a 	bl	8001d14 <_sbrk_r>
 8001440:	4581      	cmp	r9, r0
 8001442:	d142      	bne.n	80014ca <_malloc_r+0xea>
 8001444:	6821      	ldr	r1, [r4, #0]
 8001446:	1a6d      	subs	r5, r5, r1
 8001448:	4629      	mov	r1, r5
 800144a:	4630      	mov	r0, r6
 800144c:	f7ff ffa6 	bl	800139c <sbrk_aligned>
 8001450:	3001      	adds	r0, #1
 8001452:	d03a      	beq.n	80014ca <_malloc_r+0xea>
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	442b      	add	r3, r5
 8001458:	6023      	str	r3, [r4, #0]
 800145a:	f8d8 3000 	ldr.w	r3, [r8]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	bb62      	cbnz	r2, 80014bc <_malloc_r+0xdc>
 8001462:	f8c8 7000 	str.w	r7, [r8]
 8001466:	e00f      	b.n	8001488 <_malloc_r+0xa8>
 8001468:	6822      	ldr	r2, [r4, #0]
 800146a:	1b52      	subs	r2, r2, r5
 800146c:	d420      	bmi.n	80014b0 <_malloc_r+0xd0>
 800146e:	2a0b      	cmp	r2, #11
 8001470:	d917      	bls.n	80014a2 <_malloc_r+0xc2>
 8001472:	1961      	adds	r1, r4, r5
 8001474:	42a3      	cmp	r3, r4
 8001476:	6025      	str	r5, [r4, #0]
 8001478:	bf18      	it	ne
 800147a:	6059      	strne	r1, [r3, #4]
 800147c:	6863      	ldr	r3, [r4, #4]
 800147e:	bf08      	it	eq
 8001480:	f8c8 1000 	streq.w	r1, [r8]
 8001484:	5162      	str	r2, [r4, r5]
 8001486:	604b      	str	r3, [r1, #4]
 8001488:	4630      	mov	r0, r6
 800148a:	f000 f82f 	bl	80014ec <__malloc_unlock>
 800148e:	f104 000b 	add.w	r0, r4, #11
 8001492:	1d23      	adds	r3, r4, #4
 8001494:	f020 0007 	bic.w	r0, r0, #7
 8001498:	1ac2      	subs	r2, r0, r3
 800149a:	bf1c      	itt	ne
 800149c:	1a1b      	subne	r3, r3, r0
 800149e:	50a3      	strne	r3, [r4, r2]
 80014a0:	e7af      	b.n	8001402 <_malloc_r+0x22>
 80014a2:	6862      	ldr	r2, [r4, #4]
 80014a4:	42a3      	cmp	r3, r4
 80014a6:	bf0c      	ite	eq
 80014a8:	f8c8 2000 	streq.w	r2, [r8]
 80014ac:	605a      	strne	r2, [r3, #4]
 80014ae:	e7eb      	b.n	8001488 <_malloc_r+0xa8>
 80014b0:	4623      	mov	r3, r4
 80014b2:	6864      	ldr	r4, [r4, #4]
 80014b4:	e7ae      	b.n	8001414 <_malloc_r+0x34>
 80014b6:	463c      	mov	r4, r7
 80014b8:	687f      	ldr	r7, [r7, #4]
 80014ba:	e7b6      	b.n	800142a <_malloc_r+0x4a>
 80014bc:	461a      	mov	r2, r3
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	42a3      	cmp	r3, r4
 80014c2:	d1fb      	bne.n	80014bc <_malloc_r+0xdc>
 80014c4:	2300      	movs	r3, #0
 80014c6:	6053      	str	r3, [r2, #4]
 80014c8:	e7de      	b.n	8001488 <_malloc_r+0xa8>
 80014ca:	230c      	movs	r3, #12
 80014cc:	6033      	str	r3, [r6, #0]
 80014ce:	4630      	mov	r0, r6
 80014d0:	f000 f80c 	bl	80014ec <__malloc_unlock>
 80014d4:	e794      	b.n	8001400 <_malloc_r+0x20>
 80014d6:	6005      	str	r5, [r0, #0]
 80014d8:	e7d6      	b.n	8001488 <_malloc_r+0xa8>
 80014da:	bf00      	nop
 80014dc:	200001f4 	.word	0x200001f4

080014e0 <__malloc_lock>:
 80014e0:	4801      	ldr	r0, [pc, #4]	@ (80014e8 <__malloc_lock+0x8>)
 80014e2:	f7ff bf0e 	b.w	8001302 <__retarget_lock_acquire_recursive>
 80014e6:	bf00      	nop
 80014e8:	200001ec 	.word	0x200001ec

080014ec <__malloc_unlock>:
 80014ec:	4801      	ldr	r0, [pc, #4]	@ (80014f4 <__malloc_unlock+0x8>)
 80014ee:	f7ff bf09 	b.w	8001304 <__retarget_lock_release_recursive>
 80014f2:	bf00      	nop
 80014f4:	200001ec 	.word	0x200001ec

080014f8 <__sfputc_r>:
 80014f8:	6893      	ldr	r3, [r2, #8]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	b410      	push	{r4}
 8001500:	6093      	str	r3, [r2, #8]
 8001502:	da08      	bge.n	8001516 <__sfputc_r+0x1e>
 8001504:	6994      	ldr	r4, [r2, #24]
 8001506:	42a3      	cmp	r3, r4
 8001508:	db01      	blt.n	800150e <__sfputc_r+0x16>
 800150a:	290a      	cmp	r1, #10
 800150c:	d103      	bne.n	8001516 <__sfputc_r+0x1e>
 800150e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001512:	f000 bb6b 	b.w	8001bec <__swbuf_r>
 8001516:	6813      	ldr	r3, [r2, #0]
 8001518:	1c58      	adds	r0, r3, #1
 800151a:	6010      	str	r0, [r2, #0]
 800151c:	7019      	strb	r1, [r3, #0]
 800151e:	4608      	mov	r0, r1
 8001520:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001524:	4770      	bx	lr

08001526 <__sfputs_r>:
 8001526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001528:	4606      	mov	r6, r0
 800152a:	460f      	mov	r7, r1
 800152c:	4614      	mov	r4, r2
 800152e:	18d5      	adds	r5, r2, r3
 8001530:	42ac      	cmp	r4, r5
 8001532:	d101      	bne.n	8001538 <__sfputs_r+0x12>
 8001534:	2000      	movs	r0, #0
 8001536:	e007      	b.n	8001548 <__sfputs_r+0x22>
 8001538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800153c:	463a      	mov	r2, r7
 800153e:	4630      	mov	r0, r6
 8001540:	f7ff ffda 	bl	80014f8 <__sfputc_r>
 8001544:	1c43      	adds	r3, r0, #1
 8001546:	d1f3      	bne.n	8001530 <__sfputs_r+0xa>
 8001548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800154c <_vfiprintf_r>:
 800154c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001550:	460d      	mov	r5, r1
 8001552:	b09d      	sub	sp, #116	@ 0x74
 8001554:	4614      	mov	r4, r2
 8001556:	4698      	mov	r8, r3
 8001558:	4606      	mov	r6, r0
 800155a:	b118      	cbz	r0, 8001564 <_vfiprintf_r+0x18>
 800155c:	6a03      	ldr	r3, [r0, #32]
 800155e:	b90b      	cbnz	r3, 8001564 <_vfiprintf_r+0x18>
 8001560:	f7ff fdca 	bl	80010f8 <__sinit>
 8001564:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001566:	07d9      	lsls	r1, r3, #31
 8001568:	d405      	bmi.n	8001576 <_vfiprintf_r+0x2a>
 800156a:	89ab      	ldrh	r3, [r5, #12]
 800156c:	059a      	lsls	r2, r3, #22
 800156e:	d402      	bmi.n	8001576 <_vfiprintf_r+0x2a>
 8001570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001572:	f7ff fec6 	bl	8001302 <__retarget_lock_acquire_recursive>
 8001576:	89ab      	ldrh	r3, [r5, #12]
 8001578:	071b      	lsls	r3, r3, #28
 800157a:	d501      	bpl.n	8001580 <_vfiprintf_r+0x34>
 800157c:	692b      	ldr	r3, [r5, #16]
 800157e:	b99b      	cbnz	r3, 80015a8 <_vfiprintf_r+0x5c>
 8001580:	4629      	mov	r1, r5
 8001582:	4630      	mov	r0, r6
 8001584:	f000 fb70 	bl	8001c68 <__swsetup_r>
 8001588:	b170      	cbz	r0, 80015a8 <_vfiprintf_r+0x5c>
 800158a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800158c:	07dc      	lsls	r4, r3, #31
 800158e:	d504      	bpl.n	800159a <_vfiprintf_r+0x4e>
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	b01d      	add	sp, #116	@ 0x74
 8001596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800159a:	89ab      	ldrh	r3, [r5, #12]
 800159c:	0598      	lsls	r0, r3, #22
 800159e:	d4f7      	bmi.n	8001590 <_vfiprintf_r+0x44>
 80015a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80015a2:	f7ff feaf 	bl	8001304 <__retarget_lock_release_recursive>
 80015a6:	e7f3      	b.n	8001590 <_vfiprintf_r+0x44>
 80015a8:	2300      	movs	r3, #0
 80015aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80015ac:	2320      	movs	r3, #32
 80015ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80015b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80015b6:	2330      	movs	r3, #48	@ 0x30
 80015b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001768 <_vfiprintf_r+0x21c>
 80015bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80015c0:	f04f 0901 	mov.w	r9, #1
 80015c4:	4623      	mov	r3, r4
 80015c6:	469a      	mov	sl, r3
 80015c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80015cc:	b10a      	cbz	r2, 80015d2 <_vfiprintf_r+0x86>
 80015ce:	2a25      	cmp	r2, #37	@ 0x25
 80015d0:	d1f9      	bne.n	80015c6 <_vfiprintf_r+0x7a>
 80015d2:	ebba 0b04 	subs.w	fp, sl, r4
 80015d6:	d00b      	beq.n	80015f0 <_vfiprintf_r+0xa4>
 80015d8:	465b      	mov	r3, fp
 80015da:	4622      	mov	r2, r4
 80015dc:	4629      	mov	r1, r5
 80015de:	4630      	mov	r0, r6
 80015e0:	f7ff ffa1 	bl	8001526 <__sfputs_r>
 80015e4:	3001      	adds	r0, #1
 80015e6:	f000 80a7 	beq.w	8001738 <_vfiprintf_r+0x1ec>
 80015ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80015ec:	445a      	add	r2, fp
 80015ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80015f0:	f89a 3000 	ldrb.w	r3, [sl]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 809f 	beq.w	8001738 <_vfiprintf_r+0x1ec>
 80015fa:	2300      	movs	r3, #0
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001600:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001604:	f10a 0a01 	add.w	sl, sl, #1
 8001608:	9304      	str	r3, [sp, #16]
 800160a:	9307      	str	r3, [sp, #28]
 800160c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001610:	931a      	str	r3, [sp, #104]	@ 0x68
 8001612:	4654      	mov	r4, sl
 8001614:	2205      	movs	r2, #5
 8001616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800161a:	4853      	ldr	r0, [pc, #332]	@ (8001768 <_vfiprintf_r+0x21c>)
 800161c:	f7fe fde0 	bl	80001e0 <memchr>
 8001620:	9a04      	ldr	r2, [sp, #16]
 8001622:	b9d8      	cbnz	r0, 800165c <_vfiprintf_r+0x110>
 8001624:	06d1      	lsls	r1, r2, #27
 8001626:	bf44      	itt	mi
 8001628:	2320      	movmi	r3, #32
 800162a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800162e:	0713      	lsls	r3, r2, #28
 8001630:	bf44      	itt	mi
 8001632:	232b      	movmi	r3, #43	@ 0x2b
 8001634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001638:	f89a 3000 	ldrb.w	r3, [sl]
 800163c:	2b2a      	cmp	r3, #42	@ 0x2a
 800163e:	d015      	beq.n	800166c <_vfiprintf_r+0x120>
 8001640:	9a07      	ldr	r2, [sp, #28]
 8001642:	4654      	mov	r4, sl
 8001644:	2000      	movs	r0, #0
 8001646:	f04f 0c0a 	mov.w	ip, #10
 800164a:	4621      	mov	r1, r4
 800164c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001650:	3b30      	subs	r3, #48	@ 0x30
 8001652:	2b09      	cmp	r3, #9
 8001654:	d94b      	bls.n	80016ee <_vfiprintf_r+0x1a2>
 8001656:	b1b0      	cbz	r0, 8001686 <_vfiprintf_r+0x13a>
 8001658:	9207      	str	r2, [sp, #28]
 800165a:	e014      	b.n	8001686 <_vfiprintf_r+0x13a>
 800165c:	eba0 0308 	sub.w	r3, r0, r8
 8001660:	fa09 f303 	lsl.w	r3, r9, r3
 8001664:	4313      	orrs	r3, r2
 8001666:	9304      	str	r3, [sp, #16]
 8001668:	46a2      	mov	sl, r4
 800166a:	e7d2      	b.n	8001612 <_vfiprintf_r+0xc6>
 800166c:	9b03      	ldr	r3, [sp, #12]
 800166e:	1d19      	adds	r1, r3, #4
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	9103      	str	r1, [sp, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	bfbb      	ittet	lt
 8001678:	425b      	neglt	r3, r3
 800167a:	f042 0202 	orrlt.w	r2, r2, #2
 800167e:	9307      	strge	r3, [sp, #28]
 8001680:	9307      	strlt	r3, [sp, #28]
 8001682:	bfb8      	it	lt
 8001684:	9204      	strlt	r2, [sp, #16]
 8001686:	7823      	ldrb	r3, [r4, #0]
 8001688:	2b2e      	cmp	r3, #46	@ 0x2e
 800168a:	d10a      	bne.n	80016a2 <_vfiprintf_r+0x156>
 800168c:	7863      	ldrb	r3, [r4, #1]
 800168e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001690:	d132      	bne.n	80016f8 <_vfiprintf_r+0x1ac>
 8001692:	9b03      	ldr	r3, [sp, #12]
 8001694:	1d1a      	adds	r2, r3, #4
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	9203      	str	r2, [sp, #12]
 800169a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800169e:	3402      	adds	r4, #2
 80016a0:	9305      	str	r3, [sp, #20]
 80016a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001778 <_vfiprintf_r+0x22c>
 80016a6:	7821      	ldrb	r1, [r4, #0]
 80016a8:	2203      	movs	r2, #3
 80016aa:	4650      	mov	r0, sl
 80016ac:	f7fe fd98 	bl	80001e0 <memchr>
 80016b0:	b138      	cbz	r0, 80016c2 <_vfiprintf_r+0x176>
 80016b2:	9b04      	ldr	r3, [sp, #16]
 80016b4:	eba0 000a 	sub.w	r0, r0, sl
 80016b8:	2240      	movs	r2, #64	@ 0x40
 80016ba:	4082      	lsls	r2, r0
 80016bc:	4313      	orrs	r3, r2
 80016be:	3401      	adds	r4, #1
 80016c0:	9304      	str	r3, [sp, #16]
 80016c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016c6:	4829      	ldr	r0, [pc, #164]	@ (800176c <_vfiprintf_r+0x220>)
 80016c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80016cc:	2206      	movs	r2, #6
 80016ce:	f7fe fd87 	bl	80001e0 <memchr>
 80016d2:	2800      	cmp	r0, #0
 80016d4:	d03f      	beq.n	8001756 <_vfiprintf_r+0x20a>
 80016d6:	4b26      	ldr	r3, [pc, #152]	@ (8001770 <_vfiprintf_r+0x224>)
 80016d8:	bb1b      	cbnz	r3, 8001722 <_vfiprintf_r+0x1d6>
 80016da:	9b03      	ldr	r3, [sp, #12]
 80016dc:	3307      	adds	r3, #7
 80016de:	f023 0307 	bic.w	r3, r3, #7
 80016e2:	3308      	adds	r3, #8
 80016e4:	9303      	str	r3, [sp, #12]
 80016e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80016e8:	443b      	add	r3, r7
 80016ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80016ec:	e76a      	b.n	80015c4 <_vfiprintf_r+0x78>
 80016ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80016f2:	460c      	mov	r4, r1
 80016f4:	2001      	movs	r0, #1
 80016f6:	e7a8      	b.n	800164a <_vfiprintf_r+0xfe>
 80016f8:	2300      	movs	r3, #0
 80016fa:	3401      	adds	r4, #1
 80016fc:	9305      	str	r3, [sp, #20]
 80016fe:	4619      	mov	r1, r3
 8001700:	f04f 0c0a 	mov.w	ip, #10
 8001704:	4620      	mov	r0, r4
 8001706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800170a:	3a30      	subs	r2, #48	@ 0x30
 800170c:	2a09      	cmp	r2, #9
 800170e:	d903      	bls.n	8001718 <_vfiprintf_r+0x1cc>
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0c6      	beq.n	80016a2 <_vfiprintf_r+0x156>
 8001714:	9105      	str	r1, [sp, #20]
 8001716:	e7c4      	b.n	80016a2 <_vfiprintf_r+0x156>
 8001718:	fb0c 2101 	mla	r1, ip, r1, r2
 800171c:	4604      	mov	r4, r0
 800171e:	2301      	movs	r3, #1
 8001720:	e7f0      	b.n	8001704 <_vfiprintf_r+0x1b8>
 8001722:	ab03      	add	r3, sp, #12
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	462a      	mov	r2, r5
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <_vfiprintf_r+0x228>)
 800172a:	a904      	add	r1, sp, #16
 800172c:	4630      	mov	r0, r6
 800172e:	f3af 8000 	nop.w
 8001732:	4607      	mov	r7, r0
 8001734:	1c78      	adds	r0, r7, #1
 8001736:	d1d6      	bne.n	80016e6 <_vfiprintf_r+0x19a>
 8001738:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800173a:	07d9      	lsls	r1, r3, #31
 800173c:	d405      	bmi.n	800174a <_vfiprintf_r+0x1fe>
 800173e:	89ab      	ldrh	r3, [r5, #12]
 8001740:	059a      	lsls	r2, r3, #22
 8001742:	d402      	bmi.n	800174a <_vfiprintf_r+0x1fe>
 8001744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001746:	f7ff fddd 	bl	8001304 <__retarget_lock_release_recursive>
 800174a:	89ab      	ldrh	r3, [r5, #12]
 800174c:	065b      	lsls	r3, r3, #25
 800174e:	f53f af1f 	bmi.w	8001590 <_vfiprintf_r+0x44>
 8001752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001754:	e71e      	b.n	8001594 <_vfiprintf_r+0x48>
 8001756:	ab03      	add	r3, sp, #12
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	462a      	mov	r2, r5
 800175c:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <_vfiprintf_r+0x228>)
 800175e:	a904      	add	r1, sp, #16
 8001760:	4630      	mov	r0, r6
 8001762:	f000 f879 	bl	8001858 <_printf_i>
 8001766:	e7e4      	b.n	8001732 <_vfiprintf_r+0x1e6>
 8001768:	08001e6a 	.word	0x08001e6a
 800176c:	08001e74 	.word	0x08001e74
 8001770:	00000000 	.word	0x00000000
 8001774:	08001527 	.word	0x08001527
 8001778:	08001e70 	.word	0x08001e70

0800177c <_printf_common>:
 800177c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001780:	4616      	mov	r6, r2
 8001782:	4698      	mov	r8, r3
 8001784:	688a      	ldr	r2, [r1, #8]
 8001786:	690b      	ldr	r3, [r1, #16]
 8001788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800178c:	4293      	cmp	r3, r2
 800178e:	bfb8      	it	lt
 8001790:	4613      	movlt	r3, r2
 8001792:	6033      	str	r3, [r6, #0]
 8001794:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001798:	4607      	mov	r7, r0
 800179a:	460c      	mov	r4, r1
 800179c:	b10a      	cbz	r2, 80017a2 <_printf_common+0x26>
 800179e:	3301      	adds	r3, #1
 80017a0:	6033      	str	r3, [r6, #0]
 80017a2:	6823      	ldr	r3, [r4, #0]
 80017a4:	0699      	lsls	r1, r3, #26
 80017a6:	bf42      	ittt	mi
 80017a8:	6833      	ldrmi	r3, [r6, #0]
 80017aa:	3302      	addmi	r3, #2
 80017ac:	6033      	strmi	r3, [r6, #0]
 80017ae:	6825      	ldr	r5, [r4, #0]
 80017b0:	f015 0506 	ands.w	r5, r5, #6
 80017b4:	d106      	bne.n	80017c4 <_printf_common+0x48>
 80017b6:	f104 0a19 	add.w	sl, r4, #25
 80017ba:	68e3      	ldr	r3, [r4, #12]
 80017bc:	6832      	ldr	r2, [r6, #0]
 80017be:	1a9b      	subs	r3, r3, r2
 80017c0:	42ab      	cmp	r3, r5
 80017c2:	dc26      	bgt.n	8001812 <_printf_common+0x96>
 80017c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80017c8:	6822      	ldr	r2, [r4, #0]
 80017ca:	3b00      	subs	r3, #0
 80017cc:	bf18      	it	ne
 80017ce:	2301      	movne	r3, #1
 80017d0:	0692      	lsls	r2, r2, #26
 80017d2:	d42b      	bmi.n	800182c <_printf_common+0xb0>
 80017d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80017d8:	4641      	mov	r1, r8
 80017da:	4638      	mov	r0, r7
 80017dc:	47c8      	blx	r9
 80017de:	3001      	adds	r0, #1
 80017e0:	d01e      	beq.n	8001820 <_printf_common+0xa4>
 80017e2:	6823      	ldr	r3, [r4, #0]
 80017e4:	6922      	ldr	r2, [r4, #16]
 80017e6:	f003 0306 	and.w	r3, r3, #6
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf02      	ittt	eq
 80017ee:	68e5      	ldreq	r5, [r4, #12]
 80017f0:	6833      	ldreq	r3, [r6, #0]
 80017f2:	1aed      	subeq	r5, r5, r3
 80017f4:	68a3      	ldr	r3, [r4, #8]
 80017f6:	bf0c      	ite	eq
 80017f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80017fc:	2500      	movne	r5, #0
 80017fe:	4293      	cmp	r3, r2
 8001800:	bfc4      	itt	gt
 8001802:	1a9b      	subgt	r3, r3, r2
 8001804:	18ed      	addgt	r5, r5, r3
 8001806:	2600      	movs	r6, #0
 8001808:	341a      	adds	r4, #26
 800180a:	42b5      	cmp	r5, r6
 800180c:	d11a      	bne.n	8001844 <_printf_common+0xc8>
 800180e:	2000      	movs	r0, #0
 8001810:	e008      	b.n	8001824 <_printf_common+0xa8>
 8001812:	2301      	movs	r3, #1
 8001814:	4652      	mov	r2, sl
 8001816:	4641      	mov	r1, r8
 8001818:	4638      	mov	r0, r7
 800181a:	47c8      	blx	r9
 800181c:	3001      	adds	r0, #1
 800181e:	d103      	bne.n	8001828 <_printf_common+0xac>
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001828:	3501      	adds	r5, #1
 800182a:	e7c6      	b.n	80017ba <_printf_common+0x3e>
 800182c:	18e1      	adds	r1, r4, r3
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	2030      	movs	r0, #48	@ 0x30
 8001832:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001836:	4422      	add	r2, r4
 8001838:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800183c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001840:	3302      	adds	r3, #2
 8001842:	e7c7      	b.n	80017d4 <_printf_common+0x58>
 8001844:	2301      	movs	r3, #1
 8001846:	4622      	mov	r2, r4
 8001848:	4641      	mov	r1, r8
 800184a:	4638      	mov	r0, r7
 800184c:	47c8      	blx	r9
 800184e:	3001      	adds	r0, #1
 8001850:	d0e6      	beq.n	8001820 <_printf_common+0xa4>
 8001852:	3601      	adds	r6, #1
 8001854:	e7d9      	b.n	800180a <_printf_common+0x8e>
	...

08001858 <_printf_i>:
 8001858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800185c:	7e0f      	ldrb	r7, [r1, #24]
 800185e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001860:	2f78      	cmp	r7, #120	@ 0x78
 8001862:	4691      	mov	r9, r2
 8001864:	4680      	mov	r8, r0
 8001866:	460c      	mov	r4, r1
 8001868:	469a      	mov	sl, r3
 800186a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800186e:	d807      	bhi.n	8001880 <_printf_i+0x28>
 8001870:	2f62      	cmp	r7, #98	@ 0x62
 8001872:	d80a      	bhi.n	800188a <_printf_i+0x32>
 8001874:	2f00      	cmp	r7, #0
 8001876:	f000 80d1 	beq.w	8001a1c <_printf_i+0x1c4>
 800187a:	2f58      	cmp	r7, #88	@ 0x58
 800187c:	f000 80b8 	beq.w	80019f0 <_printf_i+0x198>
 8001880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001884:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001888:	e03a      	b.n	8001900 <_printf_i+0xa8>
 800188a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800188e:	2b15      	cmp	r3, #21
 8001890:	d8f6      	bhi.n	8001880 <_printf_i+0x28>
 8001892:	a101      	add	r1, pc, #4	@ (adr r1, 8001898 <_printf_i+0x40>)
 8001894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001898:	080018f1 	.word	0x080018f1
 800189c:	08001905 	.word	0x08001905
 80018a0:	08001881 	.word	0x08001881
 80018a4:	08001881 	.word	0x08001881
 80018a8:	08001881 	.word	0x08001881
 80018ac:	08001881 	.word	0x08001881
 80018b0:	08001905 	.word	0x08001905
 80018b4:	08001881 	.word	0x08001881
 80018b8:	08001881 	.word	0x08001881
 80018bc:	08001881 	.word	0x08001881
 80018c0:	08001881 	.word	0x08001881
 80018c4:	08001a03 	.word	0x08001a03
 80018c8:	0800192f 	.word	0x0800192f
 80018cc:	080019bd 	.word	0x080019bd
 80018d0:	08001881 	.word	0x08001881
 80018d4:	08001881 	.word	0x08001881
 80018d8:	08001a25 	.word	0x08001a25
 80018dc:	08001881 	.word	0x08001881
 80018e0:	0800192f 	.word	0x0800192f
 80018e4:	08001881 	.word	0x08001881
 80018e8:	08001881 	.word	0x08001881
 80018ec:	080019c5 	.word	0x080019c5
 80018f0:	6833      	ldr	r3, [r6, #0]
 80018f2:	1d1a      	adds	r2, r3, #4
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6032      	str	r2, [r6, #0]
 80018f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80018fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001900:	2301      	movs	r3, #1
 8001902:	e09c      	b.n	8001a3e <_printf_i+0x1e6>
 8001904:	6833      	ldr	r3, [r6, #0]
 8001906:	6820      	ldr	r0, [r4, #0]
 8001908:	1d19      	adds	r1, r3, #4
 800190a:	6031      	str	r1, [r6, #0]
 800190c:	0606      	lsls	r6, r0, #24
 800190e:	d501      	bpl.n	8001914 <_printf_i+0xbc>
 8001910:	681d      	ldr	r5, [r3, #0]
 8001912:	e003      	b.n	800191c <_printf_i+0xc4>
 8001914:	0645      	lsls	r5, r0, #25
 8001916:	d5fb      	bpl.n	8001910 <_printf_i+0xb8>
 8001918:	f9b3 5000 	ldrsh.w	r5, [r3]
 800191c:	2d00      	cmp	r5, #0
 800191e:	da03      	bge.n	8001928 <_printf_i+0xd0>
 8001920:	232d      	movs	r3, #45	@ 0x2d
 8001922:	426d      	negs	r5, r5
 8001924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001928:	4858      	ldr	r0, [pc, #352]	@ (8001a8c <_printf_i+0x234>)
 800192a:	230a      	movs	r3, #10
 800192c:	e011      	b.n	8001952 <_printf_i+0xfa>
 800192e:	6821      	ldr	r1, [r4, #0]
 8001930:	6833      	ldr	r3, [r6, #0]
 8001932:	0608      	lsls	r0, r1, #24
 8001934:	f853 5b04 	ldr.w	r5, [r3], #4
 8001938:	d402      	bmi.n	8001940 <_printf_i+0xe8>
 800193a:	0649      	lsls	r1, r1, #25
 800193c:	bf48      	it	mi
 800193e:	b2ad      	uxthmi	r5, r5
 8001940:	2f6f      	cmp	r7, #111	@ 0x6f
 8001942:	4852      	ldr	r0, [pc, #328]	@ (8001a8c <_printf_i+0x234>)
 8001944:	6033      	str	r3, [r6, #0]
 8001946:	bf14      	ite	ne
 8001948:	230a      	movne	r3, #10
 800194a:	2308      	moveq	r3, #8
 800194c:	2100      	movs	r1, #0
 800194e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001952:	6866      	ldr	r6, [r4, #4]
 8001954:	60a6      	str	r6, [r4, #8]
 8001956:	2e00      	cmp	r6, #0
 8001958:	db05      	blt.n	8001966 <_printf_i+0x10e>
 800195a:	6821      	ldr	r1, [r4, #0]
 800195c:	432e      	orrs	r6, r5
 800195e:	f021 0104 	bic.w	r1, r1, #4
 8001962:	6021      	str	r1, [r4, #0]
 8001964:	d04b      	beq.n	80019fe <_printf_i+0x1a6>
 8001966:	4616      	mov	r6, r2
 8001968:	fbb5 f1f3 	udiv	r1, r5, r3
 800196c:	fb03 5711 	mls	r7, r3, r1, r5
 8001970:	5dc7      	ldrb	r7, [r0, r7]
 8001972:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001976:	462f      	mov	r7, r5
 8001978:	42bb      	cmp	r3, r7
 800197a:	460d      	mov	r5, r1
 800197c:	d9f4      	bls.n	8001968 <_printf_i+0x110>
 800197e:	2b08      	cmp	r3, #8
 8001980:	d10b      	bne.n	800199a <_printf_i+0x142>
 8001982:	6823      	ldr	r3, [r4, #0]
 8001984:	07df      	lsls	r7, r3, #31
 8001986:	d508      	bpl.n	800199a <_printf_i+0x142>
 8001988:	6923      	ldr	r3, [r4, #16]
 800198a:	6861      	ldr	r1, [r4, #4]
 800198c:	4299      	cmp	r1, r3
 800198e:	bfde      	ittt	le
 8001990:	2330      	movle	r3, #48	@ 0x30
 8001992:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001996:	f106 36ff 	addle.w	r6, r6, #4294967295
 800199a:	1b92      	subs	r2, r2, r6
 800199c:	6122      	str	r2, [r4, #16]
 800199e:	f8cd a000 	str.w	sl, [sp]
 80019a2:	464b      	mov	r3, r9
 80019a4:	aa03      	add	r2, sp, #12
 80019a6:	4621      	mov	r1, r4
 80019a8:	4640      	mov	r0, r8
 80019aa:	f7ff fee7 	bl	800177c <_printf_common>
 80019ae:	3001      	adds	r0, #1
 80019b0:	d14a      	bne.n	8001a48 <_printf_i+0x1f0>
 80019b2:	f04f 30ff 	mov.w	r0, #4294967295
 80019b6:	b004      	add	sp, #16
 80019b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	f043 0320 	orr.w	r3, r3, #32
 80019c2:	6023      	str	r3, [r4, #0]
 80019c4:	4832      	ldr	r0, [pc, #200]	@ (8001a90 <_printf_i+0x238>)
 80019c6:	2778      	movs	r7, #120	@ 0x78
 80019c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80019cc:	6823      	ldr	r3, [r4, #0]
 80019ce:	6831      	ldr	r1, [r6, #0]
 80019d0:	061f      	lsls	r7, r3, #24
 80019d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80019d6:	d402      	bmi.n	80019de <_printf_i+0x186>
 80019d8:	065f      	lsls	r7, r3, #25
 80019da:	bf48      	it	mi
 80019dc:	b2ad      	uxthmi	r5, r5
 80019de:	6031      	str	r1, [r6, #0]
 80019e0:	07d9      	lsls	r1, r3, #31
 80019e2:	bf44      	itt	mi
 80019e4:	f043 0320 	orrmi.w	r3, r3, #32
 80019e8:	6023      	strmi	r3, [r4, #0]
 80019ea:	b11d      	cbz	r5, 80019f4 <_printf_i+0x19c>
 80019ec:	2310      	movs	r3, #16
 80019ee:	e7ad      	b.n	800194c <_printf_i+0xf4>
 80019f0:	4826      	ldr	r0, [pc, #152]	@ (8001a8c <_printf_i+0x234>)
 80019f2:	e7e9      	b.n	80019c8 <_printf_i+0x170>
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	f023 0320 	bic.w	r3, r3, #32
 80019fa:	6023      	str	r3, [r4, #0]
 80019fc:	e7f6      	b.n	80019ec <_printf_i+0x194>
 80019fe:	4616      	mov	r6, r2
 8001a00:	e7bd      	b.n	800197e <_printf_i+0x126>
 8001a02:	6833      	ldr	r3, [r6, #0]
 8001a04:	6825      	ldr	r5, [r4, #0]
 8001a06:	6961      	ldr	r1, [r4, #20]
 8001a08:	1d18      	adds	r0, r3, #4
 8001a0a:	6030      	str	r0, [r6, #0]
 8001a0c:	062e      	lsls	r6, r5, #24
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	d501      	bpl.n	8001a16 <_printf_i+0x1be>
 8001a12:	6019      	str	r1, [r3, #0]
 8001a14:	e002      	b.n	8001a1c <_printf_i+0x1c4>
 8001a16:	0668      	lsls	r0, r5, #25
 8001a18:	d5fb      	bpl.n	8001a12 <_printf_i+0x1ba>
 8001a1a:	8019      	strh	r1, [r3, #0]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	6123      	str	r3, [r4, #16]
 8001a20:	4616      	mov	r6, r2
 8001a22:	e7bc      	b.n	800199e <_printf_i+0x146>
 8001a24:	6833      	ldr	r3, [r6, #0]
 8001a26:	1d1a      	adds	r2, r3, #4
 8001a28:	6032      	str	r2, [r6, #0]
 8001a2a:	681e      	ldr	r6, [r3, #0]
 8001a2c:	6862      	ldr	r2, [r4, #4]
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4630      	mov	r0, r6
 8001a32:	f7fe fbd5 	bl	80001e0 <memchr>
 8001a36:	b108      	cbz	r0, 8001a3c <_printf_i+0x1e4>
 8001a38:	1b80      	subs	r0, r0, r6
 8001a3a:	6060      	str	r0, [r4, #4]
 8001a3c:	6863      	ldr	r3, [r4, #4]
 8001a3e:	6123      	str	r3, [r4, #16]
 8001a40:	2300      	movs	r3, #0
 8001a42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001a46:	e7aa      	b.n	800199e <_printf_i+0x146>
 8001a48:	6923      	ldr	r3, [r4, #16]
 8001a4a:	4632      	mov	r2, r6
 8001a4c:	4649      	mov	r1, r9
 8001a4e:	4640      	mov	r0, r8
 8001a50:	47d0      	blx	sl
 8001a52:	3001      	adds	r0, #1
 8001a54:	d0ad      	beq.n	80019b2 <_printf_i+0x15a>
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	079b      	lsls	r3, r3, #30
 8001a5a:	d413      	bmi.n	8001a84 <_printf_i+0x22c>
 8001a5c:	68e0      	ldr	r0, [r4, #12]
 8001a5e:	9b03      	ldr	r3, [sp, #12]
 8001a60:	4298      	cmp	r0, r3
 8001a62:	bfb8      	it	lt
 8001a64:	4618      	movlt	r0, r3
 8001a66:	e7a6      	b.n	80019b6 <_printf_i+0x15e>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	4632      	mov	r2, r6
 8001a6c:	4649      	mov	r1, r9
 8001a6e:	4640      	mov	r0, r8
 8001a70:	47d0      	blx	sl
 8001a72:	3001      	adds	r0, #1
 8001a74:	d09d      	beq.n	80019b2 <_printf_i+0x15a>
 8001a76:	3501      	adds	r5, #1
 8001a78:	68e3      	ldr	r3, [r4, #12]
 8001a7a:	9903      	ldr	r1, [sp, #12]
 8001a7c:	1a5b      	subs	r3, r3, r1
 8001a7e:	42ab      	cmp	r3, r5
 8001a80:	dcf2      	bgt.n	8001a68 <_printf_i+0x210>
 8001a82:	e7eb      	b.n	8001a5c <_printf_i+0x204>
 8001a84:	2500      	movs	r5, #0
 8001a86:	f104 0619 	add.w	r6, r4, #25
 8001a8a:	e7f5      	b.n	8001a78 <_printf_i+0x220>
 8001a8c:	08001e7b 	.word	0x08001e7b
 8001a90:	08001e8c 	.word	0x08001e8c

08001a94 <__sflush_r>:
 8001a94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a9c:	0716      	lsls	r6, r2, #28
 8001a9e:	4605      	mov	r5, r0
 8001aa0:	460c      	mov	r4, r1
 8001aa2:	d454      	bmi.n	8001b4e <__sflush_r+0xba>
 8001aa4:	684b      	ldr	r3, [r1, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	dc02      	bgt.n	8001ab0 <__sflush_r+0x1c>
 8001aaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	dd48      	ble.n	8001b42 <__sflush_r+0xae>
 8001ab0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001ab2:	2e00      	cmp	r6, #0
 8001ab4:	d045      	beq.n	8001b42 <__sflush_r+0xae>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001abc:	682f      	ldr	r7, [r5, #0]
 8001abe:	6a21      	ldr	r1, [r4, #32]
 8001ac0:	602b      	str	r3, [r5, #0]
 8001ac2:	d030      	beq.n	8001b26 <__sflush_r+0x92>
 8001ac4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001ac6:	89a3      	ldrh	r3, [r4, #12]
 8001ac8:	0759      	lsls	r1, r3, #29
 8001aca:	d505      	bpl.n	8001ad8 <__sflush_r+0x44>
 8001acc:	6863      	ldr	r3, [r4, #4]
 8001ace:	1ad2      	subs	r2, r2, r3
 8001ad0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001ad2:	b10b      	cbz	r3, 8001ad8 <__sflush_r+0x44>
 8001ad4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ad6:	1ad2      	subs	r2, r2, r3
 8001ad8:	2300      	movs	r3, #0
 8001ada:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001adc:	6a21      	ldr	r1, [r4, #32]
 8001ade:	4628      	mov	r0, r5
 8001ae0:	47b0      	blx	r6
 8001ae2:	1c43      	adds	r3, r0, #1
 8001ae4:	89a3      	ldrh	r3, [r4, #12]
 8001ae6:	d106      	bne.n	8001af6 <__sflush_r+0x62>
 8001ae8:	6829      	ldr	r1, [r5, #0]
 8001aea:	291d      	cmp	r1, #29
 8001aec:	d82b      	bhi.n	8001b46 <__sflush_r+0xb2>
 8001aee:	4a2a      	ldr	r2, [pc, #168]	@ (8001b98 <__sflush_r+0x104>)
 8001af0:	40ca      	lsrs	r2, r1
 8001af2:	07d6      	lsls	r6, r2, #31
 8001af4:	d527      	bpl.n	8001b46 <__sflush_r+0xb2>
 8001af6:	2200      	movs	r2, #0
 8001af8:	6062      	str	r2, [r4, #4]
 8001afa:	04d9      	lsls	r1, r3, #19
 8001afc:	6922      	ldr	r2, [r4, #16]
 8001afe:	6022      	str	r2, [r4, #0]
 8001b00:	d504      	bpl.n	8001b0c <__sflush_r+0x78>
 8001b02:	1c42      	adds	r2, r0, #1
 8001b04:	d101      	bne.n	8001b0a <__sflush_r+0x76>
 8001b06:	682b      	ldr	r3, [r5, #0]
 8001b08:	b903      	cbnz	r3, 8001b0c <__sflush_r+0x78>
 8001b0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8001b0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001b0e:	602f      	str	r7, [r5, #0]
 8001b10:	b1b9      	cbz	r1, 8001b42 <__sflush_r+0xae>
 8001b12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001b16:	4299      	cmp	r1, r3
 8001b18:	d002      	beq.n	8001b20 <__sflush_r+0x8c>
 8001b1a:	4628      	mov	r0, r5
 8001b1c:	f7ff fbf4 	bl	8001308 <_free_r>
 8001b20:	2300      	movs	r3, #0
 8001b22:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b24:	e00d      	b.n	8001b42 <__sflush_r+0xae>
 8001b26:	2301      	movs	r3, #1
 8001b28:	4628      	mov	r0, r5
 8001b2a:	47b0      	blx	r6
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	1c50      	adds	r0, r2, #1
 8001b30:	d1c9      	bne.n	8001ac6 <__sflush_r+0x32>
 8001b32:	682b      	ldr	r3, [r5, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0c6      	beq.n	8001ac6 <__sflush_r+0x32>
 8001b38:	2b1d      	cmp	r3, #29
 8001b3a:	d001      	beq.n	8001b40 <__sflush_r+0xac>
 8001b3c:	2b16      	cmp	r3, #22
 8001b3e:	d11e      	bne.n	8001b7e <__sflush_r+0xea>
 8001b40:	602f      	str	r7, [r5, #0]
 8001b42:	2000      	movs	r0, #0
 8001b44:	e022      	b.n	8001b8c <__sflush_r+0xf8>
 8001b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	e01b      	b.n	8001b86 <__sflush_r+0xf2>
 8001b4e:	690f      	ldr	r7, [r1, #16]
 8001b50:	2f00      	cmp	r7, #0
 8001b52:	d0f6      	beq.n	8001b42 <__sflush_r+0xae>
 8001b54:	0793      	lsls	r3, r2, #30
 8001b56:	680e      	ldr	r6, [r1, #0]
 8001b58:	bf08      	it	eq
 8001b5a:	694b      	ldreq	r3, [r1, #20]
 8001b5c:	600f      	str	r7, [r1, #0]
 8001b5e:	bf18      	it	ne
 8001b60:	2300      	movne	r3, #0
 8001b62:	eba6 0807 	sub.w	r8, r6, r7
 8001b66:	608b      	str	r3, [r1, #8]
 8001b68:	f1b8 0f00 	cmp.w	r8, #0
 8001b6c:	dde9      	ble.n	8001b42 <__sflush_r+0xae>
 8001b6e:	6a21      	ldr	r1, [r4, #32]
 8001b70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001b72:	4643      	mov	r3, r8
 8001b74:	463a      	mov	r2, r7
 8001b76:	4628      	mov	r0, r5
 8001b78:	47b0      	blx	r6
 8001b7a:	2800      	cmp	r0, #0
 8001b7c:	dc08      	bgt.n	8001b90 <__sflush_r+0xfc>
 8001b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b86:	81a3      	strh	r3, [r4, #12]
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b90:	4407      	add	r7, r0
 8001b92:	eba8 0800 	sub.w	r8, r8, r0
 8001b96:	e7e7      	b.n	8001b68 <__sflush_r+0xd4>
 8001b98:	20400001 	.word	0x20400001

08001b9c <_fflush_r>:
 8001b9c:	b538      	push	{r3, r4, r5, lr}
 8001b9e:	690b      	ldr	r3, [r1, #16]
 8001ba0:	4605      	mov	r5, r0
 8001ba2:	460c      	mov	r4, r1
 8001ba4:	b913      	cbnz	r3, 8001bac <_fflush_r+0x10>
 8001ba6:	2500      	movs	r5, #0
 8001ba8:	4628      	mov	r0, r5
 8001baa:	bd38      	pop	{r3, r4, r5, pc}
 8001bac:	b118      	cbz	r0, 8001bb6 <_fflush_r+0x1a>
 8001bae:	6a03      	ldr	r3, [r0, #32]
 8001bb0:	b90b      	cbnz	r3, 8001bb6 <_fflush_r+0x1a>
 8001bb2:	f7ff faa1 	bl	80010f8 <__sinit>
 8001bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f3      	beq.n	8001ba6 <_fflush_r+0xa>
 8001bbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001bc0:	07d0      	lsls	r0, r2, #31
 8001bc2:	d404      	bmi.n	8001bce <_fflush_r+0x32>
 8001bc4:	0599      	lsls	r1, r3, #22
 8001bc6:	d402      	bmi.n	8001bce <_fflush_r+0x32>
 8001bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001bca:	f7ff fb9a 	bl	8001302 <__retarget_lock_acquire_recursive>
 8001bce:	4628      	mov	r0, r5
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	f7ff ff5f 	bl	8001a94 <__sflush_r>
 8001bd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001bd8:	07da      	lsls	r2, r3, #31
 8001bda:	4605      	mov	r5, r0
 8001bdc:	d4e4      	bmi.n	8001ba8 <_fflush_r+0xc>
 8001bde:	89a3      	ldrh	r3, [r4, #12]
 8001be0:	059b      	lsls	r3, r3, #22
 8001be2:	d4e1      	bmi.n	8001ba8 <_fflush_r+0xc>
 8001be4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001be6:	f7ff fb8d 	bl	8001304 <__retarget_lock_release_recursive>
 8001bea:	e7dd      	b.n	8001ba8 <_fflush_r+0xc>

08001bec <__swbuf_r>:
 8001bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bee:	460e      	mov	r6, r1
 8001bf0:	4614      	mov	r4, r2
 8001bf2:	4605      	mov	r5, r0
 8001bf4:	b118      	cbz	r0, 8001bfe <__swbuf_r+0x12>
 8001bf6:	6a03      	ldr	r3, [r0, #32]
 8001bf8:	b90b      	cbnz	r3, 8001bfe <__swbuf_r+0x12>
 8001bfa:	f7ff fa7d 	bl	80010f8 <__sinit>
 8001bfe:	69a3      	ldr	r3, [r4, #24]
 8001c00:	60a3      	str	r3, [r4, #8]
 8001c02:	89a3      	ldrh	r3, [r4, #12]
 8001c04:	071a      	lsls	r2, r3, #28
 8001c06:	d501      	bpl.n	8001c0c <__swbuf_r+0x20>
 8001c08:	6923      	ldr	r3, [r4, #16]
 8001c0a:	b943      	cbnz	r3, 8001c1e <__swbuf_r+0x32>
 8001c0c:	4621      	mov	r1, r4
 8001c0e:	4628      	mov	r0, r5
 8001c10:	f000 f82a 	bl	8001c68 <__swsetup_r>
 8001c14:	b118      	cbz	r0, 8001c1e <__swbuf_r+0x32>
 8001c16:	f04f 37ff 	mov.w	r7, #4294967295
 8001c1a:	4638      	mov	r0, r7
 8001c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	6922      	ldr	r2, [r4, #16]
 8001c22:	1a98      	subs	r0, r3, r2
 8001c24:	6963      	ldr	r3, [r4, #20]
 8001c26:	b2f6      	uxtb	r6, r6
 8001c28:	4283      	cmp	r3, r0
 8001c2a:	4637      	mov	r7, r6
 8001c2c:	dc05      	bgt.n	8001c3a <__swbuf_r+0x4e>
 8001c2e:	4621      	mov	r1, r4
 8001c30:	4628      	mov	r0, r5
 8001c32:	f7ff ffb3 	bl	8001b9c <_fflush_r>
 8001c36:	2800      	cmp	r0, #0
 8001c38:	d1ed      	bne.n	8001c16 <__swbuf_r+0x2a>
 8001c3a:	68a3      	ldr	r3, [r4, #8]
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	60a3      	str	r3, [r4, #8]
 8001c40:	6823      	ldr	r3, [r4, #0]
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	6022      	str	r2, [r4, #0]
 8001c46:	701e      	strb	r6, [r3, #0]
 8001c48:	6962      	ldr	r2, [r4, #20]
 8001c4a:	1c43      	adds	r3, r0, #1
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d004      	beq.n	8001c5a <__swbuf_r+0x6e>
 8001c50:	89a3      	ldrh	r3, [r4, #12]
 8001c52:	07db      	lsls	r3, r3, #31
 8001c54:	d5e1      	bpl.n	8001c1a <__swbuf_r+0x2e>
 8001c56:	2e0a      	cmp	r6, #10
 8001c58:	d1df      	bne.n	8001c1a <__swbuf_r+0x2e>
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	4628      	mov	r0, r5
 8001c5e:	f7ff ff9d 	bl	8001b9c <_fflush_r>
 8001c62:	2800      	cmp	r0, #0
 8001c64:	d0d9      	beq.n	8001c1a <__swbuf_r+0x2e>
 8001c66:	e7d6      	b.n	8001c16 <__swbuf_r+0x2a>

08001c68 <__swsetup_r>:
 8001c68:	b538      	push	{r3, r4, r5, lr}
 8001c6a:	4b29      	ldr	r3, [pc, #164]	@ (8001d10 <__swsetup_r+0xa8>)
 8001c6c:	4605      	mov	r5, r0
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	460c      	mov	r4, r1
 8001c72:	b118      	cbz	r0, 8001c7c <__swsetup_r+0x14>
 8001c74:	6a03      	ldr	r3, [r0, #32]
 8001c76:	b90b      	cbnz	r3, 8001c7c <__swsetup_r+0x14>
 8001c78:	f7ff fa3e 	bl	80010f8 <__sinit>
 8001c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c80:	0719      	lsls	r1, r3, #28
 8001c82:	d422      	bmi.n	8001cca <__swsetup_r+0x62>
 8001c84:	06da      	lsls	r2, r3, #27
 8001c86:	d407      	bmi.n	8001c98 <__swsetup_r+0x30>
 8001c88:	2209      	movs	r2, #9
 8001c8a:	602a      	str	r2, [r5, #0]
 8001c8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c90:	81a3      	strh	r3, [r4, #12]
 8001c92:	f04f 30ff 	mov.w	r0, #4294967295
 8001c96:	e033      	b.n	8001d00 <__swsetup_r+0x98>
 8001c98:	0758      	lsls	r0, r3, #29
 8001c9a:	d512      	bpl.n	8001cc2 <__swsetup_r+0x5a>
 8001c9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001c9e:	b141      	cbz	r1, 8001cb2 <__swsetup_r+0x4a>
 8001ca0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001ca4:	4299      	cmp	r1, r3
 8001ca6:	d002      	beq.n	8001cae <__swsetup_r+0x46>
 8001ca8:	4628      	mov	r0, r5
 8001caa:	f7ff fb2d 	bl	8001308 <_free_r>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8001cb2:	89a3      	ldrh	r3, [r4, #12]
 8001cb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001cb8:	81a3      	strh	r3, [r4, #12]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	6063      	str	r3, [r4, #4]
 8001cbe:	6923      	ldr	r3, [r4, #16]
 8001cc0:	6023      	str	r3, [r4, #0]
 8001cc2:	89a3      	ldrh	r3, [r4, #12]
 8001cc4:	f043 0308 	orr.w	r3, r3, #8
 8001cc8:	81a3      	strh	r3, [r4, #12]
 8001cca:	6923      	ldr	r3, [r4, #16]
 8001ccc:	b94b      	cbnz	r3, 8001ce2 <__swsetup_r+0x7a>
 8001cce:	89a3      	ldrh	r3, [r4, #12]
 8001cd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cd8:	d003      	beq.n	8001ce2 <__swsetup_r+0x7a>
 8001cda:	4621      	mov	r1, r4
 8001cdc:	4628      	mov	r0, r5
 8001cde:	f000 f84f 	bl	8001d80 <__smakebuf_r>
 8001ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ce6:	f013 0201 	ands.w	r2, r3, #1
 8001cea:	d00a      	beq.n	8001d02 <__swsetup_r+0x9a>
 8001cec:	2200      	movs	r2, #0
 8001cee:	60a2      	str	r2, [r4, #8]
 8001cf0:	6962      	ldr	r2, [r4, #20]
 8001cf2:	4252      	negs	r2, r2
 8001cf4:	61a2      	str	r2, [r4, #24]
 8001cf6:	6922      	ldr	r2, [r4, #16]
 8001cf8:	b942      	cbnz	r2, 8001d0c <__swsetup_r+0xa4>
 8001cfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001cfe:	d1c5      	bne.n	8001c8c <__swsetup_r+0x24>
 8001d00:	bd38      	pop	{r3, r4, r5, pc}
 8001d02:	0799      	lsls	r1, r3, #30
 8001d04:	bf58      	it	pl
 8001d06:	6962      	ldrpl	r2, [r4, #20]
 8001d08:	60a2      	str	r2, [r4, #8]
 8001d0a:	e7f4      	b.n	8001cf6 <__swsetup_r+0x8e>
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	e7f7      	b.n	8001d00 <__swsetup_r+0x98>
 8001d10:	2000000c 	.word	0x2000000c

08001d14 <_sbrk_r>:
 8001d14:	b538      	push	{r3, r4, r5, lr}
 8001d16:	4d06      	ldr	r5, [pc, #24]	@ (8001d30 <_sbrk_r+0x1c>)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	602b      	str	r3, [r5, #0]
 8001d20:	f7ff f844 	bl	8000dac <_sbrk>
 8001d24:	1c43      	adds	r3, r0, #1
 8001d26:	d102      	bne.n	8001d2e <_sbrk_r+0x1a>
 8001d28:	682b      	ldr	r3, [r5, #0]
 8001d2a:	b103      	cbz	r3, 8001d2e <_sbrk_r+0x1a>
 8001d2c:	6023      	str	r3, [r4, #0]
 8001d2e:	bd38      	pop	{r3, r4, r5, pc}
 8001d30:	200001e8 	.word	0x200001e8

08001d34 <__swhatbuf_r>:
 8001d34:	b570      	push	{r4, r5, r6, lr}
 8001d36:	460c      	mov	r4, r1
 8001d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d3c:	2900      	cmp	r1, #0
 8001d3e:	b096      	sub	sp, #88	@ 0x58
 8001d40:	4615      	mov	r5, r2
 8001d42:	461e      	mov	r6, r3
 8001d44:	da0d      	bge.n	8001d62 <__swhatbuf_r+0x2e>
 8001d46:	89a3      	ldrh	r3, [r4, #12]
 8001d48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001d4c:	f04f 0100 	mov.w	r1, #0
 8001d50:	bf14      	ite	ne
 8001d52:	2340      	movne	r3, #64	@ 0x40
 8001d54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001d58:	2000      	movs	r0, #0
 8001d5a:	6031      	str	r1, [r6, #0]
 8001d5c:	602b      	str	r3, [r5, #0]
 8001d5e:	b016      	add	sp, #88	@ 0x58
 8001d60:	bd70      	pop	{r4, r5, r6, pc}
 8001d62:	466a      	mov	r2, sp
 8001d64:	f000 f848 	bl	8001df8 <_fstat_r>
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	dbec      	blt.n	8001d46 <__swhatbuf_r+0x12>
 8001d6c:	9901      	ldr	r1, [sp, #4]
 8001d6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001d72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001d76:	4259      	negs	r1, r3
 8001d78:	4159      	adcs	r1, r3
 8001d7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d7e:	e7eb      	b.n	8001d58 <__swhatbuf_r+0x24>

08001d80 <__smakebuf_r>:
 8001d80:	898b      	ldrh	r3, [r1, #12]
 8001d82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d84:	079d      	lsls	r5, r3, #30
 8001d86:	4606      	mov	r6, r0
 8001d88:	460c      	mov	r4, r1
 8001d8a:	d507      	bpl.n	8001d9c <__smakebuf_r+0x1c>
 8001d8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001d90:	6023      	str	r3, [r4, #0]
 8001d92:	6123      	str	r3, [r4, #16]
 8001d94:	2301      	movs	r3, #1
 8001d96:	6163      	str	r3, [r4, #20]
 8001d98:	b003      	add	sp, #12
 8001d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d9c:	ab01      	add	r3, sp, #4
 8001d9e:	466a      	mov	r2, sp
 8001da0:	f7ff ffc8 	bl	8001d34 <__swhatbuf_r>
 8001da4:	9f00      	ldr	r7, [sp, #0]
 8001da6:	4605      	mov	r5, r0
 8001da8:	4639      	mov	r1, r7
 8001daa:	4630      	mov	r0, r6
 8001dac:	f7ff fb18 	bl	80013e0 <_malloc_r>
 8001db0:	b948      	cbnz	r0, 8001dc6 <__smakebuf_r+0x46>
 8001db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001db6:	059a      	lsls	r2, r3, #22
 8001db8:	d4ee      	bmi.n	8001d98 <__smakebuf_r+0x18>
 8001dba:	f023 0303 	bic.w	r3, r3, #3
 8001dbe:	f043 0302 	orr.w	r3, r3, #2
 8001dc2:	81a3      	strh	r3, [r4, #12]
 8001dc4:	e7e2      	b.n	8001d8c <__smakebuf_r+0xc>
 8001dc6:	89a3      	ldrh	r3, [r4, #12]
 8001dc8:	6020      	str	r0, [r4, #0]
 8001dca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dce:	81a3      	strh	r3, [r4, #12]
 8001dd0:	9b01      	ldr	r3, [sp, #4]
 8001dd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001dd6:	b15b      	cbz	r3, 8001df0 <__smakebuf_r+0x70>
 8001dd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ddc:	4630      	mov	r0, r6
 8001dde:	f000 f81d 	bl	8001e1c <_isatty_r>
 8001de2:	b128      	cbz	r0, 8001df0 <__smakebuf_r+0x70>
 8001de4:	89a3      	ldrh	r3, [r4, #12]
 8001de6:	f023 0303 	bic.w	r3, r3, #3
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	81a3      	strh	r3, [r4, #12]
 8001df0:	89a3      	ldrh	r3, [r4, #12]
 8001df2:	431d      	orrs	r5, r3
 8001df4:	81a5      	strh	r5, [r4, #12]
 8001df6:	e7cf      	b.n	8001d98 <__smakebuf_r+0x18>

08001df8 <_fstat_r>:
 8001df8:	b538      	push	{r3, r4, r5, lr}
 8001dfa:	4d07      	ldr	r5, [pc, #28]	@ (8001e18 <_fstat_r+0x20>)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	4604      	mov	r4, r0
 8001e00:	4608      	mov	r0, r1
 8001e02:	4611      	mov	r1, r2
 8001e04:	602b      	str	r3, [r5, #0]
 8001e06:	f7fe ffa8 	bl	8000d5a <_fstat>
 8001e0a:	1c43      	adds	r3, r0, #1
 8001e0c:	d102      	bne.n	8001e14 <_fstat_r+0x1c>
 8001e0e:	682b      	ldr	r3, [r5, #0]
 8001e10:	b103      	cbz	r3, 8001e14 <_fstat_r+0x1c>
 8001e12:	6023      	str	r3, [r4, #0]
 8001e14:	bd38      	pop	{r3, r4, r5, pc}
 8001e16:	bf00      	nop
 8001e18:	200001e8 	.word	0x200001e8

08001e1c <_isatty_r>:
 8001e1c:	b538      	push	{r3, r4, r5, lr}
 8001e1e:	4d06      	ldr	r5, [pc, #24]	@ (8001e38 <_isatty_r+0x1c>)
 8001e20:	2300      	movs	r3, #0
 8001e22:	4604      	mov	r4, r0
 8001e24:	4608      	mov	r0, r1
 8001e26:	602b      	str	r3, [r5, #0]
 8001e28:	f7fe ffa7 	bl	8000d7a <_isatty>
 8001e2c:	1c43      	adds	r3, r0, #1
 8001e2e:	d102      	bne.n	8001e36 <_isatty_r+0x1a>
 8001e30:	682b      	ldr	r3, [r5, #0]
 8001e32:	b103      	cbz	r3, 8001e36 <_isatty_r+0x1a>
 8001e34:	6023      	str	r3, [r4, #0]
 8001e36:	bd38      	pop	{r3, r4, r5, pc}
 8001e38:	200001e8 	.word	0x200001e8

08001e3c <_init>:
 8001e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3e:	bf00      	nop
 8001e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e42:	bc08      	pop	{r3}
 8001e44:	469e      	mov	lr, r3
 8001e46:	4770      	bx	lr

08001e48 <_fini>:
 8001e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e4a:	bf00      	nop
 8001e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e4e:	bc08      	pop	{r3}
 8001e50:	469e      	mov	lr, r3
 8001e52:	4770      	bx	lr
